
6_uart_printf.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000124c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  080013ec  080013ec  000113ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001448  08001448  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08001448  08001448  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001448  08001448  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001448  08001448  00011448  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800144c  0800144c  0001144c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08001450  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002005c  2**0
                  CONTENTS
 10 .bss          0000016c  2000005c  2000005c  0002005c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001c8  200001c8  0002005c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00000c0a  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000415  00000000  00000000  00020cd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000138  00000000  00000000  000210f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000000d7  00000000  00000000  00021228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00016913  00000000  00000000  000212ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000014d1  00000000  00000000  00037c12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00078102  00000000  00000000  000390e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000b94  00000000  00000000  000b11e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000076  00000000  00000000  000b1d7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080013d4 	.word	0x080013d4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	080013d4 	.word	0x080013d4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__io_putchar>:
void uart2_tx_init(void);
void uart2_write(int ch);

int __io_putchar(int ch);

int __io_putchar(int ch) {
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
	uart2_write(ch);
 8000288:	6878      	ldr	r0, [r7, #4]
 800028a:	f000 f865 	bl	8000358 <uart2_write>
	return ch;
 800028e:	687b      	ldr	r3, [r7, #4]
}
 8000290:	4618      	mov	r0, r3
 8000292:	3708      	adds	r7, #8
 8000294:	46bd      	mov	sp, r7
 8000296:	bd80      	pop	{r7, pc}

08000298 <main>:
/*NOTE: LEFT TO USE AFTER GETTING THE USB TO SERIAL CONVERTER. */
/* Our USART2 is connected to APB1 bus, hence enable it */
/* USART2 is within bit 17 of APB1_ENR Register */
/* PA2(Tx) and PA3 (rx) are Tx/Rx port pins under column AF7 (Alternate Function 7) */
/* So enable PA2 and PA3 and configure to be Alternate Function mode*/
int main(void) {
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0
	uart2_tx_init();
 800029c:	f000 f806 	bl	80002ac <uart2_tx_init>

	while(1) {
//		uart2_write('A');
		printf("Hello from STM32F3Discovery .........\n\r");
 80002a0:	4801      	ldr	r0, [pc, #4]	; (80002a8 <main+0x10>)
 80002a2:	f000 fa25 	bl	80006f0 <iprintf>
 80002a6:	e7fb      	b.n	80002a0 <main+0x8>
 80002a8:	080013ec 	.word	0x080013ec

080002ac <uart2_tx_init>:
	}


}

void uart2_tx_init(void) {
 80002ac:	b580      	push	{r7, lr}
 80002ae:	af00      	add	r7, sp, #0
						/**Configure uart gpio pin**/
	//Enable clk access to GPIOA connected to AHB2 Bus (General AHB within Code)
	RCC->AHBENR |= GPIOAEN;
 80002b0:	4b26      	ldr	r3, [pc, #152]	; (800034c <uart2_tx_init+0xa0>)
 80002b2:	695b      	ldr	r3, [r3, #20]
 80002b4:	4a25      	ldr	r2, [pc, #148]	; (800034c <uart2_tx_init+0xa0>)
 80002b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002ba:	6153      	str	r3, [r2, #20]

	//Set PA2 MODE to alt func mode 10
	GPIOA->MODER &= ~(1U<<4);
 80002bc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002c6:	f023 0310 	bic.w	r3, r3, #16
 80002ca:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<5);
 80002cc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002d6:	f043 0320 	orr.w	r3, r3, #32
 80002da:	6013      	str	r3, [r2, #0]

	//Set PA2 alt func type to UART_TX (AF7)
	//access the alternate function low register bits 8-11 for AFRL2[3:0]
	//and set that part of the register to AF7 (0111)
	GPIOA->AFR[0] |= (1U<<8);
 80002dc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002e0:	6a1b      	ldr	r3, [r3, #32]
 80002e2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002ea:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<9);
 80002ec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002f0:	6a1b      	ldr	r3, [r3, #32]
 80002f2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002fa:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<10);
 80002fc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000300:	6a1b      	ldr	r3, [r3, #32]
 8000302:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000306:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800030a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U<<11);
 800030c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000310:	6a1b      	ldr	r3, [r3, #32]
 8000312:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000316:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800031a:	6213      	str	r3, [r2, #32]

						/**Configure USART Module**/
	//Enable Clock access to UART2
	RCC->APB1ENR |= USART2EN;
 800031c:	4b0b      	ldr	r3, [pc, #44]	; (800034c <uart2_tx_init+0xa0>)
 800031e:	69db      	ldr	r3, [r3, #28]
 8000320:	4a0a      	ldr	r2, [pc, #40]	; (800034c <uart2_tx_init+0xa0>)
 8000322:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000326:	61d3      	str	r3, [r2, #28]
	//Configure UART Baud Rate
	uart_set_baudrate(USART2, APB1_CLK, USART2_BAUD_RATE);
 8000328:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800032c:	4908      	ldr	r1, [pc, #32]	; (8000350 <uart2_tx_init+0xa4>)
 800032e:	4809      	ldr	r0, [pc, #36]	; (8000354 <uart2_tx_init+0xa8>)
 8000330:	f000 f82a 	bl	8000388 <uart_set_baudrate>

	//Configure the transfer direction
	//within CR1 (Control Register 1: Bit3 - TE:Transmitter enable
	USART2->CR1 = CR1_TE;
 8000334:	4b07      	ldr	r3, [pc, #28]	; (8000354 <uart2_tx_init+0xa8>)
 8000336:	2208      	movs	r2, #8
 8000338:	601a      	str	r2, [r3, #0]

	//Enable the UART Module once done
	//within CR1, UART is enabled with UE bit 0 set to 1
	USART2->CR1 |= CR1_UE;
 800033a:	4b06      	ldr	r3, [pc, #24]	; (8000354 <uart2_tx_init+0xa8>)
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	4a05      	ldr	r2, [pc, #20]	; (8000354 <uart2_tx_init+0xa8>)
 8000340:	f043 0301 	orr.w	r3, r3, #1
 8000344:	6013      	str	r3, [r2, #0]

//	USART2->ISR &= ~(1U<<8);
}
 8000346:	bf00      	nop
 8000348:	bd80      	pop	{r7, pc}
 800034a:	bf00      	nop
 800034c:	40021000 	.word	0x40021000
 8000350:	00f42400 	.word	0x00f42400
 8000354:	40004400 	.word	0x40004400

08000358 <uart2_write>:

void uart2_write(int ch) {
 8000358:	b480      	push	{r7}
 800035a:	b083      	sub	sp, #12
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]
	/*Make sure the transmit data register is emoty*/
	//Check if Bit 7 TXE: Transmit data register empty within USART_ISR (Interrupt & Status Register)
	//if TX_E within USART_ISR is set to 1, Transmit Data Register is not empty
	while (USART2->ISR & TX_E) {
 8000360:	bf00      	nop
 8000362:	4b08      	ldr	r3, [pc, #32]	; (8000384 <uart2_write+0x2c>)
 8000364:	69db      	ldr	r3, [r3, #28]
 8000366:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800036a:	2b00      	cmp	r3, #0
 800036c:	d1f9      	bne.n	8000362 <uart2_write+0xa>

	/*Write to transmit data register*/
	/*For F3 disco board, the USART is split into two separate Data Registers: TDR and RDR*/
	//the ch & 0xFF allows for conversion of ch to 8-bit value due to AND with 11111111
	//for example, 16 bit AND would correspond with usage of 0xFFFF
	USART2->TDR = ch & 0xFFFF;
 800036e:	4b05      	ldr	r3, [pc, #20]	; (8000384 <uart2_write+0x2c>)
 8000370:	687a      	ldr	r2, [r7, #4]
 8000372:	b292      	uxth	r2, r2
 8000374:	851a      	strh	r2, [r3, #40]	; 0x28

}
 8000376:	bf00      	nop
 8000378:	370c      	adds	r7, #12
 800037a:	46bd      	mov	sp, r7
 800037c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000380:	4770      	bx	lr
 8000382:	bf00      	nop
 8000384:	40004400 	.word	0x40004400

08000388 <uart_set_baudrate>:

static void uart_set_baudrate(USART_TypeDef *USART, uint32_t PeriphClk, uint32_t BaudRate) {
 8000388:	b580      	push	{r7, lr}
 800038a:	b084      	sub	sp, #16
 800038c:	af00      	add	r7, sp, #0
 800038e:	60f8      	str	r0, [r7, #12]
 8000390:	60b9      	str	r1, [r7, #8]
 8000392:	607a      	str	r2, [r7, #4]
	USART->BRR = compute_uart_bd(PeriphClk, BaudRate);
 8000394:	6879      	ldr	r1, [r7, #4]
 8000396:	68b8      	ldr	r0, [r7, #8]
 8000398:	f000 f808 	bl	80003ac <compute_uart_bd>
 800039c:	4603      	mov	r3, r0
 800039e:	461a      	mov	r2, r3
 80003a0:	68fb      	ldr	r3, [r7, #12]
 80003a2:	60da      	str	r2, [r3, #12]


}
 80003a4:	bf00      	nop
 80003a6:	3710      	adds	r7, #16
 80003a8:	46bd      	mov	sp, r7
 80003aa:	bd80      	pop	{r7, pc}

080003ac <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate) {
 80003ac:	b480      	push	{r7}
 80003ae:	b083      	sub	sp, #12
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	6078      	str	r0, [r7, #4]
 80003b4:	6039      	str	r1, [r7, #0]

	return ((PeriphClk + (BaudRate/2U)) / BaudRate);
 80003b6:	683b      	ldr	r3, [r7, #0]
 80003b8:	085a      	lsrs	r2, r3, #1
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	441a      	add	r2, r3
 80003be:	683b      	ldr	r3, [r7, #0]
 80003c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80003c4:	b29b      	uxth	r3, r3
}
 80003c6:	4618      	mov	r0, r3
 80003c8:	370c      	adds	r7, #12
 80003ca:	46bd      	mov	sp, r7
 80003cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d0:	4770      	bx	lr

080003d2 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80003d2:	b580      	push	{r7, lr}
 80003d4:	b086      	sub	sp, #24
 80003d6:	af00      	add	r7, sp, #0
 80003d8:	60f8      	str	r0, [r7, #12]
 80003da:	60b9      	str	r1, [r7, #8]
 80003dc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003de:	2300      	movs	r3, #0
 80003e0:	617b      	str	r3, [r7, #20]
 80003e2:	e00a      	b.n	80003fa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80003e4:	f3af 8000 	nop.w
 80003e8:	4601      	mov	r1, r0
 80003ea:	68bb      	ldr	r3, [r7, #8]
 80003ec:	1c5a      	adds	r2, r3, #1
 80003ee:	60ba      	str	r2, [r7, #8]
 80003f0:	b2ca      	uxtb	r2, r1
 80003f2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003f4:	697b      	ldr	r3, [r7, #20]
 80003f6:	3301      	adds	r3, #1
 80003f8:	617b      	str	r3, [r7, #20]
 80003fa:	697a      	ldr	r2, [r7, #20]
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	429a      	cmp	r2, r3
 8000400:	dbf0      	blt.n	80003e4 <_read+0x12>
  }

  return len;
 8000402:	687b      	ldr	r3, [r7, #4]
}
 8000404:	4618      	mov	r0, r3
 8000406:	3718      	adds	r7, #24
 8000408:	46bd      	mov	sp, r7
 800040a:	bd80      	pop	{r7, pc}

0800040c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b086      	sub	sp, #24
 8000410:	af00      	add	r7, sp, #0
 8000412:	60f8      	str	r0, [r7, #12]
 8000414:	60b9      	str	r1, [r7, #8]
 8000416:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000418:	2300      	movs	r3, #0
 800041a:	617b      	str	r3, [r7, #20]
 800041c:	e009      	b.n	8000432 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800041e:	68bb      	ldr	r3, [r7, #8]
 8000420:	1c5a      	adds	r2, r3, #1
 8000422:	60ba      	str	r2, [r7, #8]
 8000424:	781b      	ldrb	r3, [r3, #0]
 8000426:	4618      	mov	r0, r3
 8000428:	f7ff ff2a 	bl	8000280 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800042c:	697b      	ldr	r3, [r7, #20]
 800042e:	3301      	adds	r3, #1
 8000430:	617b      	str	r3, [r7, #20]
 8000432:	697a      	ldr	r2, [r7, #20]
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	429a      	cmp	r2, r3
 8000438:	dbf1      	blt.n	800041e <_write+0x12>
  }
  return len;
 800043a:	687b      	ldr	r3, [r7, #4]
}
 800043c:	4618      	mov	r0, r3
 800043e:	3718      	adds	r7, #24
 8000440:	46bd      	mov	sp, r7
 8000442:	bd80      	pop	{r7, pc}

08000444 <_close>:

int _close(int file)
{
 8000444:	b480      	push	{r7}
 8000446:	b083      	sub	sp, #12
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800044c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000450:	4618      	mov	r0, r3
 8000452:	370c      	adds	r7, #12
 8000454:	46bd      	mov	sp, r7
 8000456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045a:	4770      	bx	lr

0800045c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800045c:	b480      	push	{r7}
 800045e:	b083      	sub	sp, #12
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
 8000464:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000466:	683b      	ldr	r3, [r7, #0]
 8000468:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800046c:	605a      	str	r2, [r3, #4]
  return 0;
 800046e:	2300      	movs	r3, #0
}
 8000470:	4618      	mov	r0, r3
 8000472:	370c      	adds	r7, #12
 8000474:	46bd      	mov	sp, r7
 8000476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047a:	4770      	bx	lr

0800047c <_isatty>:

int _isatty(int file)
{
 800047c:	b480      	push	{r7}
 800047e:	b083      	sub	sp, #12
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000484:	2301      	movs	r3, #1
}
 8000486:	4618      	mov	r0, r3
 8000488:	370c      	adds	r7, #12
 800048a:	46bd      	mov	sp, r7
 800048c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000490:	4770      	bx	lr

08000492 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000492:	b480      	push	{r7}
 8000494:	b085      	sub	sp, #20
 8000496:	af00      	add	r7, sp, #0
 8000498:	60f8      	str	r0, [r7, #12]
 800049a:	60b9      	str	r1, [r7, #8]
 800049c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800049e:	2300      	movs	r3, #0
}
 80004a0:	4618      	mov	r0, r3
 80004a2:	3714      	adds	r7, #20
 80004a4:	46bd      	mov	sp, r7
 80004a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004aa:	4770      	bx	lr

080004ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b086      	sub	sp, #24
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80004b4:	4a14      	ldr	r2, [pc, #80]	; (8000508 <_sbrk+0x5c>)
 80004b6:	4b15      	ldr	r3, [pc, #84]	; (800050c <_sbrk+0x60>)
 80004b8:	1ad3      	subs	r3, r2, r3
 80004ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80004bc:	697b      	ldr	r3, [r7, #20]
 80004be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80004c0:	4b13      	ldr	r3, [pc, #76]	; (8000510 <_sbrk+0x64>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d102      	bne.n	80004ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80004c8:	4b11      	ldr	r3, [pc, #68]	; (8000510 <_sbrk+0x64>)
 80004ca:	4a12      	ldr	r2, [pc, #72]	; (8000514 <_sbrk+0x68>)
 80004cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80004ce:	4b10      	ldr	r3, [pc, #64]	; (8000510 <_sbrk+0x64>)
 80004d0:	681a      	ldr	r2, [r3, #0]
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	4413      	add	r3, r2
 80004d6:	693a      	ldr	r2, [r7, #16]
 80004d8:	429a      	cmp	r2, r3
 80004da:	d207      	bcs.n	80004ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80004dc:	f000 f922 	bl	8000724 <__errno>
 80004e0:	4603      	mov	r3, r0
 80004e2:	220c      	movs	r2, #12
 80004e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80004e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80004ea:	e009      	b.n	8000500 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80004ec:	4b08      	ldr	r3, [pc, #32]	; (8000510 <_sbrk+0x64>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80004f2:	4b07      	ldr	r3, [pc, #28]	; (8000510 <_sbrk+0x64>)
 80004f4:	681a      	ldr	r2, [r3, #0]
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	4413      	add	r3, r2
 80004fa:	4a05      	ldr	r2, [pc, #20]	; (8000510 <_sbrk+0x64>)
 80004fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80004fe:	68fb      	ldr	r3, [r7, #12]
}
 8000500:	4618      	mov	r0, r3
 8000502:	3718      	adds	r7, #24
 8000504:	46bd      	mov	sp, r7
 8000506:	bd80      	pop	{r7, pc}
 8000508:	2000a000 	.word	0x2000a000
 800050c:	00000400 	.word	0x00000400
 8000510:	20000078 	.word	0x20000078
 8000514:	200001c8 	.word	0x200001c8

08000518 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000518:	480d      	ldr	r0, [pc, #52]	; (8000550 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800051a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800051c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000520:	480c      	ldr	r0, [pc, #48]	; (8000554 <LoopForever+0x6>)
  ldr r1, =_edata
 8000522:	490d      	ldr	r1, [pc, #52]	; (8000558 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000524:	4a0d      	ldr	r2, [pc, #52]	; (800055c <LoopForever+0xe>)
  movs r3, #0
 8000526:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000528:	e002      	b.n	8000530 <LoopCopyDataInit>

0800052a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800052a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800052c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800052e:	3304      	adds	r3, #4

08000530 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000530:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000532:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000534:	d3f9      	bcc.n	800052a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000536:	4a0a      	ldr	r2, [pc, #40]	; (8000560 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000538:	4c0a      	ldr	r4, [pc, #40]	; (8000564 <LoopForever+0x16>)
  movs r3, #0
 800053a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800053c:	e001      	b.n	8000542 <LoopFillZerobss>

0800053e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800053e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000540:	3204      	adds	r2, #4

08000542 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000542:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000544:	d3fb      	bcc.n	800053e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000546:	f000 f8f3 	bl	8000730 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800054a:	f7ff fea5 	bl	8000298 <main>

0800054e <LoopForever>:

LoopForever:
  b LoopForever
 800054e:	e7fe      	b.n	800054e <LoopForever>
  ldr   r0, =_estack
 8000550:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000554:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000558:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800055c:	08001450 	.word	0x08001450
  ldr r2, =_sbss
 8000560:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000564:	200001c8 	.word	0x200001c8

08000568 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000568:	e7fe      	b.n	8000568 <ADC1_2_IRQHandler>
	...

0800056c <std>:
 800056c:	2300      	movs	r3, #0
 800056e:	b510      	push	{r4, lr}
 8000570:	4604      	mov	r4, r0
 8000572:	e9c0 3300 	strd	r3, r3, [r0]
 8000576:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800057a:	6083      	str	r3, [r0, #8]
 800057c:	8181      	strh	r1, [r0, #12]
 800057e:	6643      	str	r3, [r0, #100]	; 0x64
 8000580:	81c2      	strh	r2, [r0, #14]
 8000582:	6183      	str	r3, [r0, #24]
 8000584:	4619      	mov	r1, r3
 8000586:	2208      	movs	r2, #8
 8000588:	305c      	adds	r0, #92	; 0x5c
 800058a:	f000 f8c3 	bl	8000714 <memset>
 800058e:	4b0d      	ldr	r3, [pc, #52]	; (80005c4 <std+0x58>)
 8000590:	6263      	str	r3, [r4, #36]	; 0x24
 8000592:	4b0d      	ldr	r3, [pc, #52]	; (80005c8 <std+0x5c>)
 8000594:	62a3      	str	r3, [r4, #40]	; 0x28
 8000596:	4b0d      	ldr	r3, [pc, #52]	; (80005cc <std+0x60>)
 8000598:	62e3      	str	r3, [r4, #44]	; 0x2c
 800059a:	4b0d      	ldr	r3, [pc, #52]	; (80005d0 <std+0x64>)
 800059c:	6323      	str	r3, [r4, #48]	; 0x30
 800059e:	4b0d      	ldr	r3, [pc, #52]	; (80005d4 <std+0x68>)
 80005a0:	6224      	str	r4, [r4, #32]
 80005a2:	429c      	cmp	r4, r3
 80005a4:	d006      	beq.n	80005b4 <std+0x48>
 80005a6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80005aa:	4294      	cmp	r4, r2
 80005ac:	d002      	beq.n	80005b4 <std+0x48>
 80005ae:	33d0      	adds	r3, #208	; 0xd0
 80005b0:	429c      	cmp	r4, r3
 80005b2:	d105      	bne.n	80005c0 <std+0x54>
 80005b4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80005b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80005bc:	f000 b8dc 	b.w	8000778 <__retarget_lock_init_recursive>
 80005c0:	bd10      	pop	{r4, pc}
 80005c2:	bf00      	nop
 80005c4:	08000fd9 	.word	0x08000fd9
 80005c8:	08000ffb 	.word	0x08000ffb
 80005cc:	08001033 	.word	0x08001033
 80005d0:	08001057 	.word	0x08001057
 80005d4:	2000007c 	.word	0x2000007c

080005d8 <stdio_exit_handler>:
 80005d8:	4a02      	ldr	r2, [pc, #8]	; (80005e4 <stdio_exit_handler+0xc>)
 80005da:	4903      	ldr	r1, [pc, #12]	; (80005e8 <stdio_exit_handler+0x10>)
 80005dc:	4803      	ldr	r0, [pc, #12]	; (80005ec <stdio_exit_handler+0x14>)
 80005de:	f000 b869 	b.w	80006b4 <_fwalk_sglue>
 80005e2:	bf00      	nop
 80005e4:	20000000 	.word	0x20000000
 80005e8:	08000f71 	.word	0x08000f71
 80005ec:	2000000c 	.word	0x2000000c

080005f0 <cleanup_stdio>:
 80005f0:	6841      	ldr	r1, [r0, #4]
 80005f2:	4b0c      	ldr	r3, [pc, #48]	; (8000624 <cleanup_stdio+0x34>)
 80005f4:	4299      	cmp	r1, r3
 80005f6:	b510      	push	{r4, lr}
 80005f8:	4604      	mov	r4, r0
 80005fa:	d001      	beq.n	8000600 <cleanup_stdio+0x10>
 80005fc:	f000 fcb8 	bl	8000f70 <_fflush_r>
 8000600:	68a1      	ldr	r1, [r4, #8]
 8000602:	4b09      	ldr	r3, [pc, #36]	; (8000628 <cleanup_stdio+0x38>)
 8000604:	4299      	cmp	r1, r3
 8000606:	d002      	beq.n	800060e <cleanup_stdio+0x1e>
 8000608:	4620      	mov	r0, r4
 800060a:	f000 fcb1 	bl	8000f70 <_fflush_r>
 800060e:	68e1      	ldr	r1, [r4, #12]
 8000610:	4b06      	ldr	r3, [pc, #24]	; (800062c <cleanup_stdio+0x3c>)
 8000612:	4299      	cmp	r1, r3
 8000614:	d004      	beq.n	8000620 <cleanup_stdio+0x30>
 8000616:	4620      	mov	r0, r4
 8000618:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800061c:	f000 bca8 	b.w	8000f70 <_fflush_r>
 8000620:	bd10      	pop	{r4, pc}
 8000622:	bf00      	nop
 8000624:	2000007c 	.word	0x2000007c
 8000628:	200000e4 	.word	0x200000e4
 800062c:	2000014c 	.word	0x2000014c

08000630 <global_stdio_init.part.0>:
 8000630:	b510      	push	{r4, lr}
 8000632:	4b0b      	ldr	r3, [pc, #44]	; (8000660 <global_stdio_init.part.0+0x30>)
 8000634:	4c0b      	ldr	r4, [pc, #44]	; (8000664 <global_stdio_init.part.0+0x34>)
 8000636:	4a0c      	ldr	r2, [pc, #48]	; (8000668 <global_stdio_init.part.0+0x38>)
 8000638:	601a      	str	r2, [r3, #0]
 800063a:	4620      	mov	r0, r4
 800063c:	2200      	movs	r2, #0
 800063e:	2104      	movs	r1, #4
 8000640:	f7ff ff94 	bl	800056c <std>
 8000644:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8000648:	2201      	movs	r2, #1
 800064a:	2109      	movs	r1, #9
 800064c:	f7ff ff8e 	bl	800056c <std>
 8000650:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8000654:	2202      	movs	r2, #2
 8000656:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800065a:	2112      	movs	r1, #18
 800065c:	f7ff bf86 	b.w	800056c <std>
 8000660:	200001b4 	.word	0x200001b4
 8000664:	2000007c 	.word	0x2000007c
 8000668:	080005d9 	.word	0x080005d9

0800066c <__sfp_lock_acquire>:
 800066c:	4801      	ldr	r0, [pc, #4]	; (8000674 <__sfp_lock_acquire+0x8>)
 800066e:	f000 b884 	b.w	800077a <__retarget_lock_acquire_recursive>
 8000672:	bf00      	nop
 8000674:	200001b9 	.word	0x200001b9

08000678 <__sfp_lock_release>:
 8000678:	4801      	ldr	r0, [pc, #4]	; (8000680 <__sfp_lock_release+0x8>)
 800067a:	f000 b87f 	b.w	800077c <__retarget_lock_release_recursive>
 800067e:	bf00      	nop
 8000680:	200001b9 	.word	0x200001b9

08000684 <__sinit>:
 8000684:	b510      	push	{r4, lr}
 8000686:	4604      	mov	r4, r0
 8000688:	f7ff fff0 	bl	800066c <__sfp_lock_acquire>
 800068c:	6a23      	ldr	r3, [r4, #32]
 800068e:	b11b      	cbz	r3, 8000698 <__sinit+0x14>
 8000690:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000694:	f7ff bff0 	b.w	8000678 <__sfp_lock_release>
 8000698:	4b04      	ldr	r3, [pc, #16]	; (80006ac <__sinit+0x28>)
 800069a:	6223      	str	r3, [r4, #32]
 800069c:	4b04      	ldr	r3, [pc, #16]	; (80006b0 <__sinit+0x2c>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d1f5      	bne.n	8000690 <__sinit+0xc>
 80006a4:	f7ff ffc4 	bl	8000630 <global_stdio_init.part.0>
 80006a8:	e7f2      	b.n	8000690 <__sinit+0xc>
 80006aa:	bf00      	nop
 80006ac:	080005f1 	.word	0x080005f1
 80006b0:	200001b4 	.word	0x200001b4

080006b4 <_fwalk_sglue>:
 80006b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80006b8:	4607      	mov	r7, r0
 80006ba:	4688      	mov	r8, r1
 80006bc:	4614      	mov	r4, r2
 80006be:	2600      	movs	r6, #0
 80006c0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80006c4:	f1b9 0901 	subs.w	r9, r9, #1
 80006c8:	d505      	bpl.n	80006d6 <_fwalk_sglue+0x22>
 80006ca:	6824      	ldr	r4, [r4, #0]
 80006cc:	2c00      	cmp	r4, #0
 80006ce:	d1f7      	bne.n	80006c0 <_fwalk_sglue+0xc>
 80006d0:	4630      	mov	r0, r6
 80006d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80006d6:	89ab      	ldrh	r3, [r5, #12]
 80006d8:	2b01      	cmp	r3, #1
 80006da:	d907      	bls.n	80006ec <_fwalk_sglue+0x38>
 80006dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80006e0:	3301      	adds	r3, #1
 80006e2:	d003      	beq.n	80006ec <_fwalk_sglue+0x38>
 80006e4:	4629      	mov	r1, r5
 80006e6:	4638      	mov	r0, r7
 80006e8:	47c0      	blx	r8
 80006ea:	4306      	orrs	r6, r0
 80006ec:	3568      	adds	r5, #104	; 0x68
 80006ee:	e7e9      	b.n	80006c4 <_fwalk_sglue+0x10>

080006f0 <iprintf>:
 80006f0:	b40f      	push	{r0, r1, r2, r3}
 80006f2:	b507      	push	{r0, r1, r2, lr}
 80006f4:	4906      	ldr	r1, [pc, #24]	; (8000710 <iprintf+0x20>)
 80006f6:	ab04      	add	r3, sp, #16
 80006f8:	6808      	ldr	r0, [r1, #0]
 80006fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80006fe:	6881      	ldr	r1, [r0, #8]
 8000700:	9301      	str	r3, [sp, #4]
 8000702:	f000 f865 	bl	80007d0 <_vfiprintf_r>
 8000706:	b003      	add	sp, #12
 8000708:	f85d eb04 	ldr.w	lr, [sp], #4
 800070c:	b004      	add	sp, #16
 800070e:	4770      	bx	lr
 8000710:	20000058 	.word	0x20000058

08000714 <memset>:
 8000714:	4402      	add	r2, r0
 8000716:	4603      	mov	r3, r0
 8000718:	4293      	cmp	r3, r2
 800071a:	d100      	bne.n	800071e <memset+0xa>
 800071c:	4770      	bx	lr
 800071e:	f803 1b01 	strb.w	r1, [r3], #1
 8000722:	e7f9      	b.n	8000718 <memset+0x4>

08000724 <__errno>:
 8000724:	4b01      	ldr	r3, [pc, #4]	; (800072c <__errno+0x8>)
 8000726:	6818      	ldr	r0, [r3, #0]
 8000728:	4770      	bx	lr
 800072a:	bf00      	nop
 800072c:	20000058 	.word	0x20000058

08000730 <__libc_init_array>:
 8000730:	b570      	push	{r4, r5, r6, lr}
 8000732:	4d0d      	ldr	r5, [pc, #52]	; (8000768 <__libc_init_array+0x38>)
 8000734:	4c0d      	ldr	r4, [pc, #52]	; (800076c <__libc_init_array+0x3c>)
 8000736:	1b64      	subs	r4, r4, r5
 8000738:	10a4      	asrs	r4, r4, #2
 800073a:	2600      	movs	r6, #0
 800073c:	42a6      	cmp	r6, r4
 800073e:	d109      	bne.n	8000754 <__libc_init_array+0x24>
 8000740:	4d0b      	ldr	r5, [pc, #44]	; (8000770 <__libc_init_array+0x40>)
 8000742:	4c0c      	ldr	r4, [pc, #48]	; (8000774 <__libc_init_array+0x44>)
 8000744:	f000 fe46 	bl	80013d4 <_init>
 8000748:	1b64      	subs	r4, r4, r5
 800074a:	10a4      	asrs	r4, r4, #2
 800074c:	2600      	movs	r6, #0
 800074e:	42a6      	cmp	r6, r4
 8000750:	d105      	bne.n	800075e <__libc_init_array+0x2e>
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f855 3b04 	ldr.w	r3, [r5], #4
 8000758:	4798      	blx	r3
 800075a:	3601      	adds	r6, #1
 800075c:	e7ee      	b.n	800073c <__libc_init_array+0xc>
 800075e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000762:	4798      	blx	r3
 8000764:	3601      	adds	r6, #1
 8000766:	e7f2      	b.n	800074e <__libc_init_array+0x1e>
 8000768:	08001448 	.word	0x08001448
 800076c:	08001448 	.word	0x08001448
 8000770:	08001448 	.word	0x08001448
 8000774:	0800144c 	.word	0x0800144c

08000778 <__retarget_lock_init_recursive>:
 8000778:	4770      	bx	lr

0800077a <__retarget_lock_acquire_recursive>:
 800077a:	4770      	bx	lr

0800077c <__retarget_lock_release_recursive>:
 800077c:	4770      	bx	lr

0800077e <__sfputc_r>:
 800077e:	6893      	ldr	r3, [r2, #8]
 8000780:	3b01      	subs	r3, #1
 8000782:	2b00      	cmp	r3, #0
 8000784:	b410      	push	{r4}
 8000786:	6093      	str	r3, [r2, #8]
 8000788:	da08      	bge.n	800079c <__sfputc_r+0x1e>
 800078a:	6994      	ldr	r4, [r2, #24]
 800078c:	42a3      	cmp	r3, r4
 800078e:	db01      	blt.n	8000794 <__sfputc_r+0x16>
 8000790:	290a      	cmp	r1, #10
 8000792:	d103      	bne.n	800079c <__sfputc_r+0x1e>
 8000794:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000798:	f000 bc61 	b.w	800105e <__swbuf_r>
 800079c:	6813      	ldr	r3, [r2, #0]
 800079e:	1c58      	adds	r0, r3, #1
 80007a0:	6010      	str	r0, [r2, #0]
 80007a2:	7019      	strb	r1, [r3, #0]
 80007a4:	4608      	mov	r0, r1
 80007a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80007aa:	4770      	bx	lr

080007ac <__sfputs_r>:
 80007ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007ae:	4606      	mov	r6, r0
 80007b0:	460f      	mov	r7, r1
 80007b2:	4614      	mov	r4, r2
 80007b4:	18d5      	adds	r5, r2, r3
 80007b6:	42ac      	cmp	r4, r5
 80007b8:	d101      	bne.n	80007be <__sfputs_r+0x12>
 80007ba:	2000      	movs	r0, #0
 80007bc:	e007      	b.n	80007ce <__sfputs_r+0x22>
 80007be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80007c2:	463a      	mov	r2, r7
 80007c4:	4630      	mov	r0, r6
 80007c6:	f7ff ffda 	bl	800077e <__sfputc_r>
 80007ca:	1c43      	adds	r3, r0, #1
 80007cc:	d1f3      	bne.n	80007b6 <__sfputs_r+0xa>
 80007ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080007d0 <_vfiprintf_r>:
 80007d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80007d4:	460d      	mov	r5, r1
 80007d6:	b09d      	sub	sp, #116	; 0x74
 80007d8:	4614      	mov	r4, r2
 80007da:	4698      	mov	r8, r3
 80007dc:	4606      	mov	r6, r0
 80007de:	b118      	cbz	r0, 80007e8 <_vfiprintf_r+0x18>
 80007e0:	6a03      	ldr	r3, [r0, #32]
 80007e2:	b90b      	cbnz	r3, 80007e8 <_vfiprintf_r+0x18>
 80007e4:	f7ff ff4e 	bl	8000684 <__sinit>
 80007e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80007ea:	07d9      	lsls	r1, r3, #31
 80007ec:	d405      	bmi.n	80007fa <_vfiprintf_r+0x2a>
 80007ee:	89ab      	ldrh	r3, [r5, #12]
 80007f0:	059a      	lsls	r2, r3, #22
 80007f2:	d402      	bmi.n	80007fa <_vfiprintf_r+0x2a>
 80007f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80007f6:	f7ff ffc0 	bl	800077a <__retarget_lock_acquire_recursive>
 80007fa:	89ab      	ldrh	r3, [r5, #12]
 80007fc:	071b      	lsls	r3, r3, #28
 80007fe:	d501      	bpl.n	8000804 <_vfiprintf_r+0x34>
 8000800:	692b      	ldr	r3, [r5, #16]
 8000802:	b99b      	cbnz	r3, 800082c <_vfiprintf_r+0x5c>
 8000804:	4629      	mov	r1, r5
 8000806:	4630      	mov	r0, r6
 8000808:	f000 fc66 	bl	80010d8 <__swsetup_r>
 800080c:	b170      	cbz	r0, 800082c <_vfiprintf_r+0x5c>
 800080e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000810:	07dc      	lsls	r4, r3, #31
 8000812:	d504      	bpl.n	800081e <_vfiprintf_r+0x4e>
 8000814:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000818:	b01d      	add	sp, #116	; 0x74
 800081a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800081e:	89ab      	ldrh	r3, [r5, #12]
 8000820:	0598      	lsls	r0, r3, #22
 8000822:	d4f7      	bmi.n	8000814 <_vfiprintf_r+0x44>
 8000824:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000826:	f7ff ffa9 	bl	800077c <__retarget_lock_release_recursive>
 800082a:	e7f3      	b.n	8000814 <_vfiprintf_r+0x44>
 800082c:	2300      	movs	r3, #0
 800082e:	9309      	str	r3, [sp, #36]	; 0x24
 8000830:	2320      	movs	r3, #32
 8000832:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000836:	f8cd 800c 	str.w	r8, [sp, #12]
 800083a:	2330      	movs	r3, #48	; 0x30
 800083c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80009f0 <_vfiprintf_r+0x220>
 8000840:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000844:	f04f 0901 	mov.w	r9, #1
 8000848:	4623      	mov	r3, r4
 800084a:	469a      	mov	sl, r3
 800084c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000850:	b10a      	cbz	r2, 8000856 <_vfiprintf_r+0x86>
 8000852:	2a25      	cmp	r2, #37	; 0x25
 8000854:	d1f9      	bne.n	800084a <_vfiprintf_r+0x7a>
 8000856:	ebba 0b04 	subs.w	fp, sl, r4
 800085a:	d00b      	beq.n	8000874 <_vfiprintf_r+0xa4>
 800085c:	465b      	mov	r3, fp
 800085e:	4622      	mov	r2, r4
 8000860:	4629      	mov	r1, r5
 8000862:	4630      	mov	r0, r6
 8000864:	f7ff ffa2 	bl	80007ac <__sfputs_r>
 8000868:	3001      	adds	r0, #1
 800086a:	f000 80a9 	beq.w	80009c0 <_vfiprintf_r+0x1f0>
 800086e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000870:	445a      	add	r2, fp
 8000872:	9209      	str	r2, [sp, #36]	; 0x24
 8000874:	f89a 3000 	ldrb.w	r3, [sl]
 8000878:	2b00      	cmp	r3, #0
 800087a:	f000 80a1 	beq.w	80009c0 <_vfiprintf_r+0x1f0>
 800087e:	2300      	movs	r3, #0
 8000880:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000884:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000888:	f10a 0a01 	add.w	sl, sl, #1
 800088c:	9304      	str	r3, [sp, #16]
 800088e:	9307      	str	r3, [sp, #28]
 8000890:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000894:	931a      	str	r3, [sp, #104]	; 0x68
 8000896:	4654      	mov	r4, sl
 8000898:	2205      	movs	r2, #5
 800089a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800089e:	4854      	ldr	r0, [pc, #336]	; (80009f0 <_vfiprintf_r+0x220>)
 80008a0:	f7ff fc9e 	bl	80001e0 <memchr>
 80008a4:	9a04      	ldr	r2, [sp, #16]
 80008a6:	b9d8      	cbnz	r0, 80008e0 <_vfiprintf_r+0x110>
 80008a8:	06d1      	lsls	r1, r2, #27
 80008aa:	bf44      	itt	mi
 80008ac:	2320      	movmi	r3, #32
 80008ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80008b2:	0713      	lsls	r3, r2, #28
 80008b4:	bf44      	itt	mi
 80008b6:	232b      	movmi	r3, #43	; 0x2b
 80008b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80008bc:	f89a 3000 	ldrb.w	r3, [sl]
 80008c0:	2b2a      	cmp	r3, #42	; 0x2a
 80008c2:	d015      	beq.n	80008f0 <_vfiprintf_r+0x120>
 80008c4:	9a07      	ldr	r2, [sp, #28]
 80008c6:	4654      	mov	r4, sl
 80008c8:	2000      	movs	r0, #0
 80008ca:	f04f 0c0a 	mov.w	ip, #10
 80008ce:	4621      	mov	r1, r4
 80008d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80008d4:	3b30      	subs	r3, #48	; 0x30
 80008d6:	2b09      	cmp	r3, #9
 80008d8:	d94d      	bls.n	8000976 <_vfiprintf_r+0x1a6>
 80008da:	b1b0      	cbz	r0, 800090a <_vfiprintf_r+0x13a>
 80008dc:	9207      	str	r2, [sp, #28]
 80008de:	e014      	b.n	800090a <_vfiprintf_r+0x13a>
 80008e0:	eba0 0308 	sub.w	r3, r0, r8
 80008e4:	fa09 f303 	lsl.w	r3, r9, r3
 80008e8:	4313      	orrs	r3, r2
 80008ea:	9304      	str	r3, [sp, #16]
 80008ec:	46a2      	mov	sl, r4
 80008ee:	e7d2      	b.n	8000896 <_vfiprintf_r+0xc6>
 80008f0:	9b03      	ldr	r3, [sp, #12]
 80008f2:	1d19      	adds	r1, r3, #4
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	9103      	str	r1, [sp, #12]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	bfbb      	ittet	lt
 80008fc:	425b      	neglt	r3, r3
 80008fe:	f042 0202 	orrlt.w	r2, r2, #2
 8000902:	9307      	strge	r3, [sp, #28]
 8000904:	9307      	strlt	r3, [sp, #28]
 8000906:	bfb8      	it	lt
 8000908:	9204      	strlt	r2, [sp, #16]
 800090a:	7823      	ldrb	r3, [r4, #0]
 800090c:	2b2e      	cmp	r3, #46	; 0x2e
 800090e:	d10c      	bne.n	800092a <_vfiprintf_r+0x15a>
 8000910:	7863      	ldrb	r3, [r4, #1]
 8000912:	2b2a      	cmp	r3, #42	; 0x2a
 8000914:	d134      	bne.n	8000980 <_vfiprintf_r+0x1b0>
 8000916:	9b03      	ldr	r3, [sp, #12]
 8000918:	1d1a      	adds	r2, r3, #4
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	9203      	str	r2, [sp, #12]
 800091e:	2b00      	cmp	r3, #0
 8000920:	bfb8      	it	lt
 8000922:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8000926:	3402      	adds	r4, #2
 8000928:	9305      	str	r3, [sp, #20]
 800092a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8000a00 <_vfiprintf_r+0x230>
 800092e:	7821      	ldrb	r1, [r4, #0]
 8000930:	2203      	movs	r2, #3
 8000932:	4650      	mov	r0, sl
 8000934:	f7ff fc54 	bl	80001e0 <memchr>
 8000938:	b138      	cbz	r0, 800094a <_vfiprintf_r+0x17a>
 800093a:	9b04      	ldr	r3, [sp, #16]
 800093c:	eba0 000a 	sub.w	r0, r0, sl
 8000940:	2240      	movs	r2, #64	; 0x40
 8000942:	4082      	lsls	r2, r0
 8000944:	4313      	orrs	r3, r2
 8000946:	3401      	adds	r4, #1
 8000948:	9304      	str	r3, [sp, #16]
 800094a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800094e:	4829      	ldr	r0, [pc, #164]	; (80009f4 <_vfiprintf_r+0x224>)
 8000950:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000954:	2206      	movs	r2, #6
 8000956:	f7ff fc43 	bl	80001e0 <memchr>
 800095a:	2800      	cmp	r0, #0
 800095c:	d03f      	beq.n	80009de <_vfiprintf_r+0x20e>
 800095e:	4b26      	ldr	r3, [pc, #152]	; (80009f8 <_vfiprintf_r+0x228>)
 8000960:	bb1b      	cbnz	r3, 80009aa <_vfiprintf_r+0x1da>
 8000962:	9b03      	ldr	r3, [sp, #12]
 8000964:	3307      	adds	r3, #7
 8000966:	f023 0307 	bic.w	r3, r3, #7
 800096a:	3308      	adds	r3, #8
 800096c:	9303      	str	r3, [sp, #12]
 800096e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000970:	443b      	add	r3, r7
 8000972:	9309      	str	r3, [sp, #36]	; 0x24
 8000974:	e768      	b.n	8000848 <_vfiprintf_r+0x78>
 8000976:	fb0c 3202 	mla	r2, ip, r2, r3
 800097a:	460c      	mov	r4, r1
 800097c:	2001      	movs	r0, #1
 800097e:	e7a6      	b.n	80008ce <_vfiprintf_r+0xfe>
 8000980:	2300      	movs	r3, #0
 8000982:	3401      	adds	r4, #1
 8000984:	9305      	str	r3, [sp, #20]
 8000986:	4619      	mov	r1, r3
 8000988:	f04f 0c0a 	mov.w	ip, #10
 800098c:	4620      	mov	r0, r4
 800098e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000992:	3a30      	subs	r2, #48	; 0x30
 8000994:	2a09      	cmp	r2, #9
 8000996:	d903      	bls.n	80009a0 <_vfiprintf_r+0x1d0>
 8000998:	2b00      	cmp	r3, #0
 800099a:	d0c6      	beq.n	800092a <_vfiprintf_r+0x15a>
 800099c:	9105      	str	r1, [sp, #20]
 800099e:	e7c4      	b.n	800092a <_vfiprintf_r+0x15a>
 80009a0:	fb0c 2101 	mla	r1, ip, r1, r2
 80009a4:	4604      	mov	r4, r0
 80009a6:	2301      	movs	r3, #1
 80009a8:	e7f0      	b.n	800098c <_vfiprintf_r+0x1bc>
 80009aa:	ab03      	add	r3, sp, #12
 80009ac:	9300      	str	r3, [sp, #0]
 80009ae:	462a      	mov	r2, r5
 80009b0:	4b12      	ldr	r3, [pc, #72]	; (80009fc <_vfiprintf_r+0x22c>)
 80009b2:	a904      	add	r1, sp, #16
 80009b4:	4630      	mov	r0, r6
 80009b6:	f3af 8000 	nop.w
 80009ba:	4607      	mov	r7, r0
 80009bc:	1c78      	adds	r0, r7, #1
 80009be:	d1d6      	bne.n	800096e <_vfiprintf_r+0x19e>
 80009c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80009c2:	07d9      	lsls	r1, r3, #31
 80009c4:	d405      	bmi.n	80009d2 <_vfiprintf_r+0x202>
 80009c6:	89ab      	ldrh	r3, [r5, #12]
 80009c8:	059a      	lsls	r2, r3, #22
 80009ca:	d402      	bmi.n	80009d2 <_vfiprintf_r+0x202>
 80009cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80009ce:	f7ff fed5 	bl	800077c <__retarget_lock_release_recursive>
 80009d2:	89ab      	ldrh	r3, [r5, #12]
 80009d4:	065b      	lsls	r3, r3, #25
 80009d6:	f53f af1d 	bmi.w	8000814 <_vfiprintf_r+0x44>
 80009da:	9809      	ldr	r0, [sp, #36]	; 0x24
 80009dc:	e71c      	b.n	8000818 <_vfiprintf_r+0x48>
 80009de:	ab03      	add	r3, sp, #12
 80009e0:	9300      	str	r3, [sp, #0]
 80009e2:	462a      	mov	r2, r5
 80009e4:	4b05      	ldr	r3, [pc, #20]	; (80009fc <_vfiprintf_r+0x22c>)
 80009e6:	a904      	add	r1, sp, #16
 80009e8:	4630      	mov	r0, r6
 80009ea:	f000 f919 	bl	8000c20 <_printf_i>
 80009ee:	e7e4      	b.n	80009ba <_vfiprintf_r+0x1ea>
 80009f0:	08001414 	.word	0x08001414
 80009f4:	0800141e 	.word	0x0800141e
 80009f8:	00000000 	.word	0x00000000
 80009fc:	080007ad 	.word	0x080007ad
 8000a00:	0800141a 	.word	0x0800141a

08000a04 <sbrk_aligned>:
 8000a04:	b570      	push	{r4, r5, r6, lr}
 8000a06:	4e0e      	ldr	r6, [pc, #56]	; (8000a40 <sbrk_aligned+0x3c>)
 8000a08:	460c      	mov	r4, r1
 8000a0a:	6831      	ldr	r1, [r6, #0]
 8000a0c:	4605      	mov	r5, r0
 8000a0e:	b911      	cbnz	r1, 8000a16 <sbrk_aligned+0x12>
 8000a10:	f000 fc72 	bl	80012f8 <_sbrk_r>
 8000a14:	6030      	str	r0, [r6, #0]
 8000a16:	4621      	mov	r1, r4
 8000a18:	4628      	mov	r0, r5
 8000a1a:	f000 fc6d 	bl	80012f8 <_sbrk_r>
 8000a1e:	1c43      	adds	r3, r0, #1
 8000a20:	d00a      	beq.n	8000a38 <sbrk_aligned+0x34>
 8000a22:	1cc4      	adds	r4, r0, #3
 8000a24:	f024 0403 	bic.w	r4, r4, #3
 8000a28:	42a0      	cmp	r0, r4
 8000a2a:	d007      	beq.n	8000a3c <sbrk_aligned+0x38>
 8000a2c:	1a21      	subs	r1, r4, r0
 8000a2e:	4628      	mov	r0, r5
 8000a30:	f000 fc62 	bl	80012f8 <_sbrk_r>
 8000a34:	3001      	adds	r0, #1
 8000a36:	d101      	bne.n	8000a3c <sbrk_aligned+0x38>
 8000a38:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8000a3c:	4620      	mov	r0, r4
 8000a3e:	bd70      	pop	{r4, r5, r6, pc}
 8000a40:	200001c0 	.word	0x200001c0

08000a44 <_malloc_r>:
 8000a44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000a48:	1ccd      	adds	r5, r1, #3
 8000a4a:	f025 0503 	bic.w	r5, r5, #3
 8000a4e:	3508      	adds	r5, #8
 8000a50:	2d0c      	cmp	r5, #12
 8000a52:	bf38      	it	cc
 8000a54:	250c      	movcc	r5, #12
 8000a56:	2d00      	cmp	r5, #0
 8000a58:	4607      	mov	r7, r0
 8000a5a:	db01      	blt.n	8000a60 <_malloc_r+0x1c>
 8000a5c:	42a9      	cmp	r1, r5
 8000a5e:	d905      	bls.n	8000a6c <_malloc_r+0x28>
 8000a60:	230c      	movs	r3, #12
 8000a62:	603b      	str	r3, [r7, #0]
 8000a64:	2600      	movs	r6, #0
 8000a66:	4630      	mov	r0, r6
 8000a68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000a6c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8000b40 <_malloc_r+0xfc>
 8000a70:	f000 faa6 	bl	8000fc0 <__malloc_lock>
 8000a74:	f8d8 3000 	ldr.w	r3, [r8]
 8000a78:	461c      	mov	r4, r3
 8000a7a:	bb5c      	cbnz	r4, 8000ad4 <_malloc_r+0x90>
 8000a7c:	4629      	mov	r1, r5
 8000a7e:	4638      	mov	r0, r7
 8000a80:	f7ff ffc0 	bl	8000a04 <sbrk_aligned>
 8000a84:	1c43      	adds	r3, r0, #1
 8000a86:	4604      	mov	r4, r0
 8000a88:	d155      	bne.n	8000b36 <_malloc_r+0xf2>
 8000a8a:	f8d8 4000 	ldr.w	r4, [r8]
 8000a8e:	4626      	mov	r6, r4
 8000a90:	2e00      	cmp	r6, #0
 8000a92:	d145      	bne.n	8000b20 <_malloc_r+0xdc>
 8000a94:	2c00      	cmp	r4, #0
 8000a96:	d048      	beq.n	8000b2a <_malloc_r+0xe6>
 8000a98:	6823      	ldr	r3, [r4, #0]
 8000a9a:	4631      	mov	r1, r6
 8000a9c:	4638      	mov	r0, r7
 8000a9e:	eb04 0903 	add.w	r9, r4, r3
 8000aa2:	f000 fc29 	bl	80012f8 <_sbrk_r>
 8000aa6:	4581      	cmp	r9, r0
 8000aa8:	d13f      	bne.n	8000b2a <_malloc_r+0xe6>
 8000aaa:	6821      	ldr	r1, [r4, #0]
 8000aac:	1a6d      	subs	r5, r5, r1
 8000aae:	4629      	mov	r1, r5
 8000ab0:	4638      	mov	r0, r7
 8000ab2:	f7ff ffa7 	bl	8000a04 <sbrk_aligned>
 8000ab6:	3001      	adds	r0, #1
 8000ab8:	d037      	beq.n	8000b2a <_malloc_r+0xe6>
 8000aba:	6823      	ldr	r3, [r4, #0]
 8000abc:	442b      	add	r3, r5
 8000abe:	6023      	str	r3, [r4, #0]
 8000ac0:	f8d8 3000 	ldr.w	r3, [r8]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d038      	beq.n	8000b3a <_malloc_r+0xf6>
 8000ac8:	685a      	ldr	r2, [r3, #4]
 8000aca:	42a2      	cmp	r2, r4
 8000acc:	d12b      	bne.n	8000b26 <_malloc_r+0xe2>
 8000ace:	2200      	movs	r2, #0
 8000ad0:	605a      	str	r2, [r3, #4]
 8000ad2:	e00f      	b.n	8000af4 <_malloc_r+0xb0>
 8000ad4:	6822      	ldr	r2, [r4, #0]
 8000ad6:	1b52      	subs	r2, r2, r5
 8000ad8:	d41f      	bmi.n	8000b1a <_malloc_r+0xd6>
 8000ada:	2a0b      	cmp	r2, #11
 8000adc:	d917      	bls.n	8000b0e <_malloc_r+0xca>
 8000ade:	1961      	adds	r1, r4, r5
 8000ae0:	42a3      	cmp	r3, r4
 8000ae2:	6025      	str	r5, [r4, #0]
 8000ae4:	bf18      	it	ne
 8000ae6:	6059      	strne	r1, [r3, #4]
 8000ae8:	6863      	ldr	r3, [r4, #4]
 8000aea:	bf08      	it	eq
 8000aec:	f8c8 1000 	streq.w	r1, [r8]
 8000af0:	5162      	str	r2, [r4, r5]
 8000af2:	604b      	str	r3, [r1, #4]
 8000af4:	4638      	mov	r0, r7
 8000af6:	f104 060b 	add.w	r6, r4, #11
 8000afa:	f000 fa67 	bl	8000fcc <__malloc_unlock>
 8000afe:	f026 0607 	bic.w	r6, r6, #7
 8000b02:	1d23      	adds	r3, r4, #4
 8000b04:	1af2      	subs	r2, r6, r3
 8000b06:	d0ae      	beq.n	8000a66 <_malloc_r+0x22>
 8000b08:	1b9b      	subs	r3, r3, r6
 8000b0a:	50a3      	str	r3, [r4, r2]
 8000b0c:	e7ab      	b.n	8000a66 <_malloc_r+0x22>
 8000b0e:	42a3      	cmp	r3, r4
 8000b10:	6862      	ldr	r2, [r4, #4]
 8000b12:	d1dd      	bne.n	8000ad0 <_malloc_r+0x8c>
 8000b14:	f8c8 2000 	str.w	r2, [r8]
 8000b18:	e7ec      	b.n	8000af4 <_malloc_r+0xb0>
 8000b1a:	4623      	mov	r3, r4
 8000b1c:	6864      	ldr	r4, [r4, #4]
 8000b1e:	e7ac      	b.n	8000a7a <_malloc_r+0x36>
 8000b20:	4634      	mov	r4, r6
 8000b22:	6876      	ldr	r6, [r6, #4]
 8000b24:	e7b4      	b.n	8000a90 <_malloc_r+0x4c>
 8000b26:	4613      	mov	r3, r2
 8000b28:	e7cc      	b.n	8000ac4 <_malloc_r+0x80>
 8000b2a:	230c      	movs	r3, #12
 8000b2c:	603b      	str	r3, [r7, #0]
 8000b2e:	4638      	mov	r0, r7
 8000b30:	f000 fa4c 	bl	8000fcc <__malloc_unlock>
 8000b34:	e797      	b.n	8000a66 <_malloc_r+0x22>
 8000b36:	6025      	str	r5, [r4, #0]
 8000b38:	e7dc      	b.n	8000af4 <_malloc_r+0xb0>
 8000b3a:	605b      	str	r3, [r3, #4]
 8000b3c:	deff      	udf	#255	; 0xff
 8000b3e:	bf00      	nop
 8000b40:	200001bc 	.word	0x200001bc

08000b44 <_printf_common>:
 8000b44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b48:	4616      	mov	r6, r2
 8000b4a:	4699      	mov	r9, r3
 8000b4c:	688a      	ldr	r2, [r1, #8]
 8000b4e:	690b      	ldr	r3, [r1, #16]
 8000b50:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000b54:	4293      	cmp	r3, r2
 8000b56:	bfb8      	it	lt
 8000b58:	4613      	movlt	r3, r2
 8000b5a:	6033      	str	r3, [r6, #0]
 8000b5c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000b60:	4607      	mov	r7, r0
 8000b62:	460c      	mov	r4, r1
 8000b64:	b10a      	cbz	r2, 8000b6a <_printf_common+0x26>
 8000b66:	3301      	adds	r3, #1
 8000b68:	6033      	str	r3, [r6, #0]
 8000b6a:	6823      	ldr	r3, [r4, #0]
 8000b6c:	0699      	lsls	r1, r3, #26
 8000b6e:	bf42      	ittt	mi
 8000b70:	6833      	ldrmi	r3, [r6, #0]
 8000b72:	3302      	addmi	r3, #2
 8000b74:	6033      	strmi	r3, [r6, #0]
 8000b76:	6825      	ldr	r5, [r4, #0]
 8000b78:	f015 0506 	ands.w	r5, r5, #6
 8000b7c:	d106      	bne.n	8000b8c <_printf_common+0x48>
 8000b7e:	f104 0a19 	add.w	sl, r4, #25
 8000b82:	68e3      	ldr	r3, [r4, #12]
 8000b84:	6832      	ldr	r2, [r6, #0]
 8000b86:	1a9b      	subs	r3, r3, r2
 8000b88:	42ab      	cmp	r3, r5
 8000b8a:	dc26      	bgt.n	8000bda <_printf_common+0x96>
 8000b8c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000b90:	1e13      	subs	r3, r2, #0
 8000b92:	6822      	ldr	r2, [r4, #0]
 8000b94:	bf18      	it	ne
 8000b96:	2301      	movne	r3, #1
 8000b98:	0692      	lsls	r2, r2, #26
 8000b9a:	d42b      	bmi.n	8000bf4 <_printf_common+0xb0>
 8000b9c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000ba0:	4649      	mov	r1, r9
 8000ba2:	4638      	mov	r0, r7
 8000ba4:	47c0      	blx	r8
 8000ba6:	3001      	adds	r0, #1
 8000ba8:	d01e      	beq.n	8000be8 <_printf_common+0xa4>
 8000baa:	6823      	ldr	r3, [r4, #0]
 8000bac:	6922      	ldr	r2, [r4, #16]
 8000bae:	f003 0306 	and.w	r3, r3, #6
 8000bb2:	2b04      	cmp	r3, #4
 8000bb4:	bf02      	ittt	eq
 8000bb6:	68e5      	ldreq	r5, [r4, #12]
 8000bb8:	6833      	ldreq	r3, [r6, #0]
 8000bba:	1aed      	subeq	r5, r5, r3
 8000bbc:	68a3      	ldr	r3, [r4, #8]
 8000bbe:	bf0c      	ite	eq
 8000bc0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000bc4:	2500      	movne	r5, #0
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	bfc4      	itt	gt
 8000bca:	1a9b      	subgt	r3, r3, r2
 8000bcc:	18ed      	addgt	r5, r5, r3
 8000bce:	2600      	movs	r6, #0
 8000bd0:	341a      	adds	r4, #26
 8000bd2:	42b5      	cmp	r5, r6
 8000bd4:	d11a      	bne.n	8000c0c <_printf_common+0xc8>
 8000bd6:	2000      	movs	r0, #0
 8000bd8:	e008      	b.n	8000bec <_printf_common+0xa8>
 8000bda:	2301      	movs	r3, #1
 8000bdc:	4652      	mov	r2, sl
 8000bde:	4649      	mov	r1, r9
 8000be0:	4638      	mov	r0, r7
 8000be2:	47c0      	blx	r8
 8000be4:	3001      	adds	r0, #1
 8000be6:	d103      	bne.n	8000bf0 <_printf_common+0xac>
 8000be8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bf0:	3501      	adds	r5, #1
 8000bf2:	e7c6      	b.n	8000b82 <_printf_common+0x3e>
 8000bf4:	18e1      	adds	r1, r4, r3
 8000bf6:	1c5a      	adds	r2, r3, #1
 8000bf8:	2030      	movs	r0, #48	; 0x30
 8000bfa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000bfe:	4422      	add	r2, r4
 8000c00:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000c04:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000c08:	3302      	adds	r3, #2
 8000c0a:	e7c7      	b.n	8000b9c <_printf_common+0x58>
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	4622      	mov	r2, r4
 8000c10:	4649      	mov	r1, r9
 8000c12:	4638      	mov	r0, r7
 8000c14:	47c0      	blx	r8
 8000c16:	3001      	adds	r0, #1
 8000c18:	d0e6      	beq.n	8000be8 <_printf_common+0xa4>
 8000c1a:	3601      	adds	r6, #1
 8000c1c:	e7d9      	b.n	8000bd2 <_printf_common+0x8e>
	...

08000c20 <_printf_i>:
 8000c20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000c24:	7e0f      	ldrb	r7, [r1, #24]
 8000c26:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8000c28:	2f78      	cmp	r7, #120	; 0x78
 8000c2a:	4691      	mov	r9, r2
 8000c2c:	4680      	mov	r8, r0
 8000c2e:	460c      	mov	r4, r1
 8000c30:	469a      	mov	sl, r3
 8000c32:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8000c36:	d807      	bhi.n	8000c48 <_printf_i+0x28>
 8000c38:	2f62      	cmp	r7, #98	; 0x62
 8000c3a:	d80a      	bhi.n	8000c52 <_printf_i+0x32>
 8000c3c:	2f00      	cmp	r7, #0
 8000c3e:	f000 80d4 	beq.w	8000dea <_printf_i+0x1ca>
 8000c42:	2f58      	cmp	r7, #88	; 0x58
 8000c44:	f000 80c0 	beq.w	8000dc8 <_printf_i+0x1a8>
 8000c48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000c4c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8000c50:	e03a      	b.n	8000cc8 <_printf_i+0xa8>
 8000c52:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8000c56:	2b15      	cmp	r3, #21
 8000c58:	d8f6      	bhi.n	8000c48 <_printf_i+0x28>
 8000c5a:	a101      	add	r1, pc, #4	; (adr r1, 8000c60 <_printf_i+0x40>)
 8000c5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000c60:	08000cb9 	.word	0x08000cb9
 8000c64:	08000ccd 	.word	0x08000ccd
 8000c68:	08000c49 	.word	0x08000c49
 8000c6c:	08000c49 	.word	0x08000c49
 8000c70:	08000c49 	.word	0x08000c49
 8000c74:	08000c49 	.word	0x08000c49
 8000c78:	08000ccd 	.word	0x08000ccd
 8000c7c:	08000c49 	.word	0x08000c49
 8000c80:	08000c49 	.word	0x08000c49
 8000c84:	08000c49 	.word	0x08000c49
 8000c88:	08000c49 	.word	0x08000c49
 8000c8c:	08000dd1 	.word	0x08000dd1
 8000c90:	08000cf9 	.word	0x08000cf9
 8000c94:	08000d8b 	.word	0x08000d8b
 8000c98:	08000c49 	.word	0x08000c49
 8000c9c:	08000c49 	.word	0x08000c49
 8000ca0:	08000df3 	.word	0x08000df3
 8000ca4:	08000c49 	.word	0x08000c49
 8000ca8:	08000cf9 	.word	0x08000cf9
 8000cac:	08000c49 	.word	0x08000c49
 8000cb0:	08000c49 	.word	0x08000c49
 8000cb4:	08000d93 	.word	0x08000d93
 8000cb8:	682b      	ldr	r3, [r5, #0]
 8000cba:	1d1a      	adds	r2, r3, #4
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	602a      	str	r2, [r5, #0]
 8000cc0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000cc4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8000cc8:	2301      	movs	r3, #1
 8000cca:	e09f      	b.n	8000e0c <_printf_i+0x1ec>
 8000ccc:	6820      	ldr	r0, [r4, #0]
 8000cce:	682b      	ldr	r3, [r5, #0]
 8000cd0:	0607      	lsls	r7, r0, #24
 8000cd2:	f103 0104 	add.w	r1, r3, #4
 8000cd6:	6029      	str	r1, [r5, #0]
 8000cd8:	d501      	bpl.n	8000cde <_printf_i+0xbe>
 8000cda:	681e      	ldr	r6, [r3, #0]
 8000cdc:	e003      	b.n	8000ce6 <_printf_i+0xc6>
 8000cde:	0646      	lsls	r6, r0, #25
 8000ce0:	d5fb      	bpl.n	8000cda <_printf_i+0xba>
 8000ce2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8000ce6:	2e00      	cmp	r6, #0
 8000ce8:	da03      	bge.n	8000cf2 <_printf_i+0xd2>
 8000cea:	232d      	movs	r3, #45	; 0x2d
 8000cec:	4276      	negs	r6, r6
 8000cee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000cf2:	485a      	ldr	r0, [pc, #360]	; (8000e5c <_printf_i+0x23c>)
 8000cf4:	230a      	movs	r3, #10
 8000cf6:	e012      	b.n	8000d1e <_printf_i+0xfe>
 8000cf8:	682b      	ldr	r3, [r5, #0]
 8000cfa:	6820      	ldr	r0, [r4, #0]
 8000cfc:	1d19      	adds	r1, r3, #4
 8000cfe:	6029      	str	r1, [r5, #0]
 8000d00:	0605      	lsls	r5, r0, #24
 8000d02:	d501      	bpl.n	8000d08 <_printf_i+0xe8>
 8000d04:	681e      	ldr	r6, [r3, #0]
 8000d06:	e002      	b.n	8000d0e <_printf_i+0xee>
 8000d08:	0641      	lsls	r1, r0, #25
 8000d0a:	d5fb      	bpl.n	8000d04 <_printf_i+0xe4>
 8000d0c:	881e      	ldrh	r6, [r3, #0]
 8000d0e:	4853      	ldr	r0, [pc, #332]	; (8000e5c <_printf_i+0x23c>)
 8000d10:	2f6f      	cmp	r7, #111	; 0x6f
 8000d12:	bf0c      	ite	eq
 8000d14:	2308      	moveq	r3, #8
 8000d16:	230a      	movne	r3, #10
 8000d18:	2100      	movs	r1, #0
 8000d1a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8000d1e:	6865      	ldr	r5, [r4, #4]
 8000d20:	60a5      	str	r5, [r4, #8]
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	bfa2      	ittt	ge
 8000d26:	6821      	ldrge	r1, [r4, #0]
 8000d28:	f021 0104 	bicge.w	r1, r1, #4
 8000d2c:	6021      	strge	r1, [r4, #0]
 8000d2e:	b90e      	cbnz	r6, 8000d34 <_printf_i+0x114>
 8000d30:	2d00      	cmp	r5, #0
 8000d32:	d04b      	beq.n	8000dcc <_printf_i+0x1ac>
 8000d34:	4615      	mov	r5, r2
 8000d36:	fbb6 f1f3 	udiv	r1, r6, r3
 8000d3a:	fb03 6711 	mls	r7, r3, r1, r6
 8000d3e:	5dc7      	ldrb	r7, [r0, r7]
 8000d40:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8000d44:	4637      	mov	r7, r6
 8000d46:	42bb      	cmp	r3, r7
 8000d48:	460e      	mov	r6, r1
 8000d4a:	d9f4      	bls.n	8000d36 <_printf_i+0x116>
 8000d4c:	2b08      	cmp	r3, #8
 8000d4e:	d10b      	bne.n	8000d68 <_printf_i+0x148>
 8000d50:	6823      	ldr	r3, [r4, #0]
 8000d52:	07de      	lsls	r6, r3, #31
 8000d54:	d508      	bpl.n	8000d68 <_printf_i+0x148>
 8000d56:	6923      	ldr	r3, [r4, #16]
 8000d58:	6861      	ldr	r1, [r4, #4]
 8000d5a:	4299      	cmp	r1, r3
 8000d5c:	bfde      	ittt	le
 8000d5e:	2330      	movle	r3, #48	; 0x30
 8000d60:	f805 3c01 	strble.w	r3, [r5, #-1]
 8000d64:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8000d68:	1b52      	subs	r2, r2, r5
 8000d6a:	6122      	str	r2, [r4, #16]
 8000d6c:	f8cd a000 	str.w	sl, [sp]
 8000d70:	464b      	mov	r3, r9
 8000d72:	aa03      	add	r2, sp, #12
 8000d74:	4621      	mov	r1, r4
 8000d76:	4640      	mov	r0, r8
 8000d78:	f7ff fee4 	bl	8000b44 <_printf_common>
 8000d7c:	3001      	adds	r0, #1
 8000d7e:	d14a      	bne.n	8000e16 <_printf_i+0x1f6>
 8000d80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d84:	b004      	add	sp, #16
 8000d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8a:	6823      	ldr	r3, [r4, #0]
 8000d8c:	f043 0320 	orr.w	r3, r3, #32
 8000d90:	6023      	str	r3, [r4, #0]
 8000d92:	4833      	ldr	r0, [pc, #204]	; (8000e60 <_printf_i+0x240>)
 8000d94:	2778      	movs	r7, #120	; 0x78
 8000d96:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8000d9a:	6823      	ldr	r3, [r4, #0]
 8000d9c:	6829      	ldr	r1, [r5, #0]
 8000d9e:	061f      	lsls	r7, r3, #24
 8000da0:	f851 6b04 	ldr.w	r6, [r1], #4
 8000da4:	d402      	bmi.n	8000dac <_printf_i+0x18c>
 8000da6:	065f      	lsls	r7, r3, #25
 8000da8:	bf48      	it	mi
 8000daa:	b2b6      	uxthmi	r6, r6
 8000dac:	07df      	lsls	r7, r3, #31
 8000dae:	bf48      	it	mi
 8000db0:	f043 0320 	orrmi.w	r3, r3, #32
 8000db4:	6029      	str	r1, [r5, #0]
 8000db6:	bf48      	it	mi
 8000db8:	6023      	strmi	r3, [r4, #0]
 8000dba:	b91e      	cbnz	r6, 8000dc4 <_printf_i+0x1a4>
 8000dbc:	6823      	ldr	r3, [r4, #0]
 8000dbe:	f023 0320 	bic.w	r3, r3, #32
 8000dc2:	6023      	str	r3, [r4, #0]
 8000dc4:	2310      	movs	r3, #16
 8000dc6:	e7a7      	b.n	8000d18 <_printf_i+0xf8>
 8000dc8:	4824      	ldr	r0, [pc, #144]	; (8000e5c <_printf_i+0x23c>)
 8000dca:	e7e4      	b.n	8000d96 <_printf_i+0x176>
 8000dcc:	4615      	mov	r5, r2
 8000dce:	e7bd      	b.n	8000d4c <_printf_i+0x12c>
 8000dd0:	682b      	ldr	r3, [r5, #0]
 8000dd2:	6826      	ldr	r6, [r4, #0]
 8000dd4:	6961      	ldr	r1, [r4, #20]
 8000dd6:	1d18      	adds	r0, r3, #4
 8000dd8:	6028      	str	r0, [r5, #0]
 8000dda:	0635      	lsls	r5, r6, #24
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	d501      	bpl.n	8000de4 <_printf_i+0x1c4>
 8000de0:	6019      	str	r1, [r3, #0]
 8000de2:	e002      	b.n	8000dea <_printf_i+0x1ca>
 8000de4:	0670      	lsls	r0, r6, #25
 8000de6:	d5fb      	bpl.n	8000de0 <_printf_i+0x1c0>
 8000de8:	8019      	strh	r1, [r3, #0]
 8000dea:	2300      	movs	r3, #0
 8000dec:	6123      	str	r3, [r4, #16]
 8000dee:	4615      	mov	r5, r2
 8000df0:	e7bc      	b.n	8000d6c <_printf_i+0x14c>
 8000df2:	682b      	ldr	r3, [r5, #0]
 8000df4:	1d1a      	adds	r2, r3, #4
 8000df6:	602a      	str	r2, [r5, #0]
 8000df8:	681d      	ldr	r5, [r3, #0]
 8000dfa:	6862      	ldr	r2, [r4, #4]
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	4628      	mov	r0, r5
 8000e00:	f7ff f9ee 	bl	80001e0 <memchr>
 8000e04:	b108      	cbz	r0, 8000e0a <_printf_i+0x1ea>
 8000e06:	1b40      	subs	r0, r0, r5
 8000e08:	6060      	str	r0, [r4, #4]
 8000e0a:	6863      	ldr	r3, [r4, #4]
 8000e0c:	6123      	str	r3, [r4, #16]
 8000e0e:	2300      	movs	r3, #0
 8000e10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000e14:	e7aa      	b.n	8000d6c <_printf_i+0x14c>
 8000e16:	6923      	ldr	r3, [r4, #16]
 8000e18:	462a      	mov	r2, r5
 8000e1a:	4649      	mov	r1, r9
 8000e1c:	4640      	mov	r0, r8
 8000e1e:	47d0      	blx	sl
 8000e20:	3001      	adds	r0, #1
 8000e22:	d0ad      	beq.n	8000d80 <_printf_i+0x160>
 8000e24:	6823      	ldr	r3, [r4, #0]
 8000e26:	079b      	lsls	r3, r3, #30
 8000e28:	d413      	bmi.n	8000e52 <_printf_i+0x232>
 8000e2a:	68e0      	ldr	r0, [r4, #12]
 8000e2c:	9b03      	ldr	r3, [sp, #12]
 8000e2e:	4298      	cmp	r0, r3
 8000e30:	bfb8      	it	lt
 8000e32:	4618      	movlt	r0, r3
 8000e34:	e7a6      	b.n	8000d84 <_printf_i+0x164>
 8000e36:	2301      	movs	r3, #1
 8000e38:	4632      	mov	r2, r6
 8000e3a:	4649      	mov	r1, r9
 8000e3c:	4640      	mov	r0, r8
 8000e3e:	47d0      	blx	sl
 8000e40:	3001      	adds	r0, #1
 8000e42:	d09d      	beq.n	8000d80 <_printf_i+0x160>
 8000e44:	3501      	adds	r5, #1
 8000e46:	68e3      	ldr	r3, [r4, #12]
 8000e48:	9903      	ldr	r1, [sp, #12]
 8000e4a:	1a5b      	subs	r3, r3, r1
 8000e4c:	42ab      	cmp	r3, r5
 8000e4e:	dcf2      	bgt.n	8000e36 <_printf_i+0x216>
 8000e50:	e7eb      	b.n	8000e2a <_printf_i+0x20a>
 8000e52:	2500      	movs	r5, #0
 8000e54:	f104 0619 	add.w	r6, r4, #25
 8000e58:	e7f5      	b.n	8000e46 <_printf_i+0x226>
 8000e5a:	bf00      	nop
 8000e5c:	08001425 	.word	0x08001425
 8000e60:	08001436 	.word	0x08001436

08000e64 <__sflush_r>:
 8000e64:	898a      	ldrh	r2, [r1, #12]
 8000e66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e6a:	4605      	mov	r5, r0
 8000e6c:	0710      	lsls	r0, r2, #28
 8000e6e:	460c      	mov	r4, r1
 8000e70:	d458      	bmi.n	8000f24 <__sflush_r+0xc0>
 8000e72:	684b      	ldr	r3, [r1, #4]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	dc05      	bgt.n	8000e84 <__sflush_r+0x20>
 8000e78:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	dc02      	bgt.n	8000e84 <__sflush_r+0x20>
 8000e7e:	2000      	movs	r0, #0
 8000e80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000e84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000e86:	2e00      	cmp	r6, #0
 8000e88:	d0f9      	beq.n	8000e7e <__sflush_r+0x1a>
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000e90:	682f      	ldr	r7, [r5, #0]
 8000e92:	6a21      	ldr	r1, [r4, #32]
 8000e94:	602b      	str	r3, [r5, #0]
 8000e96:	d032      	beq.n	8000efe <__sflush_r+0x9a>
 8000e98:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000e9a:	89a3      	ldrh	r3, [r4, #12]
 8000e9c:	075a      	lsls	r2, r3, #29
 8000e9e:	d505      	bpl.n	8000eac <__sflush_r+0x48>
 8000ea0:	6863      	ldr	r3, [r4, #4]
 8000ea2:	1ac0      	subs	r0, r0, r3
 8000ea4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000ea6:	b10b      	cbz	r3, 8000eac <__sflush_r+0x48>
 8000ea8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000eaa:	1ac0      	subs	r0, r0, r3
 8000eac:	2300      	movs	r3, #0
 8000eae:	4602      	mov	r2, r0
 8000eb0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000eb2:	6a21      	ldr	r1, [r4, #32]
 8000eb4:	4628      	mov	r0, r5
 8000eb6:	47b0      	blx	r6
 8000eb8:	1c43      	adds	r3, r0, #1
 8000eba:	89a3      	ldrh	r3, [r4, #12]
 8000ebc:	d106      	bne.n	8000ecc <__sflush_r+0x68>
 8000ebe:	6829      	ldr	r1, [r5, #0]
 8000ec0:	291d      	cmp	r1, #29
 8000ec2:	d82b      	bhi.n	8000f1c <__sflush_r+0xb8>
 8000ec4:	4a29      	ldr	r2, [pc, #164]	; (8000f6c <__sflush_r+0x108>)
 8000ec6:	410a      	asrs	r2, r1
 8000ec8:	07d6      	lsls	r6, r2, #31
 8000eca:	d427      	bmi.n	8000f1c <__sflush_r+0xb8>
 8000ecc:	2200      	movs	r2, #0
 8000ece:	6062      	str	r2, [r4, #4]
 8000ed0:	04d9      	lsls	r1, r3, #19
 8000ed2:	6922      	ldr	r2, [r4, #16]
 8000ed4:	6022      	str	r2, [r4, #0]
 8000ed6:	d504      	bpl.n	8000ee2 <__sflush_r+0x7e>
 8000ed8:	1c42      	adds	r2, r0, #1
 8000eda:	d101      	bne.n	8000ee0 <__sflush_r+0x7c>
 8000edc:	682b      	ldr	r3, [r5, #0]
 8000ede:	b903      	cbnz	r3, 8000ee2 <__sflush_r+0x7e>
 8000ee0:	6560      	str	r0, [r4, #84]	; 0x54
 8000ee2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000ee4:	602f      	str	r7, [r5, #0]
 8000ee6:	2900      	cmp	r1, #0
 8000ee8:	d0c9      	beq.n	8000e7e <__sflush_r+0x1a>
 8000eea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000eee:	4299      	cmp	r1, r3
 8000ef0:	d002      	beq.n	8000ef8 <__sflush_r+0x94>
 8000ef2:	4628      	mov	r0, r5
 8000ef4:	f000 fa22 	bl	800133c <_free_r>
 8000ef8:	2000      	movs	r0, #0
 8000efa:	6360      	str	r0, [r4, #52]	; 0x34
 8000efc:	e7c0      	b.n	8000e80 <__sflush_r+0x1c>
 8000efe:	2301      	movs	r3, #1
 8000f00:	4628      	mov	r0, r5
 8000f02:	47b0      	blx	r6
 8000f04:	1c41      	adds	r1, r0, #1
 8000f06:	d1c8      	bne.n	8000e9a <__sflush_r+0x36>
 8000f08:	682b      	ldr	r3, [r5, #0]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d0c5      	beq.n	8000e9a <__sflush_r+0x36>
 8000f0e:	2b1d      	cmp	r3, #29
 8000f10:	d001      	beq.n	8000f16 <__sflush_r+0xb2>
 8000f12:	2b16      	cmp	r3, #22
 8000f14:	d101      	bne.n	8000f1a <__sflush_r+0xb6>
 8000f16:	602f      	str	r7, [r5, #0]
 8000f18:	e7b1      	b.n	8000e7e <__sflush_r+0x1a>
 8000f1a:	89a3      	ldrh	r3, [r4, #12]
 8000f1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f20:	81a3      	strh	r3, [r4, #12]
 8000f22:	e7ad      	b.n	8000e80 <__sflush_r+0x1c>
 8000f24:	690f      	ldr	r7, [r1, #16]
 8000f26:	2f00      	cmp	r7, #0
 8000f28:	d0a9      	beq.n	8000e7e <__sflush_r+0x1a>
 8000f2a:	0793      	lsls	r3, r2, #30
 8000f2c:	680e      	ldr	r6, [r1, #0]
 8000f2e:	bf08      	it	eq
 8000f30:	694b      	ldreq	r3, [r1, #20]
 8000f32:	600f      	str	r7, [r1, #0]
 8000f34:	bf18      	it	ne
 8000f36:	2300      	movne	r3, #0
 8000f38:	eba6 0807 	sub.w	r8, r6, r7
 8000f3c:	608b      	str	r3, [r1, #8]
 8000f3e:	f1b8 0f00 	cmp.w	r8, #0
 8000f42:	dd9c      	ble.n	8000e7e <__sflush_r+0x1a>
 8000f44:	6a21      	ldr	r1, [r4, #32]
 8000f46:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000f48:	4643      	mov	r3, r8
 8000f4a:	463a      	mov	r2, r7
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	47b0      	blx	r6
 8000f50:	2800      	cmp	r0, #0
 8000f52:	dc06      	bgt.n	8000f62 <__sflush_r+0xfe>
 8000f54:	89a3      	ldrh	r3, [r4, #12]
 8000f56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f5a:	81a3      	strh	r3, [r4, #12]
 8000f5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f60:	e78e      	b.n	8000e80 <__sflush_r+0x1c>
 8000f62:	4407      	add	r7, r0
 8000f64:	eba8 0800 	sub.w	r8, r8, r0
 8000f68:	e7e9      	b.n	8000f3e <__sflush_r+0xda>
 8000f6a:	bf00      	nop
 8000f6c:	dfbffffe 	.word	0xdfbffffe

08000f70 <_fflush_r>:
 8000f70:	b538      	push	{r3, r4, r5, lr}
 8000f72:	690b      	ldr	r3, [r1, #16]
 8000f74:	4605      	mov	r5, r0
 8000f76:	460c      	mov	r4, r1
 8000f78:	b913      	cbnz	r3, 8000f80 <_fflush_r+0x10>
 8000f7a:	2500      	movs	r5, #0
 8000f7c:	4628      	mov	r0, r5
 8000f7e:	bd38      	pop	{r3, r4, r5, pc}
 8000f80:	b118      	cbz	r0, 8000f8a <_fflush_r+0x1a>
 8000f82:	6a03      	ldr	r3, [r0, #32]
 8000f84:	b90b      	cbnz	r3, 8000f8a <_fflush_r+0x1a>
 8000f86:	f7ff fb7d 	bl	8000684 <__sinit>
 8000f8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d0f3      	beq.n	8000f7a <_fflush_r+0xa>
 8000f92:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000f94:	07d0      	lsls	r0, r2, #31
 8000f96:	d404      	bmi.n	8000fa2 <_fflush_r+0x32>
 8000f98:	0599      	lsls	r1, r3, #22
 8000f9a:	d402      	bmi.n	8000fa2 <_fflush_r+0x32>
 8000f9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000f9e:	f7ff fbec 	bl	800077a <__retarget_lock_acquire_recursive>
 8000fa2:	4628      	mov	r0, r5
 8000fa4:	4621      	mov	r1, r4
 8000fa6:	f7ff ff5d 	bl	8000e64 <__sflush_r>
 8000faa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000fac:	07da      	lsls	r2, r3, #31
 8000fae:	4605      	mov	r5, r0
 8000fb0:	d4e4      	bmi.n	8000f7c <_fflush_r+0xc>
 8000fb2:	89a3      	ldrh	r3, [r4, #12]
 8000fb4:	059b      	lsls	r3, r3, #22
 8000fb6:	d4e1      	bmi.n	8000f7c <_fflush_r+0xc>
 8000fb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000fba:	f7ff fbdf 	bl	800077c <__retarget_lock_release_recursive>
 8000fbe:	e7dd      	b.n	8000f7c <_fflush_r+0xc>

08000fc0 <__malloc_lock>:
 8000fc0:	4801      	ldr	r0, [pc, #4]	; (8000fc8 <__malloc_lock+0x8>)
 8000fc2:	f7ff bbda 	b.w	800077a <__retarget_lock_acquire_recursive>
 8000fc6:	bf00      	nop
 8000fc8:	200001b8 	.word	0x200001b8

08000fcc <__malloc_unlock>:
 8000fcc:	4801      	ldr	r0, [pc, #4]	; (8000fd4 <__malloc_unlock+0x8>)
 8000fce:	f7ff bbd5 	b.w	800077c <__retarget_lock_release_recursive>
 8000fd2:	bf00      	nop
 8000fd4:	200001b8 	.word	0x200001b8

08000fd8 <__sread>:
 8000fd8:	b510      	push	{r4, lr}
 8000fda:	460c      	mov	r4, r1
 8000fdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000fe0:	f000 f978 	bl	80012d4 <_read_r>
 8000fe4:	2800      	cmp	r0, #0
 8000fe6:	bfab      	itete	ge
 8000fe8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000fea:	89a3      	ldrhlt	r3, [r4, #12]
 8000fec:	181b      	addge	r3, r3, r0
 8000fee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000ff2:	bfac      	ite	ge
 8000ff4:	6563      	strge	r3, [r4, #84]	; 0x54
 8000ff6:	81a3      	strhlt	r3, [r4, #12]
 8000ff8:	bd10      	pop	{r4, pc}

08000ffa <__swrite>:
 8000ffa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ffe:	461f      	mov	r7, r3
 8001000:	898b      	ldrh	r3, [r1, #12]
 8001002:	05db      	lsls	r3, r3, #23
 8001004:	4605      	mov	r5, r0
 8001006:	460c      	mov	r4, r1
 8001008:	4616      	mov	r6, r2
 800100a:	d505      	bpl.n	8001018 <__swrite+0x1e>
 800100c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001010:	2302      	movs	r3, #2
 8001012:	2200      	movs	r2, #0
 8001014:	f000 f94c 	bl	80012b0 <_lseek_r>
 8001018:	89a3      	ldrh	r3, [r4, #12]
 800101a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800101e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001022:	81a3      	strh	r3, [r4, #12]
 8001024:	4632      	mov	r2, r6
 8001026:	463b      	mov	r3, r7
 8001028:	4628      	mov	r0, r5
 800102a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800102e:	f000 b973 	b.w	8001318 <_write_r>

08001032 <__sseek>:
 8001032:	b510      	push	{r4, lr}
 8001034:	460c      	mov	r4, r1
 8001036:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800103a:	f000 f939 	bl	80012b0 <_lseek_r>
 800103e:	1c43      	adds	r3, r0, #1
 8001040:	89a3      	ldrh	r3, [r4, #12]
 8001042:	bf15      	itete	ne
 8001044:	6560      	strne	r0, [r4, #84]	; 0x54
 8001046:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800104a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800104e:	81a3      	strheq	r3, [r4, #12]
 8001050:	bf18      	it	ne
 8001052:	81a3      	strhne	r3, [r4, #12]
 8001054:	bd10      	pop	{r4, pc}

08001056 <__sclose>:
 8001056:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800105a:	f000 b8f7 	b.w	800124c <_close_r>

0800105e <__swbuf_r>:
 800105e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001060:	460e      	mov	r6, r1
 8001062:	4614      	mov	r4, r2
 8001064:	4605      	mov	r5, r0
 8001066:	b118      	cbz	r0, 8001070 <__swbuf_r+0x12>
 8001068:	6a03      	ldr	r3, [r0, #32]
 800106a:	b90b      	cbnz	r3, 8001070 <__swbuf_r+0x12>
 800106c:	f7ff fb0a 	bl	8000684 <__sinit>
 8001070:	69a3      	ldr	r3, [r4, #24]
 8001072:	60a3      	str	r3, [r4, #8]
 8001074:	89a3      	ldrh	r3, [r4, #12]
 8001076:	071a      	lsls	r2, r3, #28
 8001078:	d525      	bpl.n	80010c6 <__swbuf_r+0x68>
 800107a:	6923      	ldr	r3, [r4, #16]
 800107c:	b31b      	cbz	r3, 80010c6 <__swbuf_r+0x68>
 800107e:	6823      	ldr	r3, [r4, #0]
 8001080:	6922      	ldr	r2, [r4, #16]
 8001082:	1a98      	subs	r0, r3, r2
 8001084:	6963      	ldr	r3, [r4, #20]
 8001086:	b2f6      	uxtb	r6, r6
 8001088:	4283      	cmp	r3, r0
 800108a:	4637      	mov	r7, r6
 800108c:	dc04      	bgt.n	8001098 <__swbuf_r+0x3a>
 800108e:	4621      	mov	r1, r4
 8001090:	4628      	mov	r0, r5
 8001092:	f7ff ff6d 	bl	8000f70 <_fflush_r>
 8001096:	b9e0      	cbnz	r0, 80010d2 <__swbuf_r+0x74>
 8001098:	68a3      	ldr	r3, [r4, #8]
 800109a:	3b01      	subs	r3, #1
 800109c:	60a3      	str	r3, [r4, #8]
 800109e:	6823      	ldr	r3, [r4, #0]
 80010a0:	1c5a      	adds	r2, r3, #1
 80010a2:	6022      	str	r2, [r4, #0]
 80010a4:	701e      	strb	r6, [r3, #0]
 80010a6:	6962      	ldr	r2, [r4, #20]
 80010a8:	1c43      	adds	r3, r0, #1
 80010aa:	429a      	cmp	r2, r3
 80010ac:	d004      	beq.n	80010b8 <__swbuf_r+0x5a>
 80010ae:	89a3      	ldrh	r3, [r4, #12]
 80010b0:	07db      	lsls	r3, r3, #31
 80010b2:	d506      	bpl.n	80010c2 <__swbuf_r+0x64>
 80010b4:	2e0a      	cmp	r6, #10
 80010b6:	d104      	bne.n	80010c2 <__swbuf_r+0x64>
 80010b8:	4621      	mov	r1, r4
 80010ba:	4628      	mov	r0, r5
 80010bc:	f7ff ff58 	bl	8000f70 <_fflush_r>
 80010c0:	b938      	cbnz	r0, 80010d2 <__swbuf_r+0x74>
 80010c2:	4638      	mov	r0, r7
 80010c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80010c6:	4621      	mov	r1, r4
 80010c8:	4628      	mov	r0, r5
 80010ca:	f000 f805 	bl	80010d8 <__swsetup_r>
 80010ce:	2800      	cmp	r0, #0
 80010d0:	d0d5      	beq.n	800107e <__swbuf_r+0x20>
 80010d2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80010d6:	e7f4      	b.n	80010c2 <__swbuf_r+0x64>

080010d8 <__swsetup_r>:
 80010d8:	b538      	push	{r3, r4, r5, lr}
 80010da:	4b2a      	ldr	r3, [pc, #168]	; (8001184 <__swsetup_r+0xac>)
 80010dc:	4605      	mov	r5, r0
 80010de:	6818      	ldr	r0, [r3, #0]
 80010e0:	460c      	mov	r4, r1
 80010e2:	b118      	cbz	r0, 80010ec <__swsetup_r+0x14>
 80010e4:	6a03      	ldr	r3, [r0, #32]
 80010e6:	b90b      	cbnz	r3, 80010ec <__swsetup_r+0x14>
 80010e8:	f7ff facc 	bl	8000684 <__sinit>
 80010ec:	89a3      	ldrh	r3, [r4, #12]
 80010ee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80010f2:	0718      	lsls	r0, r3, #28
 80010f4:	d422      	bmi.n	800113c <__swsetup_r+0x64>
 80010f6:	06d9      	lsls	r1, r3, #27
 80010f8:	d407      	bmi.n	800110a <__swsetup_r+0x32>
 80010fa:	2309      	movs	r3, #9
 80010fc:	602b      	str	r3, [r5, #0]
 80010fe:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001102:	81a3      	strh	r3, [r4, #12]
 8001104:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001108:	e034      	b.n	8001174 <__swsetup_r+0x9c>
 800110a:	0758      	lsls	r0, r3, #29
 800110c:	d512      	bpl.n	8001134 <__swsetup_r+0x5c>
 800110e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001110:	b141      	cbz	r1, 8001124 <__swsetup_r+0x4c>
 8001112:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001116:	4299      	cmp	r1, r3
 8001118:	d002      	beq.n	8001120 <__swsetup_r+0x48>
 800111a:	4628      	mov	r0, r5
 800111c:	f000 f90e 	bl	800133c <_free_r>
 8001120:	2300      	movs	r3, #0
 8001122:	6363      	str	r3, [r4, #52]	; 0x34
 8001124:	89a3      	ldrh	r3, [r4, #12]
 8001126:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800112a:	81a3      	strh	r3, [r4, #12]
 800112c:	2300      	movs	r3, #0
 800112e:	6063      	str	r3, [r4, #4]
 8001130:	6923      	ldr	r3, [r4, #16]
 8001132:	6023      	str	r3, [r4, #0]
 8001134:	89a3      	ldrh	r3, [r4, #12]
 8001136:	f043 0308 	orr.w	r3, r3, #8
 800113a:	81a3      	strh	r3, [r4, #12]
 800113c:	6923      	ldr	r3, [r4, #16]
 800113e:	b94b      	cbnz	r3, 8001154 <__swsetup_r+0x7c>
 8001140:	89a3      	ldrh	r3, [r4, #12]
 8001142:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001146:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800114a:	d003      	beq.n	8001154 <__swsetup_r+0x7c>
 800114c:	4621      	mov	r1, r4
 800114e:	4628      	mov	r0, r5
 8001150:	f000 f840 	bl	80011d4 <__smakebuf_r>
 8001154:	89a0      	ldrh	r0, [r4, #12]
 8001156:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800115a:	f010 0301 	ands.w	r3, r0, #1
 800115e:	d00a      	beq.n	8001176 <__swsetup_r+0x9e>
 8001160:	2300      	movs	r3, #0
 8001162:	60a3      	str	r3, [r4, #8]
 8001164:	6963      	ldr	r3, [r4, #20]
 8001166:	425b      	negs	r3, r3
 8001168:	61a3      	str	r3, [r4, #24]
 800116a:	6923      	ldr	r3, [r4, #16]
 800116c:	b943      	cbnz	r3, 8001180 <__swsetup_r+0xa8>
 800116e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001172:	d1c4      	bne.n	80010fe <__swsetup_r+0x26>
 8001174:	bd38      	pop	{r3, r4, r5, pc}
 8001176:	0781      	lsls	r1, r0, #30
 8001178:	bf58      	it	pl
 800117a:	6963      	ldrpl	r3, [r4, #20]
 800117c:	60a3      	str	r3, [r4, #8]
 800117e:	e7f4      	b.n	800116a <__swsetup_r+0x92>
 8001180:	2000      	movs	r0, #0
 8001182:	e7f7      	b.n	8001174 <__swsetup_r+0x9c>
 8001184:	20000058 	.word	0x20000058

08001188 <__swhatbuf_r>:
 8001188:	b570      	push	{r4, r5, r6, lr}
 800118a:	460c      	mov	r4, r1
 800118c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001190:	2900      	cmp	r1, #0
 8001192:	b096      	sub	sp, #88	; 0x58
 8001194:	4615      	mov	r5, r2
 8001196:	461e      	mov	r6, r3
 8001198:	da0d      	bge.n	80011b6 <__swhatbuf_r+0x2e>
 800119a:	89a3      	ldrh	r3, [r4, #12]
 800119c:	f013 0f80 	tst.w	r3, #128	; 0x80
 80011a0:	f04f 0100 	mov.w	r1, #0
 80011a4:	bf0c      	ite	eq
 80011a6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80011aa:	2340      	movne	r3, #64	; 0x40
 80011ac:	2000      	movs	r0, #0
 80011ae:	6031      	str	r1, [r6, #0]
 80011b0:	602b      	str	r3, [r5, #0]
 80011b2:	b016      	add	sp, #88	; 0x58
 80011b4:	bd70      	pop	{r4, r5, r6, pc}
 80011b6:	466a      	mov	r2, sp
 80011b8:	f000 f858 	bl	800126c <_fstat_r>
 80011bc:	2800      	cmp	r0, #0
 80011be:	dbec      	blt.n	800119a <__swhatbuf_r+0x12>
 80011c0:	9901      	ldr	r1, [sp, #4]
 80011c2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80011c6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80011ca:	4259      	negs	r1, r3
 80011cc:	4159      	adcs	r1, r3
 80011ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011d2:	e7eb      	b.n	80011ac <__swhatbuf_r+0x24>

080011d4 <__smakebuf_r>:
 80011d4:	898b      	ldrh	r3, [r1, #12]
 80011d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80011d8:	079d      	lsls	r5, r3, #30
 80011da:	4606      	mov	r6, r0
 80011dc:	460c      	mov	r4, r1
 80011de:	d507      	bpl.n	80011f0 <__smakebuf_r+0x1c>
 80011e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80011e4:	6023      	str	r3, [r4, #0]
 80011e6:	6123      	str	r3, [r4, #16]
 80011e8:	2301      	movs	r3, #1
 80011ea:	6163      	str	r3, [r4, #20]
 80011ec:	b002      	add	sp, #8
 80011ee:	bd70      	pop	{r4, r5, r6, pc}
 80011f0:	ab01      	add	r3, sp, #4
 80011f2:	466a      	mov	r2, sp
 80011f4:	f7ff ffc8 	bl	8001188 <__swhatbuf_r>
 80011f8:	9900      	ldr	r1, [sp, #0]
 80011fa:	4605      	mov	r5, r0
 80011fc:	4630      	mov	r0, r6
 80011fe:	f7ff fc21 	bl	8000a44 <_malloc_r>
 8001202:	b948      	cbnz	r0, 8001218 <__smakebuf_r+0x44>
 8001204:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001208:	059a      	lsls	r2, r3, #22
 800120a:	d4ef      	bmi.n	80011ec <__smakebuf_r+0x18>
 800120c:	f023 0303 	bic.w	r3, r3, #3
 8001210:	f043 0302 	orr.w	r3, r3, #2
 8001214:	81a3      	strh	r3, [r4, #12]
 8001216:	e7e3      	b.n	80011e0 <__smakebuf_r+0xc>
 8001218:	89a3      	ldrh	r3, [r4, #12]
 800121a:	6020      	str	r0, [r4, #0]
 800121c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001220:	81a3      	strh	r3, [r4, #12]
 8001222:	9b00      	ldr	r3, [sp, #0]
 8001224:	6163      	str	r3, [r4, #20]
 8001226:	9b01      	ldr	r3, [sp, #4]
 8001228:	6120      	str	r0, [r4, #16]
 800122a:	b15b      	cbz	r3, 8001244 <__smakebuf_r+0x70>
 800122c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001230:	4630      	mov	r0, r6
 8001232:	f000 f82d 	bl	8001290 <_isatty_r>
 8001236:	b128      	cbz	r0, 8001244 <__smakebuf_r+0x70>
 8001238:	89a3      	ldrh	r3, [r4, #12]
 800123a:	f023 0303 	bic.w	r3, r3, #3
 800123e:	f043 0301 	orr.w	r3, r3, #1
 8001242:	81a3      	strh	r3, [r4, #12]
 8001244:	89a3      	ldrh	r3, [r4, #12]
 8001246:	431d      	orrs	r5, r3
 8001248:	81a5      	strh	r5, [r4, #12]
 800124a:	e7cf      	b.n	80011ec <__smakebuf_r+0x18>

0800124c <_close_r>:
 800124c:	b538      	push	{r3, r4, r5, lr}
 800124e:	4d06      	ldr	r5, [pc, #24]	; (8001268 <_close_r+0x1c>)
 8001250:	2300      	movs	r3, #0
 8001252:	4604      	mov	r4, r0
 8001254:	4608      	mov	r0, r1
 8001256:	602b      	str	r3, [r5, #0]
 8001258:	f7ff f8f4 	bl	8000444 <_close>
 800125c:	1c43      	adds	r3, r0, #1
 800125e:	d102      	bne.n	8001266 <_close_r+0x1a>
 8001260:	682b      	ldr	r3, [r5, #0]
 8001262:	b103      	cbz	r3, 8001266 <_close_r+0x1a>
 8001264:	6023      	str	r3, [r4, #0]
 8001266:	bd38      	pop	{r3, r4, r5, pc}
 8001268:	200001c4 	.word	0x200001c4

0800126c <_fstat_r>:
 800126c:	b538      	push	{r3, r4, r5, lr}
 800126e:	4d07      	ldr	r5, [pc, #28]	; (800128c <_fstat_r+0x20>)
 8001270:	2300      	movs	r3, #0
 8001272:	4604      	mov	r4, r0
 8001274:	4608      	mov	r0, r1
 8001276:	4611      	mov	r1, r2
 8001278:	602b      	str	r3, [r5, #0]
 800127a:	f7ff f8ef 	bl	800045c <_fstat>
 800127e:	1c43      	adds	r3, r0, #1
 8001280:	d102      	bne.n	8001288 <_fstat_r+0x1c>
 8001282:	682b      	ldr	r3, [r5, #0]
 8001284:	b103      	cbz	r3, 8001288 <_fstat_r+0x1c>
 8001286:	6023      	str	r3, [r4, #0]
 8001288:	bd38      	pop	{r3, r4, r5, pc}
 800128a:	bf00      	nop
 800128c:	200001c4 	.word	0x200001c4

08001290 <_isatty_r>:
 8001290:	b538      	push	{r3, r4, r5, lr}
 8001292:	4d06      	ldr	r5, [pc, #24]	; (80012ac <_isatty_r+0x1c>)
 8001294:	2300      	movs	r3, #0
 8001296:	4604      	mov	r4, r0
 8001298:	4608      	mov	r0, r1
 800129a:	602b      	str	r3, [r5, #0]
 800129c:	f7ff f8ee 	bl	800047c <_isatty>
 80012a0:	1c43      	adds	r3, r0, #1
 80012a2:	d102      	bne.n	80012aa <_isatty_r+0x1a>
 80012a4:	682b      	ldr	r3, [r5, #0]
 80012a6:	b103      	cbz	r3, 80012aa <_isatty_r+0x1a>
 80012a8:	6023      	str	r3, [r4, #0]
 80012aa:	bd38      	pop	{r3, r4, r5, pc}
 80012ac:	200001c4 	.word	0x200001c4

080012b0 <_lseek_r>:
 80012b0:	b538      	push	{r3, r4, r5, lr}
 80012b2:	4d07      	ldr	r5, [pc, #28]	; (80012d0 <_lseek_r+0x20>)
 80012b4:	4604      	mov	r4, r0
 80012b6:	4608      	mov	r0, r1
 80012b8:	4611      	mov	r1, r2
 80012ba:	2200      	movs	r2, #0
 80012bc:	602a      	str	r2, [r5, #0]
 80012be:	461a      	mov	r2, r3
 80012c0:	f7ff f8e7 	bl	8000492 <_lseek>
 80012c4:	1c43      	adds	r3, r0, #1
 80012c6:	d102      	bne.n	80012ce <_lseek_r+0x1e>
 80012c8:	682b      	ldr	r3, [r5, #0]
 80012ca:	b103      	cbz	r3, 80012ce <_lseek_r+0x1e>
 80012cc:	6023      	str	r3, [r4, #0]
 80012ce:	bd38      	pop	{r3, r4, r5, pc}
 80012d0:	200001c4 	.word	0x200001c4

080012d4 <_read_r>:
 80012d4:	b538      	push	{r3, r4, r5, lr}
 80012d6:	4d07      	ldr	r5, [pc, #28]	; (80012f4 <_read_r+0x20>)
 80012d8:	4604      	mov	r4, r0
 80012da:	4608      	mov	r0, r1
 80012dc:	4611      	mov	r1, r2
 80012de:	2200      	movs	r2, #0
 80012e0:	602a      	str	r2, [r5, #0]
 80012e2:	461a      	mov	r2, r3
 80012e4:	f7ff f875 	bl	80003d2 <_read>
 80012e8:	1c43      	adds	r3, r0, #1
 80012ea:	d102      	bne.n	80012f2 <_read_r+0x1e>
 80012ec:	682b      	ldr	r3, [r5, #0]
 80012ee:	b103      	cbz	r3, 80012f2 <_read_r+0x1e>
 80012f0:	6023      	str	r3, [r4, #0]
 80012f2:	bd38      	pop	{r3, r4, r5, pc}
 80012f4:	200001c4 	.word	0x200001c4

080012f8 <_sbrk_r>:
 80012f8:	b538      	push	{r3, r4, r5, lr}
 80012fa:	4d06      	ldr	r5, [pc, #24]	; (8001314 <_sbrk_r+0x1c>)
 80012fc:	2300      	movs	r3, #0
 80012fe:	4604      	mov	r4, r0
 8001300:	4608      	mov	r0, r1
 8001302:	602b      	str	r3, [r5, #0]
 8001304:	f7ff f8d2 	bl	80004ac <_sbrk>
 8001308:	1c43      	adds	r3, r0, #1
 800130a:	d102      	bne.n	8001312 <_sbrk_r+0x1a>
 800130c:	682b      	ldr	r3, [r5, #0]
 800130e:	b103      	cbz	r3, 8001312 <_sbrk_r+0x1a>
 8001310:	6023      	str	r3, [r4, #0]
 8001312:	bd38      	pop	{r3, r4, r5, pc}
 8001314:	200001c4 	.word	0x200001c4

08001318 <_write_r>:
 8001318:	b538      	push	{r3, r4, r5, lr}
 800131a:	4d07      	ldr	r5, [pc, #28]	; (8001338 <_write_r+0x20>)
 800131c:	4604      	mov	r4, r0
 800131e:	4608      	mov	r0, r1
 8001320:	4611      	mov	r1, r2
 8001322:	2200      	movs	r2, #0
 8001324:	602a      	str	r2, [r5, #0]
 8001326:	461a      	mov	r2, r3
 8001328:	f7ff f870 	bl	800040c <_write>
 800132c:	1c43      	adds	r3, r0, #1
 800132e:	d102      	bne.n	8001336 <_write_r+0x1e>
 8001330:	682b      	ldr	r3, [r5, #0]
 8001332:	b103      	cbz	r3, 8001336 <_write_r+0x1e>
 8001334:	6023      	str	r3, [r4, #0]
 8001336:	bd38      	pop	{r3, r4, r5, pc}
 8001338:	200001c4 	.word	0x200001c4

0800133c <_free_r>:
 800133c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800133e:	2900      	cmp	r1, #0
 8001340:	d044      	beq.n	80013cc <_free_r+0x90>
 8001342:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001346:	9001      	str	r0, [sp, #4]
 8001348:	2b00      	cmp	r3, #0
 800134a:	f1a1 0404 	sub.w	r4, r1, #4
 800134e:	bfb8      	it	lt
 8001350:	18e4      	addlt	r4, r4, r3
 8001352:	f7ff fe35 	bl	8000fc0 <__malloc_lock>
 8001356:	4a1e      	ldr	r2, [pc, #120]	; (80013d0 <_free_r+0x94>)
 8001358:	9801      	ldr	r0, [sp, #4]
 800135a:	6813      	ldr	r3, [r2, #0]
 800135c:	b933      	cbnz	r3, 800136c <_free_r+0x30>
 800135e:	6063      	str	r3, [r4, #4]
 8001360:	6014      	str	r4, [r2, #0]
 8001362:	b003      	add	sp, #12
 8001364:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001368:	f7ff be30 	b.w	8000fcc <__malloc_unlock>
 800136c:	42a3      	cmp	r3, r4
 800136e:	d908      	bls.n	8001382 <_free_r+0x46>
 8001370:	6825      	ldr	r5, [r4, #0]
 8001372:	1961      	adds	r1, r4, r5
 8001374:	428b      	cmp	r3, r1
 8001376:	bf01      	itttt	eq
 8001378:	6819      	ldreq	r1, [r3, #0]
 800137a:	685b      	ldreq	r3, [r3, #4]
 800137c:	1949      	addeq	r1, r1, r5
 800137e:	6021      	streq	r1, [r4, #0]
 8001380:	e7ed      	b.n	800135e <_free_r+0x22>
 8001382:	461a      	mov	r2, r3
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	b10b      	cbz	r3, 800138c <_free_r+0x50>
 8001388:	42a3      	cmp	r3, r4
 800138a:	d9fa      	bls.n	8001382 <_free_r+0x46>
 800138c:	6811      	ldr	r1, [r2, #0]
 800138e:	1855      	adds	r5, r2, r1
 8001390:	42a5      	cmp	r5, r4
 8001392:	d10b      	bne.n	80013ac <_free_r+0x70>
 8001394:	6824      	ldr	r4, [r4, #0]
 8001396:	4421      	add	r1, r4
 8001398:	1854      	adds	r4, r2, r1
 800139a:	42a3      	cmp	r3, r4
 800139c:	6011      	str	r1, [r2, #0]
 800139e:	d1e0      	bne.n	8001362 <_free_r+0x26>
 80013a0:	681c      	ldr	r4, [r3, #0]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	6053      	str	r3, [r2, #4]
 80013a6:	440c      	add	r4, r1
 80013a8:	6014      	str	r4, [r2, #0]
 80013aa:	e7da      	b.n	8001362 <_free_r+0x26>
 80013ac:	d902      	bls.n	80013b4 <_free_r+0x78>
 80013ae:	230c      	movs	r3, #12
 80013b0:	6003      	str	r3, [r0, #0]
 80013b2:	e7d6      	b.n	8001362 <_free_r+0x26>
 80013b4:	6825      	ldr	r5, [r4, #0]
 80013b6:	1961      	adds	r1, r4, r5
 80013b8:	428b      	cmp	r3, r1
 80013ba:	bf04      	itt	eq
 80013bc:	6819      	ldreq	r1, [r3, #0]
 80013be:	685b      	ldreq	r3, [r3, #4]
 80013c0:	6063      	str	r3, [r4, #4]
 80013c2:	bf04      	itt	eq
 80013c4:	1949      	addeq	r1, r1, r5
 80013c6:	6021      	streq	r1, [r4, #0]
 80013c8:	6054      	str	r4, [r2, #4]
 80013ca:	e7ca      	b.n	8001362 <_free_r+0x26>
 80013cc:	b003      	add	sp, #12
 80013ce:	bd30      	pop	{r4, r5, pc}
 80013d0:	200001bc 	.word	0x200001bc

080013d4 <_init>:
 80013d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013d6:	bf00      	nop
 80013d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013da:	bc08      	pop	{r3}
 80013dc:	469e      	mov	lr, r3
 80013de:	4770      	bx	lr

080013e0 <_fini>:
 80013e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013e2:	bf00      	nop
 80013e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013e6:	bc08      	pop	{r3}
 80013e8:	469e      	mov	lr, r3
 80013ea:	4770      	bx	lr
