#include "stm32f3xx.h"

#define GPIOAEN					(1U<<17)
#define GPIOEEN					(1U<<21)

#define USART2EN				(1U<<17)

#define SYS_FREQ				16000000 //16 MGHz, 16 million cycles per second
#define APB1_CLK				SYS_FREQ
#define USART2_BAUD_RATE		115200
#define CR1_TE					(1U<<3)
#define CR1_UE					(1U<<0)

static void uart_set_baudrate(USART_TypeDef *USART, uint32_t PeriphClk, uint32_t BaudRate);
static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate);


/*NOTE: LEFT TO USE AFTER GETTING THE USB TO SERIAL CONVERTER. */
/* Our USART2 is connected to APB1 bus, hence enable it */
/* USART2 is within bit 17 of APB1_ENR Register */
/* PA2 and PA3 are Tx/Rx port pins under column AF7 (Alternate Function 7) */
/* So enable PA2 and PA3 and configure to be Alternate Function mode*/
int main(void) {




}

void uart2_tx_init() {
						/**Configure uart gpio pin**/
	//Enable clk access to GPIOA connected to AHB2 Bus (General AHB within Code)
	RCC->AHBENR |= GPIOAEN;

	//Set PA2 MODE to alt func mode
	GPIOA->MODER &= ~(1U<<4);
	GPIOA->MODER |= (1U<<5);

	//Set PA2 alt func type to UART_TX (AF7)
	//access the alternate function low register bits 8-11 for AFRL2[3:0]
	//and set that part of the register to AF7 (0111)
//	GPIOA->AFR[0] |= AF7_USART;
	GPIOA->AFR[0] |= (1U<<8);
	GPIOA->AFR[0] |= (1U<<9);
	GPIOA->AFR[0] |= (1U<<10);
	GPIOA->AFR[0] &= ~(1U<<11);



						/**Configure USART Module**/
	//Enable Clock access to UART2
	RCC->APB1ENR |= USART2EN;
	//Configure UART Baud Rate
	uart_set_baudrate(USART2, APB1_CLK, USART2_BAUD_RATE);

	//Configure the transfer direction
	//Within CR1 (Control Register 1: Bit3 - TE:Transmitter enable
	USART2->CR1 = CR1_TE;

	//Enable the UART Module once done
	USART2->CR1 |= CR1_UE;
}

static void uart_set_baudrate(USART_TypeDef *USART, uint32_t PeriphClk, uint32_t BaudRate) {
	USART->BRR = compute_uart_bd(PeriphClk, BaudRate);


}

static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate) {

	return ((PeriphClk + (BaudRate/2U)) / BaudRate);
}



































