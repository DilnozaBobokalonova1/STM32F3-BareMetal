//where is LED connected?
//Port: Port E
//Pin: 9, 8, 10, 15, 11, 14
// User LD3: red LED is a user LED connected to the I/O PE9 of the STM32F303VCT6.
// User LD4: blue LED is a user LED connected to the I/O PE8 of the STM32F303VCT6.
// User LD5: orange LED is a user LED connected to the I/O PE10 of the STM32F303VCT6.
// User LD6: green LED is a user LED connected to the I/O PE15 of the STM32F303VCT6.
// User LD7: green LED is a user LED connected to the I/O PE11 of the STM32F303VCT6.
// User LD8: orange LED is a user LED connected to the I/O PE14 of the STM32F303VCT6.
// AHB2 starts at address 0x4800 0000
// GPIOE is at boundary addrs 0x4800 1000 - 0x4800 13FF
#define PERIPH_BASE			 	(0x40000000UL)
#define AHB2_PERIPH_OFFSET		(0x08000000UL)
#define AHB2_PERIPH_BASE		(PERIPH_BASE + AHB2_PERIPH_OFFSET)

//0x4800 1000 - 0x4800 13FF
#define GPIOE_OFFSET			(0x1000UL)
#define GPIOE_BASE				(AHB2_PERIPH_BASE + GPIOE_OFFSET)

//RCC is connected to AHB1 bus so we need to account for it by defining
//extra address constants here
#define AHB1_PERIPH_OFFSET		(0x00020000UL)
#define AHB1_PERIPH_BASE		(PERIPH_BASE + AHB1_PERIPH_OFFSET)
#define RCC_OFFSET				(0x1000UL)
#define RCC_BASE				(AHB1_PERIPH_BASE + RCC_OFFSET)

#define AHB1EN_R_OFFSET			(0x14UL)
#define RCC_AHB1EN_R			(* (volatile unsigned int *) (RCC_BASE + AHB1EN_R_OFFSET))

//32 bits long mode register
#define MODE_R_OFFSET			(0x00UL)
#define GPIOE_MODE_R			(* (volatile unsigned int *) (GPIOE_BASE + MODE_R_OFFSET))

//to enable pin E, we have to set its position to 1 (its at Bit 21)
#define GPIOEEN					(1U<<21) //	0b 0000 0000 0001 0000 0000 0000 0000 0000

#define OD_R_OFFSET				(0x14UL)
#define GPIOE_OD_R				(* (volatile unsigned int *) (GPIOE_BASE + OD_R_OFFSET))

#define PIN15					(1U<<15)
#define PIN10					(1U<<10)
#define LED_PIN					PIN15
//turn LED5 to orange color
#define LED_5_PIN					PIN10

#define __IO volatile

typedef struct {
	__IO uint32_t MODER;		/*!< GPIO port mode register,					Address offset: 0x00		*/
	__IO uint32_t OTYPER;		/*!< GPIO port output type register,			Address offset: 0x04		*/
	__IO uint32_t OSPEEDR;		/*!< GPIO port output speed register,			Address offset: 0x08		*/
	__IO uint32_t PUPDR;		/*!< GPIO port pull-up/pull-down register,		Address offset: 0x0C		*/
	__IO uint32_t IDR;			/*!< GPIO port input data register,				Address offset: 0x10		*/
	__IO uint32_t ODR;			/*!< GPIO port output data register,			Address offset: 0x14		*/
	__IO uint32_t BSRR;			/*!< GPIO port bit set/reset register,			Address offset: 0x18		*/
	__IO uint32_t LCKR;			/*!< GPIO port configuration lock register,		Address offset: 0x1C		*/
	__IO uint32_t AFR[2];		/*!< GPIO alternate function register,			Address offset: 0x20-0x24	*/


} GPIO_TypeDef;




int main(void) {
	// 1. Enable clock access to GPIOE
	RCC_AHB1EN_R |= GPIOEEN;

	// 2. Set PE15 as output pin
	GPIOE_MODE_R |= (1U<<30);  //Set bit 30 to 1
	GPIOE_MODE_R &= ~(1U<<31); //Set bit 31 to 0

//	// 2.2 Set PE10 as output pin
	GPIOE_MODE_R |= (1U<<20);  //Set bit 20 to 1
	GPIOE_MODE_R &= ~(1U<<21); //Set bit 21 to 0

	while(1) {
		// 3. Set PE15 high
//		GPIOE_OD_R |= LED_PIN;

		// 4. toggle PA15
		GPIOE_OD_R ^= LED_PIN;
		GPIOE_OD_R ^= LED_5_PIN;
		for (int i = 0; i < 1000000; i++) {

		}
	}
}
















