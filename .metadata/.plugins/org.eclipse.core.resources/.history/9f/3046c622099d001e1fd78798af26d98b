/*
 * uart.c
 *
 *  Created on: Dec 17, 2023
 *      Author: dilnozabobokalonova
 */

#include <uart.h>
#include <stdint.h>
#include "stm32f3xx.h"

#define GPIOAEN					(1U<<17)
#define GPIOEEN					(1U<<21)

#define USART2EN				(1U<<17)

#define SYS_FREQ				16000000 //16 MGHz, 16 million cycles per second
#define APB1_CLK				SYS_FREQ
#define USART2_BAUD_RATE		115200
#define CR1_TE					(1U<<3)
#define CR1_UE					(1U<<0)
#define TX_E					(1U<<7)

static void uart_set_baudrate(USART_TypeDef *USART, uint32_t PeriphClk, uint32_t BaudRate);
static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate);

void uart2_write(int ch);

int __io_putchar(int ch);

int __io_putchar(int ch) {
	uart2_write(ch);
	return ch;
}

void uart2_rx_tx_init(void) {
						/**Configure uart gpio pin**/
	//Enable clk access to GPIOA connected to AHB2 Bus (General AHB within Code)
	RCC->AHBENR |= GPIOAEN;

	//Set PA2 MODE to alt func mode 10
	GPIOA->MODER &= ~(1U<<4);
	GPIOA->MODER |= (1U<<5);
	//Set PA3 Mode to Alt
	GPIOA->MODER &= ~(1<<6);
	GPIOA->MODER |= (1U<<7);

	//Set PA2 alt func type to UART_TX (AF7)
	//access the alternate function low register bits 8-11 for AFRL2[3:0]
	//and set that part of the register to AF7 (0111)
	GPIOA->AFR[0] |= (1U<<8);
	GPIOA->AFR[0] |= (1U<<9);
	GPIOA->AFR[0] |= (1U<<10);
	GPIOA->AFR[0] &= ~(1U<<11);

						/**Configure USART Module**/
	//Enable Clock access to UART2
	RCC->APB1ENR |= USART2EN;
	//Configure UART Baud Rate
	uart_set_baudrate(USART2, APB1_CLK, USART2_BAUD_RATE);

	//Configure the transfer direction
	//within CR1 (Control Register 1: Bit3 - TE:Transmitter enable
	USART2->CR1 = CR1_TE;

	//Enable the UART Module once done
	//within CR1, UART is enabled with UE bit 0 set to 1
	USART2->CR1 |= CR1_UE;

//	USART2->ISR &= ~(1U<<8);
}
void uart2_tx_init(void) {
						/**Configure uart gpio pin**/
	//Enable clk access to GPIOA connected to AHB2 Bus (General AHB within Code)
	RCC->AHBENR |= GPIOAEN;

	//Set PA2 MODE to alt func mode 10
	GPIOA->MODER &= ~(1U<<4);
	GPIOA->MODER |= (1U<<5);

	//Set PA2 alt func type to UART_TX (AF7)
	//access the alternate function low register bits 8-11 for AFRL2[3:0]
	//and set that part of the register to AF7 (0111)
	GPIOA->AFR[0] |= (1U<<8);
	GPIOA->AFR[0] |= (1U<<9);
	GPIOA->AFR[0] |= (1U<<10);
	GPIOA->AFR[0] &= ~(1U<<11);

						/**Configure USART Module**/
	//Enable Clock access to UART2
	RCC->APB1ENR |= USART2EN;
	//Configure UART Baud Rate
	uart_set_baudrate(USART2, APB1_CLK, USART2_BAUD_RATE);

	//Configure the transfer direction
	//within CR1 (Control Register 1: Bit3 - TE:Transmitter enable
	USART2->CR1 = CR1_TE;

	//Enable the UART Module once done
	//within CR1, UART is enabled with UE bit 0 set to 1
	USART2->CR1 |= CR1_UE;

//	USART2->ISR &= ~(1U<<8);
}

void uart2_write(int ch) {
	/*Make sure the transmit data register is emoty*/
	//Check if Bit 7 TXE: Transmit data register empty within USART_ISR (Interrupt & Status Register)
	//if TX_E within USART_ISR is set to 1, Transmit Data Register is not empty
	while (!(USART2->ISR & TX_E)) {
		/**
		 * An interrupt is generated if the TXEIE bit =1 in the USART_CR1 register.
		 * TXEIE: interrupt enable
			This bit is set and cleared by software.
			0: Interrupt is inhibited
			1: A USART interrupt is generated whenever TXE=1 in the USART_ISR register
		 */
	}

	/*Write to transmit data register*/
	/*For F3 disco board, the USART is split into two separate Data Registers: TDR and RDR*/
	//the ch & 0xFF allows for conversion of ch to 8-bit value due to AND with 11111111
	//for example, 16 bit AND would correspond with usage of 0xFFFF
	USART2->TDR = ch & 0xFFFF;

}

static void uart_set_baudrate(USART_TypeDef *USART, uint32_t PeriphClk, uint32_t BaudRate) {
	USART->BRR = compute_uart_bd(PeriphClk, BaudRate);


}

static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate) {

	return ((PeriphClk + (BaudRate/2U)) / BaudRate);
}


