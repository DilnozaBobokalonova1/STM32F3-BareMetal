
5_uart_tx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000023c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003d0  080003d8  000103d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003d0  080003d0  000103d8  2**0
                  CONTENTS
  4 .ARM          00000000  080003d0  080003d0  000103d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003d0  080003d8  000103d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003d0  080003d0  000103d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003d4  080003d4  000103d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000103d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000103d8  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000103d8  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00010408  2**0
                  CONTENTS, READONLY
 14 .debug_info   000003b0  00000000  00000000  0001044b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000015b  00000000  00000000  000107fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000068  00000000  00000000  00010958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000045  00000000  00000000  000109c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00014d34  00000000  00000000  00010a05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00000614  00000000  00000000  00025739  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0007256e  00000000  00000000  00025d4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000000e8  00000000  00000000  000982bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000076  00000000  00000000  000983a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080003b8 	.word	0x080003b8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	080003b8 	.word	0x080003b8

080001d4 <main>:
/*NOTE: LEFT TO USE AFTER GETTING THE USB TO SERIAL CONVERTER. */
/* Our USART2 is connected to APB1 bus, hence enable it */
/* USART2 is within bit 17 of APB1_ENR Register */
/* PA2(Tx) and PA3 (rx) are Tx/Rx port pins under column AF7 (Alternate Function 7) */
/* So enable PA2 and PA3 and configure to be Alternate Function mode*/
int main(void) {
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
	uart2_tx_init();
 80001d8:	f000 f804 	bl	80001e4 <uart2_tx_init>

	while(1) {
		uart2_write('A');
 80001dc:	2041      	movs	r0, #65	; 0x41
 80001de:	f000 f85d 	bl	800029c <uart2_write>
 80001e2:	e7fb      	b.n	80001dc <main+0x8>

080001e4 <uart2_tx_init>:
	}


}

void uart2_tx_init(void) {
 80001e4:	b580      	push	{r7, lr}
 80001e6:	af00      	add	r7, sp, #0
						/**Configure uart gpio pin**/
	//Enable clk access to GPIOA connected to AHB2 Bus (General AHB within Code)
	RCC->AHBENR |= GPIOAEN;
 80001e8:	4b29      	ldr	r3, [pc, #164]	; (8000290 <uart2_tx_init+0xac>)
 80001ea:	695b      	ldr	r3, [r3, #20]
 80001ec:	4a28      	ldr	r2, [pc, #160]	; (8000290 <uart2_tx_init+0xac>)
 80001ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80001f2:	6153      	str	r3, [r2, #20]

	//Set PA2 MODE to alt func mode 10
	GPIOA->MODER &= ~(1U<<4);
 80001f4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80001fe:	f023 0310 	bic.w	r3, r3, #16
 8000202:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<5);
 8000204:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800020e:	f043 0320 	orr.w	r3, r3, #32
 8000212:	6013      	str	r3, [r2, #0]

	//Set PA2 alt func type to UART_TX (AF7)
	//access the alternate function low register bits 8-11 for AFRL2[3:0]
	//and set that part of the register to AF7 (0111)
	GPIOA->AFR[0] |= (1U<<8);
 8000214:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000218:	6a1b      	ldr	r3, [r3, #32]
 800021a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800021e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000222:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<9);
 8000224:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000228:	6a1b      	ldr	r3, [r3, #32]
 800022a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800022e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000232:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<10);
 8000234:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000238:	6a1b      	ldr	r3, [r3, #32]
 800023a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800023e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000242:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U<<11);
 8000244:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000248:	6a1b      	ldr	r3, [r3, #32]
 800024a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800024e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000252:	6213      	str	r3, [r2, #32]

						/**Configure USART Module**/
	//Enable Clock access to UART2
	RCC->APB1ENR |= USART2EN;
 8000254:	4b0e      	ldr	r3, [pc, #56]	; (8000290 <uart2_tx_init+0xac>)
 8000256:	69db      	ldr	r3, [r3, #28]
 8000258:	4a0d      	ldr	r2, [pc, #52]	; (8000290 <uart2_tx_init+0xac>)
 800025a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800025e:	61d3      	str	r3, [r2, #28]
	//Configure UART Baud Rate
	uart_set_baudrate(USART2, APB1_CLK, USART2_BAUD_RATE);
 8000260:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000264:	490b      	ldr	r1, [pc, #44]	; (8000294 <uart2_tx_init+0xb0>)
 8000266:	480c      	ldr	r0, [pc, #48]	; (8000298 <uart2_tx_init+0xb4>)
 8000268:	f000 f832 	bl	80002d0 <uart_set_baudrate>

	//Configure the transfer direction
	//within CR1 (Control Register 1: Bit3 - TE:Transmitter enable
	USART2->CR1 = CR1_TE;
 800026c:	4b0a      	ldr	r3, [pc, #40]	; (8000298 <uart2_tx_init+0xb4>)
 800026e:	2208      	movs	r2, #8
 8000270:	601a      	str	r2, [r3, #0]

	//Enable the UART Module once done
	//within CR1, UART is enabled with UE bit 0
	USART2->CR1 |= CR1_UE;
 8000272:	4b09      	ldr	r3, [pc, #36]	; (8000298 <uart2_tx_init+0xb4>)
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	4a08      	ldr	r2, [pc, #32]	; (8000298 <uart2_tx_init+0xb4>)
 8000278:	f043 0301 	orr.w	r3, r3, #1
 800027c:	6013      	str	r3, [r2, #0]

	USART2->ISR &= ~(1U<<8);
 800027e:	4b06      	ldr	r3, [pc, #24]	; (8000298 <uart2_tx_init+0xb4>)
 8000280:	69db      	ldr	r3, [r3, #28]
 8000282:	4a05      	ldr	r2, [pc, #20]	; (8000298 <uart2_tx_init+0xb4>)
 8000284:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000288:	61d3      	str	r3, [r2, #28]
}
 800028a:	bf00      	nop
 800028c:	bd80      	pop	{r7, pc}
 800028e:	bf00      	nop
 8000290:	40021000 	.word	0x40021000
 8000294:	00f42400 	.word	0x00f42400
 8000298:	40004400 	.word	0x40004400

0800029c <uart2_write>:

void uart2_write(int ch) {
 800029c:	b480      	push	{r7}
 800029e:	b083      	sub	sp, #12
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	6078      	str	r0, [r7, #4]
	/*Make sure the transmit data register is emoty*/
	//Check if Bit 7 TXE: Transmit data register empty within USART_ISR (Interrupt & Status Register)
	//if TX_E within USART_ISR is set to 1, Transmit Data Register is not empty
	while (USART2->ISR & TX_E) {
 80002a4:	bf00      	nop
 80002a6:	4b09      	ldr	r3, [pc, #36]	; (80002cc <uart2_write+0x30>)
 80002a8:	69db      	ldr	r3, [r3, #28]
 80002aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d1f9      	bne.n	80002a6 <uart2_write+0xa>

	/*Write to transmit data register*/
	/*For F3 disco board, the USART is split into two separate Data Registers: TDR and RDR*/
	//the ch & 0xFF allows for conversion of ch to 8-bit value due to AND with 11111111
	//for example, 16 bit AND would correspond with usage of 0xFFFF
	USART2->TDR = ch & 0xFF;
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	b29a      	uxth	r2, r3
 80002b6:	4b05      	ldr	r3, [pc, #20]	; (80002cc <uart2_write+0x30>)
 80002b8:	b2d2      	uxtb	r2, r2
 80002ba:	b292      	uxth	r2, r2
 80002bc:	851a      	strh	r2, [r3, #40]	; 0x28

}
 80002be:	bf00      	nop
 80002c0:	370c      	adds	r7, #12
 80002c2:	46bd      	mov	sp, r7
 80002c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c8:	4770      	bx	lr
 80002ca:	bf00      	nop
 80002cc:	40004400 	.word	0x40004400

080002d0 <uart_set_baudrate>:

static void uart_set_baudrate(USART_TypeDef *USART, uint32_t PeriphClk, uint32_t BaudRate) {
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b084      	sub	sp, #16
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	60f8      	str	r0, [r7, #12]
 80002d8:	60b9      	str	r1, [r7, #8]
 80002da:	607a      	str	r2, [r7, #4]
	USART->BRR = compute_uart_bd(PeriphClk, BaudRate);
 80002dc:	6879      	ldr	r1, [r7, #4]
 80002de:	68b8      	ldr	r0, [r7, #8]
 80002e0:	f000 f808 	bl	80002f4 <compute_uart_bd>
 80002e4:	4603      	mov	r3, r0
 80002e6:	461a      	mov	r2, r3
 80002e8:	68fb      	ldr	r3, [r7, #12]
 80002ea:	60da      	str	r2, [r3, #12]


}
 80002ec:	bf00      	nop
 80002ee:	3710      	adds	r7, #16
 80002f0:	46bd      	mov	sp, r7
 80002f2:	bd80      	pop	{r7, pc}

080002f4 <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate) {
 80002f4:	b480      	push	{r7}
 80002f6:	b083      	sub	sp, #12
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	6078      	str	r0, [r7, #4]
 80002fc:	6039      	str	r1, [r7, #0]

	return ((PeriphClk + (BaudRate/2U)) / BaudRate);
 80002fe:	683b      	ldr	r3, [r7, #0]
 8000300:	085a      	lsrs	r2, r3, #1
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	441a      	add	r2, r3
 8000306:	683b      	ldr	r3, [r7, #0]
 8000308:	fbb2 f3f3 	udiv	r3, r2, r3
 800030c:	b29b      	uxth	r3, r3
}
 800030e:	4618      	mov	r0, r3
 8000310:	370c      	adds	r7, #12
 8000312:	46bd      	mov	sp, r7
 8000314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000318:	4770      	bx	lr
	...

0800031c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800031c:	480d      	ldr	r0, [pc, #52]	; (8000354 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800031e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000320:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000324:	480c      	ldr	r0, [pc, #48]	; (8000358 <LoopForever+0x6>)
  ldr r1, =_edata
 8000326:	490d      	ldr	r1, [pc, #52]	; (800035c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000328:	4a0d      	ldr	r2, [pc, #52]	; (8000360 <LoopForever+0xe>)
  movs r3, #0
 800032a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800032c:	e002      	b.n	8000334 <LoopCopyDataInit>

0800032e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800032e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000330:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000332:	3304      	adds	r3, #4

08000334 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000334:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000336:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000338:	d3f9      	bcc.n	800032e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800033a:	4a0a      	ldr	r2, [pc, #40]	; (8000364 <LoopForever+0x12>)
  ldr r4, =_ebss
 800033c:	4c0a      	ldr	r4, [pc, #40]	; (8000368 <LoopForever+0x16>)
  movs r3, #0
 800033e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000340:	e001      	b.n	8000346 <LoopFillZerobss>

08000342 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000342:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000344:	3204      	adds	r2, #4

08000346 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000346:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000348:	d3fb      	bcc.n	8000342 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800034a:	f000 f811 	bl	8000370 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800034e:	f7ff ff41 	bl	80001d4 <main>

08000352 <LoopForever>:

LoopForever:
  b LoopForever
 8000352:	e7fe      	b.n	8000352 <LoopForever>
  ldr   r0, =_estack
 8000354:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000358:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800035c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000360:	080003d8 	.word	0x080003d8
  ldr r2, =_sbss
 8000364:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000368:	2000001c 	.word	0x2000001c

0800036c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800036c:	e7fe      	b.n	800036c <ADC1_2_IRQHandler>
	...

08000370 <__libc_init_array>:
 8000370:	b570      	push	{r4, r5, r6, lr}
 8000372:	4d0d      	ldr	r5, [pc, #52]	; (80003a8 <__libc_init_array+0x38>)
 8000374:	4c0d      	ldr	r4, [pc, #52]	; (80003ac <__libc_init_array+0x3c>)
 8000376:	1b64      	subs	r4, r4, r5
 8000378:	10a4      	asrs	r4, r4, #2
 800037a:	2600      	movs	r6, #0
 800037c:	42a6      	cmp	r6, r4
 800037e:	d109      	bne.n	8000394 <__libc_init_array+0x24>
 8000380:	4d0b      	ldr	r5, [pc, #44]	; (80003b0 <__libc_init_array+0x40>)
 8000382:	4c0c      	ldr	r4, [pc, #48]	; (80003b4 <__libc_init_array+0x44>)
 8000384:	f000 f818 	bl	80003b8 <_init>
 8000388:	1b64      	subs	r4, r4, r5
 800038a:	10a4      	asrs	r4, r4, #2
 800038c:	2600      	movs	r6, #0
 800038e:	42a6      	cmp	r6, r4
 8000390:	d105      	bne.n	800039e <__libc_init_array+0x2e>
 8000392:	bd70      	pop	{r4, r5, r6, pc}
 8000394:	f855 3b04 	ldr.w	r3, [r5], #4
 8000398:	4798      	blx	r3
 800039a:	3601      	adds	r6, #1
 800039c:	e7ee      	b.n	800037c <__libc_init_array+0xc>
 800039e:	f855 3b04 	ldr.w	r3, [r5], #4
 80003a2:	4798      	blx	r3
 80003a4:	3601      	adds	r6, #1
 80003a6:	e7f2      	b.n	800038e <__libc_init_array+0x1e>
 80003a8:	080003d0 	.word	0x080003d0
 80003ac:	080003d0 	.word	0x080003d0
 80003b0:	080003d0 	.word	0x080003d0
 80003b4:	080003d4 	.word	0x080003d4

080003b8 <_init>:
 80003b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003ba:	bf00      	nop
 80003bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003be:	bc08      	pop	{r3}
 80003c0:	469e      	mov	lr, r3
 80003c2:	4770      	bx	lr

080003c4 <_fini>:
 80003c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003c6:	bf00      	nop
 80003c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003ca:	bc08      	pop	{r3}
 80003cc:	469e      	mov	lr, r3
 80003ce:	4770      	bx	lr
