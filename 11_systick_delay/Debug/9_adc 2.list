
9_adc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000127c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  0800141c  0800141c  0001141c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001464  08001464  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08001464  08001464  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001464  08001464  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001464  08001464  00011464  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001468  08001468  00011468  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  0800146c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002005c  2**0
                  CONTENTS
 10 .bss          00000170  2000005c  2000005c  0002005c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001cc  200001cc  0002005c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00000e4f  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000004b0  00000000  00000000  00020f1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000140  00000000  00000000  000213d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000000d9  00000000  00000000  00021510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00016b04  00000000  00000000  000215e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000019c4  00000000  00000000  000380ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000781be  00000000  00000000  00039ab1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000b48  00000000  00000000  000b1c70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000078  00000000  00000000  000b27b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08001404 	.word	0x08001404

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08001404 	.word	0x08001404

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <pa_1_adc_init>:
#define PIN15					(1U<<15)
#define LED_PIN					PIN15
#define PIN8					(1U<<8)
#define LED_PIN8				PIN8

void pa_1_adc_init(void) {
 8000280:	b480      	push	{r7}
 8000282:	af00      	add	r7, sp, #0

					/*Configure the ADC GPIO pin*/

	/*	Enable clock access to GPIOA*/
	RCC->AHBENR |= GPIOAEN;
 8000284:	4b15      	ldr	r3, [pc, #84]	; (80002dc <pa_1_adc_init+0x5c>)
 8000286:	695b      	ldr	r3, [r3, #20]
 8000288:	4a14      	ldr	r2, [pc, #80]	; (80002dc <pa_1_adc_init+0x5c>)
 800028a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800028e:	6153      	str	r3, [r2, #20]

	/*	Set the mode of PA1 to analog mode*/
	/* 	PA1 is located at MODE1 which are bits 2 & 3 */
	/* 	To set to analog mode, both bits have to be set to 1 */
	GPIOA->MODER |= ((1U << 2) | (1U << 3));
 8000290:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800029a:	f043 030c 	orr.w	r3, r3, #12
 800029e:	6013      	str	r3, [r2, #0]

					/*Configure the ADC module*/

	/*Enable clock access to ADC */
	RCC->AHBENR |= ADC1EN;
 80002a0:	4b0e      	ldr	r3, [pc, #56]	; (80002dc <pa_1_adc_init+0x5c>)
 80002a2:	695b      	ldr	r3, [r3, #20]
 80002a4:	4a0d      	ldr	r2, [pc, #52]	; (80002dc <pa_1_adc_init+0x5c>)
 80002a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80002aa:	6153      	str	r3, [r2, #20]

	/*Conversion sequence start*/
	//I'm using Channel 2 within ADC1 so set first conversion of sequence register to 00010
	ADC1->SQR1 = ADC1_CH2;
 80002ac:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80002b0:	2280      	movs	r2, #128	; 0x80
 80002b2:	631a      	str	r2, [r3, #48]	; 0x30

	//Set the sequence length of the ADC conversion
	//Now note that the SQR1 SQ1 bits have been set, so we cannot modify them. OR the SEQ len bits
	ADC1->SQR1 |= ADC1_SEQ_LEN;
 80002b4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80002b8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80002bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002be:	6313      	str	r3, [r2, #48]	; 0x30

	/*Enable ADC module*/
	ADC1->CR |= CR_ADC_EN;
 80002c0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80002c4:	689b      	ldr	r3, [r3, #8]
 80002c6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80002ca:	f043 0301 	orr.w	r3, r3, #1
 80002ce:	6093      	str	r3, [r2, #8]
}
 80002d0:	bf00      	nop
 80002d2:	46bd      	mov	sp, r7
 80002d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d8:	4770      	bx	lr
 80002da:	bf00      	nop
 80002dc:	40021000 	.word	0x40021000

080002e0 <start_conversion>:

void start_conversion(void) {
 80002e0:	b480      	push	{r7}
 80002e2:	af00      	add	r7, sp, #0
	//start the ADC conversion
	ADC1->CR |= CR_ADC_START;
 80002e4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80002e8:	689b      	ldr	r3, [r3, #8]
 80002ea:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80002ee:	f043 0304 	orr.w	r3, r3, #4
 80002f2:	6093      	str	r3, [r2, #8]

}
 80002f4:	bf00      	nop
 80002f6:	46bd      	mov	sp, r7
 80002f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fc:	4770      	bx	lr
	...

08000300 <adc_read>:

uint32_t adc_read(void) {
 8000300:	b480      	push	{r7}
 8000302:	af00      	add	r7, sp, #0

	RCC->AHBENR |= GPIOEEN;
 8000304:	4b1e      	ldr	r3, [pc, #120]	; (8000380 <adc_read+0x80>)
 8000306:	695b      	ldr	r3, [r3, #20]
 8000308:	4a1d      	ldr	r2, [pc, #116]	; (8000380 <adc_read+0x80>)
 800030a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800030e:	6153      	str	r3, [r2, #20]
	GPIOE->MODER |= (1U<<30);
 8000310:	4b1c      	ldr	r3, [pc, #112]	; (8000384 <adc_read+0x84>)
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	4a1b      	ldr	r2, [pc, #108]	; (8000384 <adc_read+0x84>)
 8000316:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800031a:	6013      	str	r3, [r2, #0]
	GPIOE->MODER &=~(1U<<31);
 800031c:	4b19      	ldr	r3, [pc, #100]	; (8000384 <adc_read+0x84>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	4a18      	ldr	r2, [pc, #96]	; (8000384 <adc_read+0x84>)
 8000322:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000326:	6013      	str	r3, [r2, #0]
	GPIOE->MODER |= (1U<<16);
 8000328:	4b16      	ldr	r3, [pc, #88]	; (8000384 <adc_read+0x84>)
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	4a15      	ldr	r2, [pc, #84]	; (8000384 <adc_read+0x84>)
 800032e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000332:	6013      	str	r3, [r2, #0]
	GPIOE->MODER &= ~(1U<<17);
 8000334:	4b13      	ldr	r3, [pc, #76]	; (8000384 <adc_read+0x84>)
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	4a12      	ldr	r2, [pc, #72]	; (8000384 <adc_read+0x84>)
 800033a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800033e:	6013      	str	r3, [r2, #0]

	//wait for the conversion to be complete
	//while the status register for EOC is set to 0,
	//aka conversion not complete, we get stuck here
	while (!(ADC1->ISR & SR_EOC)) {
 8000340:	e00f      	b.n	8000362 <adc_read+0x62>
		GPIOE->BSRR = LED_PIN;
 8000342:	4b10      	ldr	r3, [pc, #64]	; (8000384 <adc_read+0x84>)
 8000344:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000348:	619a      	str	r2, [r3, #24]
		GPIOE->BSRR = LED_PIN8;
 800034a:	4b0e      	ldr	r3, [pc, #56]	; (8000384 <adc_read+0x84>)
 800034c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000350:	619a      	str	r2, [r3, #24]
		GPIOE->BSRR = (1U<<31);
 8000352:	4b0c      	ldr	r3, [pc, #48]	; (8000384 <adc_read+0x84>)
 8000354:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000358:	619a      	str	r2, [r3, #24]
		GPIOE->BSRR = (1U<<24);
 800035a:	4b0a      	ldr	r3, [pc, #40]	; (8000384 <adc_read+0x84>)
 800035c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000360:	619a      	str	r2, [r3, #24]
	while (!(ADC1->ISR & SR_EOC)) {
 8000362:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	f003 0304 	and.w	r3, r3, #4
 800036c:	2b00      	cmp	r3, #0
 800036e:	d0e8      	beq.n	8000342 <adc_read+0x42>
	};

//	GPIOE->BSRR = (1U<<31);
//	GPIOE->BSRR = (1U<<24);
	//Read converted result
	return (ADC1->DR);
 8000370:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8000376:	4618      	mov	r0, r3
 8000378:	46bd      	mov	sp, r7
 800037a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037e:	4770      	bx	lr
 8000380:	40021000 	.word	0x40021000
 8000384:	48001000 	.word	0x48001000

08000388 <main>:
#define PIN8					(1U<<8)
#define LED_PIN8				PIN8

uint32_t sensor_value;

int main(void) {
 8000388:	b580      	push	{r7, lr}
 800038a:	af00      	add	r7, sp, #0

	RCC->AHBENR |= GPIOEEN;
 800038c:	4b21      	ldr	r3, [pc, #132]	; (8000414 <main+0x8c>)
 800038e:	695b      	ldr	r3, [r3, #20]
 8000390:	4a20      	ldr	r2, [pc, #128]	; (8000414 <main+0x8c>)
 8000392:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000396:	6153      	str	r3, [r2, #20]
	GPIOE->MODER |= (1U<<30);
 8000398:	4b1f      	ldr	r3, [pc, #124]	; (8000418 <main+0x90>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	4a1e      	ldr	r2, [pc, #120]	; (8000418 <main+0x90>)
 800039e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80003a2:	6013      	str	r3, [r2, #0]
	GPIOE->MODER &=~(1U<<31);
 80003a4:	4b1c      	ldr	r3, [pc, #112]	; (8000418 <main+0x90>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	4a1b      	ldr	r2, [pc, #108]	; (8000418 <main+0x90>)
 80003aa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80003ae:	6013      	str	r3, [r2, #0]
	GPIOE->MODER |= (1U<<16);
 80003b0:	4b19      	ldr	r3, [pc, #100]	; (8000418 <main+0x90>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	4a18      	ldr	r2, [pc, #96]	; (8000418 <main+0x90>)
 80003b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80003ba:	6013      	str	r3, [r2, #0]
	GPIOE->MODER &= ~(1U<<17);
 80003bc:	4b16      	ldr	r3, [pc, #88]	; (8000418 <main+0x90>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	4a15      	ldr	r2, [pc, #84]	; (8000418 <main+0x90>)
 80003c2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80003c6:	6013      	str	r3, [r2, #0]



	pa_1_adc_init();
 80003c8:	f7ff ff5a 	bl	8000280 <pa_1_adc_init>
	start_conversion();
 80003cc:	f7ff ff88 	bl	80002e0 <start_conversion>

	while(1) {
		sensor_value = adc_read();
 80003d0:	f7ff ff96 	bl	8000300 <adc_read>
 80003d4:	4603      	mov	r3, r0
 80003d6:	4a11      	ldr	r2, [pc, #68]	; (800041c <main+0x94>)
 80003d8:	6013      	str	r3, [r2, #0]
//		GPIOE->BSRR = LED_PIN;
//		GPIOE->BSRR = LED_PIN8;
		printf("sensor value: %d \n\r", (int) sensor_value);
 80003da:	4b10      	ldr	r3, [pc, #64]	; (800041c <main+0x94>)
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	4619      	mov	r1, r3
 80003e0:	480f      	ldr	r0, [pc, #60]	; (8000420 <main+0x98>)
 80003e2:	f000 f99d 	bl	8000720 <iprintf>
		if ((int) sensor_value == 0) {
 80003e6:	4b0d      	ldr	r3, [pc, #52]	; (800041c <main+0x94>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d108      	bne.n	8000400 <main+0x78>
			GPIOE->BSRR = (1U<<31);
 80003ee:	4b0a      	ldr	r3, [pc, #40]	; (8000418 <main+0x90>)
 80003f0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80003f4:	619a      	str	r2, [r3, #24]
			GPIOE->BSRR = (1U<<24);
 80003f6:	4b08      	ldr	r3, [pc, #32]	; (8000418 <main+0x90>)
 80003f8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80003fc:	619a      	str	r2, [r3, #24]
 80003fe:	e7e7      	b.n	80003d0 <main+0x48>
//			GPIOE->BSRR = LED_PIN;
//			GPIOE->BSRR = LED_PIN8;
		} else {
			GPIOE->BSRR = (1U<<31);
 8000400:	4b05      	ldr	r3, [pc, #20]	; (8000418 <main+0x90>)
 8000402:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000406:	619a      	str	r2, [r3, #24]
			GPIOE->BSRR = (1U<<24);
 8000408:	4b03      	ldr	r3, [pc, #12]	; (8000418 <main+0x90>)
 800040a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800040e:	619a      	str	r2, [r3, #24]
		sensor_value = adc_read();
 8000410:	e7de      	b.n	80003d0 <main+0x48>
 8000412:	bf00      	nop
 8000414:	40021000 	.word	0x40021000
 8000418:	48001000 	.word	0x48001000
 800041c:	20000078 	.word	0x20000078
 8000420:	0800141c 	.word	0x0800141c

08000424 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b086      	sub	sp, #24
 8000428:	af00      	add	r7, sp, #0
 800042a:	60f8      	str	r0, [r7, #12]
 800042c:	60b9      	str	r1, [r7, #8]
 800042e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000430:	2300      	movs	r3, #0
 8000432:	617b      	str	r3, [r7, #20]
 8000434:	e00a      	b.n	800044c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000436:	f3af 8000 	nop.w
 800043a:	4601      	mov	r1, r0
 800043c:	68bb      	ldr	r3, [r7, #8]
 800043e:	1c5a      	adds	r2, r3, #1
 8000440:	60ba      	str	r2, [r7, #8]
 8000442:	b2ca      	uxtb	r2, r1
 8000444:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000446:	697b      	ldr	r3, [r7, #20]
 8000448:	3301      	adds	r3, #1
 800044a:	617b      	str	r3, [r7, #20]
 800044c:	697a      	ldr	r2, [r7, #20]
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	429a      	cmp	r2, r3
 8000452:	dbf0      	blt.n	8000436 <_read+0x12>
  }

  return len;
 8000454:	687b      	ldr	r3, [r7, #4]
}
 8000456:	4618      	mov	r0, r3
 8000458:	3718      	adds	r7, #24
 800045a:	46bd      	mov	sp, r7
 800045c:	bd80      	pop	{r7, pc}

0800045e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800045e:	b580      	push	{r7, lr}
 8000460:	b086      	sub	sp, #24
 8000462:	af00      	add	r7, sp, #0
 8000464:	60f8      	str	r0, [r7, #12]
 8000466:	60b9      	str	r1, [r7, #8]
 8000468:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800046a:	2300      	movs	r3, #0
 800046c:	617b      	str	r3, [r7, #20]
 800046e:	e009      	b.n	8000484 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000470:	68bb      	ldr	r3, [r7, #8]
 8000472:	1c5a      	adds	r2, r3, #1
 8000474:	60ba      	str	r2, [r7, #8]
 8000476:	781b      	ldrb	r3, [r3, #0]
 8000478:	4618      	mov	r0, r3
 800047a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800047e:	697b      	ldr	r3, [r7, #20]
 8000480:	3301      	adds	r3, #1
 8000482:	617b      	str	r3, [r7, #20]
 8000484:	697a      	ldr	r2, [r7, #20]
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	429a      	cmp	r2, r3
 800048a:	dbf1      	blt.n	8000470 <_write+0x12>
  }
  return len;
 800048c:	687b      	ldr	r3, [r7, #4]
}
 800048e:	4618      	mov	r0, r3
 8000490:	3718      	adds	r7, #24
 8000492:	46bd      	mov	sp, r7
 8000494:	bd80      	pop	{r7, pc}

08000496 <_close>:

int _close(int file)
{
 8000496:	b480      	push	{r7}
 8000498:	b083      	sub	sp, #12
 800049a:	af00      	add	r7, sp, #0
 800049c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800049e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80004a2:	4618      	mov	r0, r3
 80004a4:	370c      	adds	r7, #12
 80004a6:	46bd      	mov	sp, r7
 80004a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ac:	4770      	bx	lr

080004ae <_fstat>:


int _fstat(int file, struct stat *st)
{
 80004ae:	b480      	push	{r7}
 80004b0:	b083      	sub	sp, #12
 80004b2:	af00      	add	r7, sp, #0
 80004b4:	6078      	str	r0, [r7, #4]
 80004b6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80004b8:	683b      	ldr	r3, [r7, #0]
 80004ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80004be:	605a      	str	r2, [r3, #4]
  return 0;
 80004c0:	2300      	movs	r3, #0
}
 80004c2:	4618      	mov	r0, r3
 80004c4:	370c      	adds	r7, #12
 80004c6:	46bd      	mov	sp, r7
 80004c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004cc:	4770      	bx	lr

080004ce <_isatty>:

int _isatty(int file)
{
 80004ce:	b480      	push	{r7}
 80004d0:	b083      	sub	sp, #12
 80004d2:	af00      	add	r7, sp, #0
 80004d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80004d6:	2301      	movs	r3, #1
}
 80004d8:	4618      	mov	r0, r3
 80004da:	370c      	adds	r7, #12
 80004dc:	46bd      	mov	sp, r7
 80004de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e2:	4770      	bx	lr

080004e4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80004e4:	b480      	push	{r7}
 80004e6:	b085      	sub	sp, #20
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	60f8      	str	r0, [r7, #12]
 80004ec:	60b9      	str	r1, [r7, #8]
 80004ee:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80004f0:	2300      	movs	r3, #0
}
 80004f2:	4618      	mov	r0, r3
 80004f4:	3714      	adds	r7, #20
 80004f6:	46bd      	mov	sp, r7
 80004f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fc:	4770      	bx	lr
	...

08000500 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b086      	sub	sp, #24
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000508:	4a14      	ldr	r2, [pc, #80]	; (800055c <_sbrk+0x5c>)
 800050a:	4b15      	ldr	r3, [pc, #84]	; (8000560 <_sbrk+0x60>)
 800050c:	1ad3      	subs	r3, r2, r3
 800050e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000510:	697b      	ldr	r3, [r7, #20]
 8000512:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000514:	4b13      	ldr	r3, [pc, #76]	; (8000564 <_sbrk+0x64>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	2b00      	cmp	r3, #0
 800051a:	d102      	bne.n	8000522 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800051c:	4b11      	ldr	r3, [pc, #68]	; (8000564 <_sbrk+0x64>)
 800051e:	4a12      	ldr	r2, [pc, #72]	; (8000568 <_sbrk+0x68>)
 8000520:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000522:	4b10      	ldr	r3, [pc, #64]	; (8000564 <_sbrk+0x64>)
 8000524:	681a      	ldr	r2, [r3, #0]
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	4413      	add	r3, r2
 800052a:	693a      	ldr	r2, [r7, #16]
 800052c:	429a      	cmp	r2, r3
 800052e:	d207      	bcs.n	8000540 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000530:	f000 f910 	bl	8000754 <__errno>
 8000534:	4603      	mov	r3, r0
 8000536:	220c      	movs	r2, #12
 8000538:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800053a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800053e:	e009      	b.n	8000554 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000540:	4b08      	ldr	r3, [pc, #32]	; (8000564 <_sbrk+0x64>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000546:	4b07      	ldr	r3, [pc, #28]	; (8000564 <_sbrk+0x64>)
 8000548:	681a      	ldr	r2, [r3, #0]
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	4413      	add	r3, r2
 800054e:	4a05      	ldr	r2, [pc, #20]	; (8000564 <_sbrk+0x64>)
 8000550:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000552:	68fb      	ldr	r3, [r7, #12]
}
 8000554:	4618      	mov	r0, r3
 8000556:	3718      	adds	r7, #24
 8000558:	46bd      	mov	sp, r7
 800055a:	bd80      	pop	{r7, pc}
 800055c:	2000a000 	.word	0x2000a000
 8000560:	00000400 	.word	0x00000400
 8000564:	2000007c 	.word	0x2000007c
 8000568:	200001d0 	.word	0x200001d0

0800056c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800056c:	480d      	ldr	r0, [pc, #52]	; (80005a4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800056e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000570:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000574:	480c      	ldr	r0, [pc, #48]	; (80005a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000576:	490d      	ldr	r1, [pc, #52]	; (80005ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8000578:	4a0d      	ldr	r2, [pc, #52]	; (80005b0 <LoopForever+0xe>)
  movs r3, #0
 800057a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800057c:	e002      	b.n	8000584 <LoopCopyDataInit>

0800057e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800057e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000580:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000582:	3304      	adds	r3, #4

08000584 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000584:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000586:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000588:	d3f9      	bcc.n	800057e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800058a:	4a0a      	ldr	r2, [pc, #40]	; (80005b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800058c:	4c0a      	ldr	r4, [pc, #40]	; (80005b8 <LoopForever+0x16>)
  movs r3, #0
 800058e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000590:	e001      	b.n	8000596 <LoopFillZerobss>

08000592 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000592:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000594:	3204      	adds	r2, #4

08000596 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000596:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000598:	d3fb      	bcc.n	8000592 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800059a:	f000 f8e1 	bl	8000760 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800059e:	f7ff fef3 	bl	8000388 <main>

080005a2 <LoopForever>:

LoopForever:
  b LoopForever
 80005a2:	e7fe      	b.n	80005a2 <LoopForever>
  ldr   r0, =_estack
 80005a4:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80005a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005ac:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80005b0:	0800146c 	.word	0x0800146c
  ldr r2, =_sbss
 80005b4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80005b8:	200001cc 	.word	0x200001cc

080005bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005bc:	e7fe      	b.n	80005bc <ADC1_2_IRQHandler>
	...

080005c0 <std>:
 80005c0:	2300      	movs	r3, #0
 80005c2:	b510      	push	{r4, lr}
 80005c4:	4604      	mov	r4, r0
 80005c6:	e9c0 3300 	strd	r3, r3, [r0]
 80005ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80005ce:	6083      	str	r3, [r0, #8]
 80005d0:	8181      	strh	r1, [r0, #12]
 80005d2:	6643      	str	r3, [r0, #100]	; 0x64
 80005d4:	81c2      	strh	r2, [r0, #14]
 80005d6:	6183      	str	r3, [r0, #24]
 80005d8:	4619      	mov	r1, r3
 80005da:	2208      	movs	r2, #8
 80005dc:	305c      	adds	r0, #92	; 0x5c
 80005de:	f000 f8b1 	bl	8000744 <memset>
 80005e2:	4b05      	ldr	r3, [pc, #20]	; (80005f8 <std+0x38>)
 80005e4:	6263      	str	r3, [r4, #36]	; 0x24
 80005e6:	4b05      	ldr	r3, [pc, #20]	; (80005fc <std+0x3c>)
 80005e8:	62a3      	str	r3, [r4, #40]	; 0x28
 80005ea:	4b05      	ldr	r3, [pc, #20]	; (8000600 <std+0x40>)
 80005ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 80005ee:	4b05      	ldr	r3, [pc, #20]	; (8000604 <std+0x44>)
 80005f0:	6224      	str	r4, [r4, #32]
 80005f2:	6323      	str	r3, [r4, #48]	; 0x30
 80005f4:	bd10      	pop	{r4, pc}
 80005f6:	bf00      	nop
 80005f8:	08001009 	.word	0x08001009
 80005fc:	0800102b 	.word	0x0800102b
 8000600:	08001063 	.word	0x08001063
 8000604:	08001087 	.word	0x08001087

08000608 <stdio_exit_handler>:
 8000608:	4a02      	ldr	r2, [pc, #8]	; (8000614 <stdio_exit_handler+0xc>)
 800060a:	4903      	ldr	r1, [pc, #12]	; (8000618 <stdio_exit_handler+0x10>)
 800060c:	4803      	ldr	r0, [pc, #12]	; (800061c <stdio_exit_handler+0x14>)
 800060e:	f000 b869 	b.w	80006e4 <_fwalk_sglue>
 8000612:	bf00      	nop
 8000614:	20000000 	.word	0x20000000
 8000618:	08000fa1 	.word	0x08000fa1
 800061c:	2000000c 	.word	0x2000000c

08000620 <cleanup_stdio>:
 8000620:	6841      	ldr	r1, [r0, #4]
 8000622:	4b0c      	ldr	r3, [pc, #48]	; (8000654 <cleanup_stdio+0x34>)
 8000624:	4299      	cmp	r1, r3
 8000626:	b510      	push	{r4, lr}
 8000628:	4604      	mov	r4, r0
 800062a:	d001      	beq.n	8000630 <cleanup_stdio+0x10>
 800062c:	f000 fcb8 	bl	8000fa0 <_fflush_r>
 8000630:	68a1      	ldr	r1, [r4, #8]
 8000632:	4b09      	ldr	r3, [pc, #36]	; (8000658 <cleanup_stdio+0x38>)
 8000634:	4299      	cmp	r1, r3
 8000636:	d002      	beq.n	800063e <cleanup_stdio+0x1e>
 8000638:	4620      	mov	r0, r4
 800063a:	f000 fcb1 	bl	8000fa0 <_fflush_r>
 800063e:	68e1      	ldr	r1, [r4, #12]
 8000640:	4b06      	ldr	r3, [pc, #24]	; (800065c <cleanup_stdio+0x3c>)
 8000642:	4299      	cmp	r1, r3
 8000644:	d004      	beq.n	8000650 <cleanup_stdio+0x30>
 8000646:	4620      	mov	r0, r4
 8000648:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800064c:	f000 bca8 	b.w	8000fa0 <_fflush_r>
 8000650:	bd10      	pop	{r4, pc}
 8000652:	bf00      	nop
 8000654:	20000080 	.word	0x20000080
 8000658:	200000e8 	.word	0x200000e8
 800065c:	20000150 	.word	0x20000150

08000660 <global_stdio_init.part.0>:
 8000660:	b510      	push	{r4, lr}
 8000662:	4b0b      	ldr	r3, [pc, #44]	; (8000690 <global_stdio_init.part.0+0x30>)
 8000664:	4c0b      	ldr	r4, [pc, #44]	; (8000694 <global_stdio_init.part.0+0x34>)
 8000666:	4a0c      	ldr	r2, [pc, #48]	; (8000698 <global_stdio_init.part.0+0x38>)
 8000668:	601a      	str	r2, [r3, #0]
 800066a:	4620      	mov	r0, r4
 800066c:	2200      	movs	r2, #0
 800066e:	2104      	movs	r1, #4
 8000670:	f7ff ffa6 	bl	80005c0 <std>
 8000674:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8000678:	2201      	movs	r2, #1
 800067a:	2109      	movs	r1, #9
 800067c:	f7ff ffa0 	bl	80005c0 <std>
 8000680:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8000684:	2202      	movs	r2, #2
 8000686:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800068a:	2112      	movs	r1, #18
 800068c:	f7ff bf98 	b.w	80005c0 <std>
 8000690:	200001b8 	.word	0x200001b8
 8000694:	20000080 	.word	0x20000080
 8000698:	08000609 	.word	0x08000609

0800069c <__sfp_lock_acquire>:
 800069c:	4801      	ldr	r0, [pc, #4]	; (80006a4 <__sfp_lock_acquire+0x8>)
 800069e:	f000 b883 	b.w	80007a8 <__retarget_lock_acquire_recursive>
 80006a2:	bf00      	nop
 80006a4:	200001bd 	.word	0x200001bd

080006a8 <__sfp_lock_release>:
 80006a8:	4801      	ldr	r0, [pc, #4]	; (80006b0 <__sfp_lock_release+0x8>)
 80006aa:	f000 b87e 	b.w	80007aa <__retarget_lock_release_recursive>
 80006ae:	bf00      	nop
 80006b0:	200001bd 	.word	0x200001bd

080006b4 <__sinit>:
 80006b4:	b510      	push	{r4, lr}
 80006b6:	4604      	mov	r4, r0
 80006b8:	f7ff fff0 	bl	800069c <__sfp_lock_acquire>
 80006bc:	6a23      	ldr	r3, [r4, #32]
 80006be:	b11b      	cbz	r3, 80006c8 <__sinit+0x14>
 80006c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80006c4:	f7ff bff0 	b.w	80006a8 <__sfp_lock_release>
 80006c8:	4b04      	ldr	r3, [pc, #16]	; (80006dc <__sinit+0x28>)
 80006ca:	6223      	str	r3, [r4, #32]
 80006cc:	4b04      	ldr	r3, [pc, #16]	; (80006e0 <__sinit+0x2c>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d1f5      	bne.n	80006c0 <__sinit+0xc>
 80006d4:	f7ff ffc4 	bl	8000660 <global_stdio_init.part.0>
 80006d8:	e7f2      	b.n	80006c0 <__sinit+0xc>
 80006da:	bf00      	nop
 80006dc:	08000621 	.word	0x08000621
 80006e0:	200001b8 	.word	0x200001b8

080006e4 <_fwalk_sglue>:
 80006e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80006e8:	4607      	mov	r7, r0
 80006ea:	4688      	mov	r8, r1
 80006ec:	4614      	mov	r4, r2
 80006ee:	2600      	movs	r6, #0
 80006f0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80006f4:	f1b9 0901 	subs.w	r9, r9, #1
 80006f8:	d505      	bpl.n	8000706 <_fwalk_sglue+0x22>
 80006fa:	6824      	ldr	r4, [r4, #0]
 80006fc:	2c00      	cmp	r4, #0
 80006fe:	d1f7      	bne.n	80006f0 <_fwalk_sglue+0xc>
 8000700:	4630      	mov	r0, r6
 8000702:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000706:	89ab      	ldrh	r3, [r5, #12]
 8000708:	2b01      	cmp	r3, #1
 800070a:	d907      	bls.n	800071c <_fwalk_sglue+0x38>
 800070c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000710:	3301      	adds	r3, #1
 8000712:	d003      	beq.n	800071c <_fwalk_sglue+0x38>
 8000714:	4629      	mov	r1, r5
 8000716:	4638      	mov	r0, r7
 8000718:	47c0      	blx	r8
 800071a:	4306      	orrs	r6, r0
 800071c:	3568      	adds	r5, #104	; 0x68
 800071e:	e7e9      	b.n	80006f4 <_fwalk_sglue+0x10>

08000720 <iprintf>:
 8000720:	b40f      	push	{r0, r1, r2, r3}
 8000722:	b507      	push	{r0, r1, r2, lr}
 8000724:	4906      	ldr	r1, [pc, #24]	; (8000740 <iprintf+0x20>)
 8000726:	ab04      	add	r3, sp, #16
 8000728:	6808      	ldr	r0, [r1, #0]
 800072a:	f853 2b04 	ldr.w	r2, [r3], #4
 800072e:	6881      	ldr	r1, [r0, #8]
 8000730:	9301      	str	r3, [sp, #4]
 8000732:	f000 f865 	bl	8000800 <_vfiprintf_r>
 8000736:	b003      	add	sp, #12
 8000738:	f85d eb04 	ldr.w	lr, [sp], #4
 800073c:	b004      	add	sp, #16
 800073e:	4770      	bx	lr
 8000740:	20000058 	.word	0x20000058

08000744 <memset>:
 8000744:	4402      	add	r2, r0
 8000746:	4603      	mov	r3, r0
 8000748:	4293      	cmp	r3, r2
 800074a:	d100      	bne.n	800074e <memset+0xa>
 800074c:	4770      	bx	lr
 800074e:	f803 1b01 	strb.w	r1, [r3], #1
 8000752:	e7f9      	b.n	8000748 <memset+0x4>

08000754 <__errno>:
 8000754:	4b01      	ldr	r3, [pc, #4]	; (800075c <__errno+0x8>)
 8000756:	6818      	ldr	r0, [r3, #0]
 8000758:	4770      	bx	lr
 800075a:	bf00      	nop
 800075c:	20000058 	.word	0x20000058

08000760 <__libc_init_array>:
 8000760:	b570      	push	{r4, r5, r6, lr}
 8000762:	4d0d      	ldr	r5, [pc, #52]	; (8000798 <__libc_init_array+0x38>)
 8000764:	4c0d      	ldr	r4, [pc, #52]	; (800079c <__libc_init_array+0x3c>)
 8000766:	1b64      	subs	r4, r4, r5
 8000768:	10a4      	asrs	r4, r4, #2
 800076a:	2600      	movs	r6, #0
 800076c:	42a6      	cmp	r6, r4
 800076e:	d109      	bne.n	8000784 <__libc_init_array+0x24>
 8000770:	4d0b      	ldr	r5, [pc, #44]	; (80007a0 <__libc_init_array+0x40>)
 8000772:	4c0c      	ldr	r4, [pc, #48]	; (80007a4 <__libc_init_array+0x44>)
 8000774:	f000 fe46 	bl	8001404 <_init>
 8000778:	1b64      	subs	r4, r4, r5
 800077a:	10a4      	asrs	r4, r4, #2
 800077c:	2600      	movs	r6, #0
 800077e:	42a6      	cmp	r6, r4
 8000780:	d105      	bne.n	800078e <__libc_init_array+0x2e>
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f855 3b04 	ldr.w	r3, [r5], #4
 8000788:	4798      	blx	r3
 800078a:	3601      	adds	r6, #1
 800078c:	e7ee      	b.n	800076c <__libc_init_array+0xc>
 800078e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000792:	4798      	blx	r3
 8000794:	3601      	adds	r6, #1
 8000796:	e7f2      	b.n	800077e <__libc_init_array+0x1e>
 8000798:	08001464 	.word	0x08001464
 800079c:	08001464 	.word	0x08001464
 80007a0:	08001464 	.word	0x08001464
 80007a4:	08001468 	.word	0x08001468

080007a8 <__retarget_lock_acquire_recursive>:
 80007a8:	4770      	bx	lr

080007aa <__retarget_lock_release_recursive>:
 80007aa:	4770      	bx	lr

080007ac <__sfputc_r>:
 80007ac:	6893      	ldr	r3, [r2, #8]
 80007ae:	3b01      	subs	r3, #1
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	b410      	push	{r4}
 80007b4:	6093      	str	r3, [r2, #8]
 80007b6:	da08      	bge.n	80007ca <__sfputc_r+0x1e>
 80007b8:	6994      	ldr	r4, [r2, #24]
 80007ba:	42a3      	cmp	r3, r4
 80007bc:	db01      	blt.n	80007c2 <__sfputc_r+0x16>
 80007be:	290a      	cmp	r1, #10
 80007c0:	d103      	bne.n	80007ca <__sfputc_r+0x1e>
 80007c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80007c6:	f000 bc62 	b.w	800108e <__swbuf_r>
 80007ca:	6813      	ldr	r3, [r2, #0]
 80007cc:	1c58      	adds	r0, r3, #1
 80007ce:	6010      	str	r0, [r2, #0]
 80007d0:	7019      	strb	r1, [r3, #0]
 80007d2:	4608      	mov	r0, r1
 80007d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80007d8:	4770      	bx	lr

080007da <__sfputs_r>:
 80007da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007dc:	4606      	mov	r6, r0
 80007de:	460f      	mov	r7, r1
 80007e0:	4614      	mov	r4, r2
 80007e2:	18d5      	adds	r5, r2, r3
 80007e4:	42ac      	cmp	r4, r5
 80007e6:	d101      	bne.n	80007ec <__sfputs_r+0x12>
 80007e8:	2000      	movs	r0, #0
 80007ea:	e007      	b.n	80007fc <__sfputs_r+0x22>
 80007ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80007f0:	463a      	mov	r2, r7
 80007f2:	4630      	mov	r0, r6
 80007f4:	f7ff ffda 	bl	80007ac <__sfputc_r>
 80007f8:	1c43      	adds	r3, r0, #1
 80007fa:	d1f3      	bne.n	80007e4 <__sfputs_r+0xa>
 80007fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000800 <_vfiprintf_r>:
 8000800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000804:	460d      	mov	r5, r1
 8000806:	b09d      	sub	sp, #116	; 0x74
 8000808:	4614      	mov	r4, r2
 800080a:	4698      	mov	r8, r3
 800080c:	4606      	mov	r6, r0
 800080e:	b118      	cbz	r0, 8000818 <_vfiprintf_r+0x18>
 8000810:	6a03      	ldr	r3, [r0, #32]
 8000812:	b90b      	cbnz	r3, 8000818 <_vfiprintf_r+0x18>
 8000814:	f7ff ff4e 	bl	80006b4 <__sinit>
 8000818:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800081a:	07d9      	lsls	r1, r3, #31
 800081c:	d405      	bmi.n	800082a <_vfiprintf_r+0x2a>
 800081e:	89ab      	ldrh	r3, [r5, #12]
 8000820:	059a      	lsls	r2, r3, #22
 8000822:	d402      	bmi.n	800082a <_vfiprintf_r+0x2a>
 8000824:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000826:	f7ff ffbf 	bl	80007a8 <__retarget_lock_acquire_recursive>
 800082a:	89ab      	ldrh	r3, [r5, #12]
 800082c:	071b      	lsls	r3, r3, #28
 800082e:	d501      	bpl.n	8000834 <_vfiprintf_r+0x34>
 8000830:	692b      	ldr	r3, [r5, #16]
 8000832:	b99b      	cbnz	r3, 800085c <_vfiprintf_r+0x5c>
 8000834:	4629      	mov	r1, r5
 8000836:	4630      	mov	r0, r6
 8000838:	f000 fc66 	bl	8001108 <__swsetup_r>
 800083c:	b170      	cbz	r0, 800085c <_vfiprintf_r+0x5c>
 800083e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000840:	07dc      	lsls	r4, r3, #31
 8000842:	d504      	bpl.n	800084e <_vfiprintf_r+0x4e>
 8000844:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000848:	b01d      	add	sp, #116	; 0x74
 800084a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800084e:	89ab      	ldrh	r3, [r5, #12]
 8000850:	0598      	lsls	r0, r3, #22
 8000852:	d4f7      	bmi.n	8000844 <_vfiprintf_r+0x44>
 8000854:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000856:	f7ff ffa8 	bl	80007aa <__retarget_lock_release_recursive>
 800085a:	e7f3      	b.n	8000844 <_vfiprintf_r+0x44>
 800085c:	2300      	movs	r3, #0
 800085e:	9309      	str	r3, [sp, #36]	; 0x24
 8000860:	2320      	movs	r3, #32
 8000862:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000866:	f8cd 800c 	str.w	r8, [sp, #12]
 800086a:	2330      	movs	r3, #48	; 0x30
 800086c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8000a20 <_vfiprintf_r+0x220>
 8000870:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000874:	f04f 0901 	mov.w	r9, #1
 8000878:	4623      	mov	r3, r4
 800087a:	469a      	mov	sl, r3
 800087c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000880:	b10a      	cbz	r2, 8000886 <_vfiprintf_r+0x86>
 8000882:	2a25      	cmp	r2, #37	; 0x25
 8000884:	d1f9      	bne.n	800087a <_vfiprintf_r+0x7a>
 8000886:	ebba 0b04 	subs.w	fp, sl, r4
 800088a:	d00b      	beq.n	80008a4 <_vfiprintf_r+0xa4>
 800088c:	465b      	mov	r3, fp
 800088e:	4622      	mov	r2, r4
 8000890:	4629      	mov	r1, r5
 8000892:	4630      	mov	r0, r6
 8000894:	f7ff ffa1 	bl	80007da <__sfputs_r>
 8000898:	3001      	adds	r0, #1
 800089a:	f000 80a9 	beq.w	80009f0 <_vfiprintf_r+0x1f0>
 800089e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80008a0:	445a      	add	r2, fp
 80008a2:	9209      	str	r2, [sp, #36]	; 0x24
 80008a4:	f89a 3000 	ldrb.w	r3, [sl]
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	f000 80a1 	beq.w	80009f0 <_vfiprintf_r+0x1f0>
 80008ae:	2300      	movs	r3, #0
 80008b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80008b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80008b8:	f10a 0a01 	add.w	sl, sl, #1
 80008bc:	9304      	str	r3, [sp, #16]
 80008be:	9307      	str	r3, [sp, #28]
 80008c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80008c4:	931a      	str	r3, [sp, #104]	; 0x68
 80008c6:	4654      	mov	r4, sl
 80008c8:	2205      	movs	r2, #5
 80008ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80008ce:	4854      	ldr	r0, [pc, #336]	; (8000a20 <_vfiprintf_r+0x220>)
 80008d0:	f7ff fc86 	bl	80001e0 <memchr>
 80008d4:	9a04      	ldr	r2, [sp, #16]
 80008d6:	b9d8      	cbnz	r0, 8000910 <_vfiprintf_r+0x110>
 80008d8:	06d1      	lsls	r1, r2, #27
 80008da:	bf44      	itt	mi
 80008dc:	2320      	movmi	r3, #32
 80008de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80008e2:	0713      	lsls	r3, r2, #28
 80008e4:	bf44      	itt	mi
 80008e6:	232b      	movmi	r3, #43	; 0x2b
 80008e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80008ec:	f89a 3000 	ldrb.w	r3, [sl]
 80008f0:	2b2a      	cmp	r3, #42	; 0x2a
 80008f2:	d015      	beq.n	8000920 <_vfiprintf_r+0x120>
 80008f4:	9a07      	ldr	r2, [sp, #28]
 80008f6:	4654      	mov	r4, sl
 80008f8:	2000      	movs	r0, #0
 80008fa:	f04f 0c0a 	mov.w	ip, #10
 80008fe:	4621      	mov	r1, r4
 8000900:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000904:	3b30      	subs	r3, #48	; 0x30
 8000906:	2b09      	cmp	r3, #9
 8000908:	d94d      	bls.n	80009a6 <_vfiprintf_r+0x1a6>
 800090a:	b1b0      	cbz	r0, 800093a <_vfiprintf_r+0x13a>
 800090c:	9207      	str	r2, [sp, #28]
 800090e:	e014      	b.n	800093a <_vfiprintf_r+0x13a>
 8000910:	eba0 0308 	sub.w	r3, r0, r8
 8000914:	fa09 f303 	lsl.w	r3, r9, r3
 8000918:	4313      	orrs	r3, r2
 800091a:	9304      	str	r3, [sp, #16]
 800091c:	46a2      	mov	sl, r4
 800091e:	e7d2      	b.n	80008c6 <_vfiprintf_r+0xc6>
 8000920:	9b03      	ldr	r3, [sp, #12]
 8000922:	1d19      	adds	r1, r3, #4
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	9103      	str	r1, [sp, #12]
 8000928:	2b00      	cmp	r3, #0
 800092a:	bfbb      	ittet	lt
 800092c:	425b      	neglt	r3, r3
 800092e:	f042 0202 	orrlt.w	r2, r2, #2
 8000932:	9307      	strge	r3, [sp, #28]
 8000934:	9307      	strlt	r3, [sp, #28]
 8000936:	bfb8      	it	lt
 8000938:	9204      	strlt	r2, [sp, #16]
 800093a:	7823      	ldrb	r3, [r4, #0]
 800093c:	2b2e      	cmp	r3, #46	; 0x2e
 800093e:	d10c      	bne.n	800095a <_vfiprintf_r+0x15a>
 8000940:	7863      	ldrb	r3, [r4, #1]
 8000942:	2b2a      	cmp	r3, #42	; 0x2a
 8000944:	d134      	bne.n	80009b0 <_vfiprintf_r+0x1b0>
 8000946:	9b03      	ldr	r3, [sp, #12]
 8000948:	1d1a      	adds	r2, r3, #4
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	9203      	str	r2, [sp, #12]
 800094e:	2b00      	cmp	r3, #0
 8000950:	bfb8      	it	lt
 8000952:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8000956:	3402      	adds	r4, #2
 8000958:	9305      	str	r3, [sp, #20]
 800095a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8000a30 <_vfiprintf_r+0x230>
 800095e:	7821      	ldrb	r1, [r4, #0]
 8000960:	2203      	movs	r2, #3
 8000962:	4650      	mov	r0, sl
 8000964:	f7ff fc3c 	bl	80001e0 <memchr>
 8000968:	b138      	cbz	r0, 800097a <_vfiprintf_r+0x17a>
 800096a:	9b04      	ldr	r3, [sp, #16]
 800096c:	eba0 000a 	sub.w	r0, r0, sl
 8000970:	2240      	movs	r2, #64	; 0x40
 8000972:	4082      	lsls	r2, r0
 8000974:	4313      	orrs	r3, r2
 8000976:	3401      	adds	r4, #1
 8000978:	9304      	str	r3, [sp, #16]
 800097a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800097e:	4829      	ldr	r0, [pc, #164]	; (8000a24 <_vfiprintf_r+0x224>)
 8000980:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000984:	2206      	movs	r2, #6
 8000986:	f7ff fc2b 	bl	80001e0 <memchr>
 800098a:	2800      	cmp	r0, #0
 800098c:	d03f      	beq.n	8000a0e <_vfiprintf_r+0x20e>
 800098e:	4b26      	ldr	r3, [pc, #152]	; (8000a28 <_vfiprintf_r+0x228>)
 8000990:	bb1b      	cbnz	r3, 80009da <_vfiprintf_r+0x1da>
 8000992:	9b03      	ldr	r3, [sp, #12]
 8000994:	3307      	adds	r3, #7
 8000996:	f023 0307 	bic.w	r3, r3, #7
 800099a:	3308      	adds	r3, #8
 800099c:	9303      	str	r3, [sp, #12]
 800099e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80009a0:	443b      	add	r3, r7
 80009a2:	9309      	str	r3, [sp, #36]	; 0x24
 80009a4:	e768      	b.n	8000878 <_vfiprintf_r+0x78>
 80009a6:	fb0c 3202 	mla	r2, ip, r2, r3
 80009aa:	460c      	mov	r4, r1
 80009ac:	2001      	movs	r0, #1
 80009ae:	e7a6      	b.n	80008fe <_vfiprintf_r+0xfe>
 80009b0:	2300      	movs	r3, #0
 80009b2:	3401      	adds	r4, #1
 80009b4:	9305      	str	r3, [sp, #20]
 80009b6:	4619      	mov	r1, r3
 80009b8:	f04f 0c0a 	mov.w	ip, #10
 80009bc:	4620      	mov	r0, r4
 80009be:	f810 2b01 	ldrb.w	r2, [r0], #1
 80009c2:	3a30      	subs	r2, #48	; 0x30
 80009c4:	2a09      	cmp	r2, #9
 80009c6:	d903      	bls.n	80009d0 <_vfiprintf_r+0x1d0>
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d0c6      	beq.n	800095a <_vfiprintf_r+0x15a>
 80009cc:	9105      	str	r1, [sp, #20]
 80009ce:	e7c4      	b.n	800095a <_vfiprintf_r+0x15a>
 80009d0:	fb0c 2101 	mla	r1, ip, r1, r2
 80009d4:	4604      	mov	r4, r0
 80009d6:	2301      	movs	r3, #1
 80009d8:	e7f0      	b.n	80009bc <_vfiprintf_r+0x1bc>
 80009da:	ab03      	add	r3, sp, #12
 80009dc:	9300      	str	r3, [sp, #0]
 80009de:	462a      	mov	r2, r5
 80009e0:	4b12      	ldr	r3, [pc, #72]	; (8000a2c <_vfiprintf_r+0x22c>)
 80009e2:	a904      	add	r1, sp, #16
 80009e4:	4630      	mov	r0, r6
 80009e6:	f3af 8000 	nop.w
 80009ea:	4607      	mov	r7, r0
 80009ec:	1c78      	adds	r0, r7, #1
 80009ee:	d1d6      	bne.n	800099e <_vfiprintf_r+0x19e>
 80009f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80009f2:	07d9      	lsls	r1, r3, #31
 80009f4:	d405      	bmi.n	8000a02 <_vfiprintf_r+0x202>
 80009f6:	89ab      	ldrh	r3, [r5, #12]
 80009f8:	059a      	lsls	r2, r3, #22
 80009fa:	d402      	bmi.n	8000a02 <_vfiprintf_r+0x202>
 80009fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80009fe:	f7ff fed4 	bl	80007aa <__retarget_lock_release_recursive>
 8000a02:	89ab      	ldrh	r3, [r5, #12]
 8000a04:	065b      	lsls	r3, r3, #25
 8000a06:	f53f af1d 	bmi.w	8000844 <_vfiprintf_r+0x44>
 8000a0a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000a0c:	e71c      	b.n	8000848 <_vfiprintf_r+0x48>
 8000a0e:	ab03      	add	r3, sp, #12
 8000a10:	9300      	str	r3, [sp, #0]
 8000a12:	462a      	mov	r2, r5
 8000a14:	4b05      	ldr	r3, [pc, #20]	; (8000a2c <_vfiprintf_r+0x22c>)
 8000a16:	a904      	add	r1, sp, #16
 8000a18:	4630      	mov	r0, r6
 8000a1a:	f000 f919 	bl	8000c50 <_printf_i>
 8000a1e:	e7e4      	b.n	80009ea <_vfiprintf_r+0x1ea>
 8000a20:	08001430 	.word	0x08001430
 8000a24:	0800143a 	.word	0x0800143a
 8000a28:	00000000 	.word	0x00000000
 8000a2c:	080007db 	.word	0x080007db
 8000a30:	08001436 	.word	0x08001436

08000a34 <sbrk_aligned>:
 8000a34:	b570      	push	{r4, r5, r6, lr}
 8000a36:	4e0e      	ldr	r6, [pc, #56]	; (8000a70 <sbrk_aligned+0x3c>)
 8000a38:	460c      	mov	r4, r1
 8000a3a:	6831      	ldr	r1, [r6, #0]
 8000a3c:	4605      	mov	r5, r0
 8000a3e:	b911      	cbnz	r1, 8000a46 <sbrk_aligned+0x12>
 8000a40:	f000 fc72 	bl	8001328 <_sbrk_r>
 8000a44:	6030      	str	r0, [r6, #0]
 8000a46:	4621      	mov	r1, r4
 8000a48:	4628      	mov	r0, r5
 8000a4a:	f000 fc6d 	bl	8001328 <_sbrk_r>
 8000a4e:	1c43      	adds	r3, r0, #1
 8000a50:	d00a      	beq.n	8000a68 <sbrk_aligned+0x34>
 8000a52:	1cc4      	adds	r4, r0, #3
 8000a54:	f024 0403 	bic.w	r4, r4, #3
 8000a58:	42a0      	cmp	r0, r4
 8000a5a:	d007      	beq.n	8000a6c <sbrk_aligned+0x38>
 8000a5c:	1a21      	subs	r1, r4, r0
 8000a5e:	4628      	mov	r0, r5
 8000a60:	f000 fc62 	bl	8001328 <_sbrk_r>
 8000a64:	3001      	adds	r0, #1
 8000a66:	d101      	bne.n	8000a6c <sbrk_aligned+0x38>
 8000a68:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8000a6c:	4620      	mov	r0, r4
 8000a6e:	bd70      	pop	{r4, r5, r6, pc}
 8000a70:	200001c4 	.word	0x200001c4

08000a74 <_malloc_r>:
 8000a74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000a78:	1ccd      	adds	r5, r1, #3
 8000a7a:	f025 0503 	bic.w	r5, r5, #3
 8000a7e:	3508      	adds	r5, #8
 8000a80:	2d0c      	cmp	r5, #12
 8000a82:	bf38      	it	cc
 8000a84:	250c      	movcc	r5, #12
 8000a86:	2d00      	cmp	r5, #0
 8000a88:	4607      	mov	r7, r0
 8000a8a:	db01      	blt.n	8000a90 <_malloc_r+0x1c>
 8000a8c:	42a9      	cmp	r1, r5
 8000a8e:	d905      	bls.n	8000a9c <_malloc_r+0x28>
 8000a90:	230c      	movs	r3, #12
 8000a92:	603b      	str	r3, [r7, #0]
 8000a94:	2600      	movs	r6, #0
 8000a96:	4630      	mov	r0, r6
 8000a98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000a9c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8000b70 <_malloc_r+0xfc>
 8000aa0:	f000 faa6 	bl	8000ff0 <__malloc_lock>
 8000aa4:	f8d8 3000 	ldr.w	r3, [r8]
 8000aa8:	461c      	mov	r4, r3
 8000aaa:	bb5c      	cbnz	r4, 8000b04 <_malloc_r+0x90>
 8000aac:	4629      	mov	r1, r5
 8000aae:	4638      	mov	r0, r7
 8000ab0:	f7ff ffc0 	bl	8000a34 <sbrk_aligned>
 8000ab4:	1c43      	adds	r3, r0, #1
 8000ab6:	4604      	mov	r4, r0
 8000ab8:	d155      	bne.n	8000b66 <_malloc_r+0xf2>
 8000aba:	f8d8 4000 	ldr.w	r4, [r8]
 8000abe:	4626      	mov	r6, r4
 8000ac0:	2e00      	cmp	r6, #0
 8000ac2:	d145      	bne.n	8000b50 <_malloc_r+0xdc>
 8000ac4:	2c00      	cmp	r4, #0
 8000ac6:	d048      	beq.n	8000b5a <_malloc_r+0xe6>
 8000ac8:	6823      	ldr	r3, [r4, #0]
 8000aca:	4631      	mov	r1, r6
 8000acc:	4638      	mov	r0, r7
 8000ace:	eb04 0903 	add.w	r9, r4, r3
 8000ad2:	f000 fc29 	bl	8001328 <_sbrk_r>
 8000ad6:	4581      	cmp	r9, r0
 8000ad8:	d13f      	bne.n	8000b5a <_malloc_r+0xe6>
 8000ada:	6821      	ldr	r1, [r4, #0]
 8000adc:	1a6d      	subs	r5, r5, r1
 8000ade:	4629      	mov	r1, r5
 8000ae0:	4638      	mov	r0, r7
 8000ae2:	f7ff ffa7 	bl	8000a34 <sbrk_aligned>
 8000ae6:	3001      	adds	r0, #1
 8000ae8:	d037      	beq.n	8000b5a <_malloc_r+0xe6>
 8000aea:	6823      	ldr	r3, [r4, #0]
 8000aec:	442b      	add	r3, r5
 8000aee:	6023      	str	r3, [r4, #0]
 8000af0:	f8d8 3000 	ldr.w	r3, [r8]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d038      	beq.n	8000b6a <_malloc_r+0xf6>
 8000af8:	685a      	ldr	r2, [r3, #4]
 8000afa:	42a2      	cmp	r2, r4
 8000afc:	d12b      	bne.n	8000b56 <_malloc_r+0xe2>
 8000afe:	2200      	movs	r2, #0
 8000b00:	605a      	str	r2, [r3, #4]
 8000b02:	e00f      	b.n	8000b24 <_malloc_r+0xb0>
 8000b04:	6822      	ldr	r2, [r4, #0]
 8000b06:	1b52      	subs	r2, r2, r5
 8000b08:	d41f      	bmi.n	8000b4a <_malloc_r+0xd6>
 8000b0a:	2a0b      	cmp	r2, #11
 8000b0c:	d917      	bls.n	8000b3e <_malloc_r+0xca>
 8000b0e:	1961      	adds	r1, r4, r5
 8000b10:	42a3      	cmp	r3, r4
 8000b12:	6025      	str	r5, [r4, #0]
 8000b14:	bf18      	it	ne
 8000b16:	6059      	strne	r1, [r3, #4]
 8000b18:	6863      	ldr	r3, [r4, #4]
 8000b1a:	bf08      	it	eq
 8000b1c:	f8c8 1000 	streq.w	r1, [r8]
 8000b20:	5162      	str	r2, [r4, r5]
 8000b22:	604b      	str	r3, [r1, #4]
 8000b24:	4638      	mov	r0, r7
 8000b26:	f104 060b 	add.w	r6, r4, #11
 8000b2a:	f000 fa67 	bl	8000ffc <__malloc_unlock>
 8000b2e:	f026 0607 	bic.w	r6, r6, #7
 8000b32:	1d23      	adds	r3, r4, #4
 8000b34:	1af2      	subs	r2, r6, r3
 8000b36:	d0ae      	beq.n	8000a96 <_malloc_r+0x22>
 8000b38:	1b9b      	subs	r3, r3, r6
 8000b3a:	50a3      	str	r3, [r4, r2]
 8000b3c:	e7ab      	b.n	8000a96 <_malloc_r+0x22>
 8000b3e:	42a3      	cmp	r3, r4
 8000b40:	6862      	ldr	r2, [r4, #4]
 8000b42:	d1dd      	bne.n	8000b00 <_malloc_r+0x8c>
 8000b44:	f8c8 2000 	str.w	r2, [r8]
 8000b48:	e7ec      	b.n	8000b24 <_malloc_r+0xb0>
 8000b4a:	4623      	mov	r3, r4
 8000b4c:	6864      	ldr	r4, [r4, #4]
 8000b4e:	e7ac      	b.n	8000aaa <_malloc_r+0x36>
 8000b50:	4634      	mov	r4, r6
 8000b52:	6876      	ldr	r6, [r6, #4]
 8000b54:	e7b4      	b.n	8000ac0 <_malloc_r+0x4c>
 8000b56:	4613      	mov	r3, r2
 8000b58:	e7cc      	b.n	8000af4 <_malloc_r+0x80>
 8000b5a:	230c      	movs	r3, #12
 8000b5c:	603b      	str	r3, [r7, #0]
 8000b5e:	4638      	mov	r0, r7
 8000b60:	f000 fa4c 	bl	8000ffc <__malloc_unlock>
 8000b64:	e797      	b.n	8000a96 <_malloc_r+0x22>
 8000b66:	6025      	str	r5, [r4, #0]
 8000b68:	e7dc      	b.n	8000b24 <_malloc_r+0xb0>
 8000b6a:	605b      	str	r3, [r3, #4]
 8000b6c:	deff      	udf	#255	; 0xff
 8000b6e:	bf00      	nop
 8000b70:	200001c0 	.word	0x200001c0

08000b74 <_printf_common>:
 8000b74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b78:	4616      	mov	r6, r2
 8000b7a:	4699      	mov	r9, r3
 8000b7c:	688a      	ldr	r2, [r1, #8]
 8000b7e:	690b      	ldr	r3, [r1, #16]
 8000b80:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000b84:	4293      	cmp	r3, r2
 8000b86:	bfb8      	it	lt
 8000b88:	4613      	movlt	r3, r2
 8000b8a:	6033      	str	r3, [r6, #0]
 8000b8c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000b90:	4607      	mov	r7, r0
 8000b92:	460c      	mov	r4, r1
 8000b94:	b10a      	cbz	r2, 8000b9a <_printf_common+0x26>
 8000b96:	3301      	adds	r3, #1
 8000b98:	6033      	str	r3, [r6, #0]
 8000b9a:	6823      	ldr	r3, [r4, #0]
 8000b9c:	0699      	lsls	r1, r3, #26
 8000b9e:	bf42      	ittt	mi
 8000ba0:	6833      	ldrmi	r3, [r6, #0]
 8000ba2:	3302      	addmi	r3, #2
 8000ba4:	6033      	strmi	r3, [r6, #0]
 8000ba6:	6825      	ldr	r5, [r4, #0]
 8000ba8:	f015 0506 	ands.w	r5, r5, #6
 8000bac:	d106      	bne.n	8000bbc <_printf_common+0x48>
 8000bae:	f104 0a19 	add.w	sl, r4, #25
 8000bb2:	68e3      	ldr	r3, [r4, #12]
 8000bb4:	6832      	ldr	r2, [r6, #0]
 8000bb6:	1a9b      	subs	r3, r3, r2
 8000bb8:	42ab      	cmp	r3, r5
 8000bba:	dc26      	bgt.n	8000c0a <_printf_common+0x96>
 8000bbc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000bc0:	1e13      	subs	r3, r2, #0
 8000bc2:	6822      	ldr	r2, [r4, #0]
 8000bc4:	bf18      	it	ne
 8000bc6:	2301      	movne	r3, #1
 8000bc8:	0692      	lsls	r2, r2, #26
 8000bca:	d42b      	bmi.n	8000c24 <_printf_common+0xb0>
 8000bcc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000bd0:	4649      	mov	r1, r9
 8000bd2:	4638      	mov	r0, r7
 8000bd4:	47c0      	blx	r8
 8000bd6:	3001      	adds	r0, #1
 8000bd8:	d01e      	beq.n	8000c18 <_printf_common+0xa4>
 8000bda:	6823      	ldr	r3, [r4, #0]
 8000bdc:	6922      	ldr	r2, [r4, #16]
 8000bde:	f003 0306 	and.w	r3, r3, #6
 8000be2:	2b04      	cmp	r3, #4
 8000be4:	bf02      	ittt	eq
 8000be6:	68e5      	ldreq	r5, [r4, #12]
 8000be8:	6833      	ldreq	r3, [r6, #0]
 8000bea:	1aed      	subeq	r5, r5, r3
 8000bec:	68a3      	ldr	r3, [r4, #8]
 8000bee:	bf0c      	ite	eq
 8000bf0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000bf4:	2500      	movne	r5, #0
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	bfc4      	itt	gt
 8000bfa:	1a9b      	subgt	r3, r3, r2
 8000bfc:	18ed      	addgt	r5, r5, r3
 8000bfe:	2600      	movs	r6, #0
 8000c00:	341a      	adds	r4, #26
 8000c02:	42b5      	cmp	r5, r6
 8000c04:	d11a      	bne.n	8000c3c <_printf_common+0xc8>
 8000c06:	2000      	movs	r0, #0
 8000c08:	e008      	b.n	8000c1c <_printf_common+0xa8>
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	4652      	mov	r2, sl
 8000c0e:	4649      	mov	r1, r9
 8000c10:	4638      	mov	r0, r7
 8000c12:	47c0      	blx	r8
 8000c14:	3001      	adds	r0, #1
 8000c16:	d103      	bne.n	8000c20 <_printf_common+0xac>
 8000c18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c20:	3501      	adds	r5, #1
 8000c22:	e7c6      	b.n	8000bb2 <_printf_common+0x3e>
 8000c24:	18e1      	adds	r1, r4, r3
 8000c26:	1c5a      	adds	r2, r3, #1
 8000c28:	2030      	movs	r0, #48	; 0x30
 8000c2a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000c2e:	4422      	add	r2, r4
 8000c30:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000c34:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000c38:	3302      	adds	r3, #2
 8000c3a:	e7c7      	b.n	8000bcc <_printf_common+0x58>
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	4622      	mov	r2, r4
 8000c40:	4649      	mov	r1, r9
 8000c42:	4638      	mov	r0, r7
 8000c44:	47c0      	blx	r8
 8000c46:	3001      	adds	r0, #1
 8000c48:	d0e6      	beq.n	8000c18 <_printf_common+0xa4>
 8000c4a:	3601      	adds	r6, #1
 8000c4c:	e7d9      	b.n	8000c02 <_printf_common+0x8e>
	...

08000c50 <_printf_i>:
 8000c50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000c54:	7e0f      	ldrb	r7, [r1, #24]
 8000c56:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8000c58:	2f78      	cmp	r7, #120	; 0x78
 8000c5a:	4691      	mov	r9, r2
 8000c5c:	4680      	mov	r8, r0
 8000c5e:	460c      	mov	r4, r1
 8000c60:	469a      	mov	sl, r3
 8000c62:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8000c66:	d807      	bhi.n	8000c78 <_printf_i+0x28>
 8000c68:	2f62      	cmp	r7, #98	; 0x62
 8000c6a:	d80a      	bhi.n	8000c82 <_printf_i+0x32>
 8000c6c:	2f00      	cmp	r7, #0
 8000c6e:	f000 80d4 	beq.w	8000e1a <_printf_i+0x1ca>
 8000c72:	2f58      	cmp	r7, #88	; 0x58
 8000c74:	f000 80c0 	beq.w	8000df8 <_printf_i+0x1a8>
 8000c78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000c7c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8000c80:	e03a      	b.n	8000cf8 <_printf_i+0xa8>
 8000c82:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8000c86:	2b15      	cmp	r3, #21
 8000c88:	d8f6      	bhi.n	8000c78 <_printf_i+0x28>
 8000c8a:	a101      	add	r1, pc, #4	; (adr r1, 8000c90 <_printf_i+0x40>)
 8000c8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000c90:	08000ce9 	.word	0x08000ce9
 8000c94:	08000cfd 	.word	0x08000cfd
 8000c98:	08000c79 	.word	0x08000c79
 8000c9c:	08000c79 	.word	0x08000c79
 8000ca0:	08000c79 	.word	0x08000c79
 8000ca4:	08000c79 	.word	0x08000c79
 8000ca8:	08000cfd 	.word	0x08000cfd
 8000cac:	08000c79 	.word	0x08000c79
 8000cb0:	08000c79 	.word	0x08000c79
 8000cb4:	08000c79 	.word	0x08000c79
 8000cb8:	08000c79 	.word	0x08000c79
 8000cbc:	08000e01 	.word	0x08000e01
 8000cc0:	08000d29 	.word	0x08000d29
 8000cc4:	08000dbb 	.word	0x08000dbb
 8000cc8:	08000c79 	.word	0x08000c79
 8000ccc:	08000c79 	.word	0x08000c79
 8000cd0:	08000e23 	.word	0x08000e23
 8000cd4:	08000c79 	.word	0x08000c79
 8000cd8:	08000d29 	.word	0x08000d29
 8000cdc:	08000c79 	.word	0x08000c79
 8000ce0:	08000c79 	.word	0x08000c79
 8000ce4:	08000dc3 	.word	0x08000dc3
 8000ce8:	682b      	ldr	r3, [r5, #0]
 8000cea:	1d1a      	adds	r2, r3, #4
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	602a      	str	r2, [r5, #0]
 8000cf0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000cf4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	e09f      	b.n	8000e3c <_printf_i+0x1ec>
 8000cfc:	6820      	ldr	r0, [r4, #0]
 8000cfe:	682b      	ldr	r3, [r5, #0]
 8000d00:	0607      	lsls	r7, r0, #24
 8000d02:	f103 0104 	add.w	r1, r3, #4
 8000d06:	6029      	str	r1, [r5, #0]
 8000d08:	d501      	bpl.n	8000d0e <_printf_i+0xbe>
 8000d0a:	681e      	ldr	r6, [r3, #0]
 8000d0c:	e003      	b.n	8000d16 <_printf_i+0xc6>
 8000d0e:	0646      	lsls	r6, r0, #25
 8000d10:	d5fb      	bpl.n	8000d0a <_printf_i+0xba>
 8000d12:	f9b3 6000 	ldrsh.w	r6, [r3]
 8000d16:	2e00      	cmp	r6, #0
 8000d18:	da03      	bge.n	8000d22 <_printf_i+0xd2>
 8000d1a:	232d      	movs	r3, #45	; 0x2d
 8000d1c:	4276      	negs	r6, r6
 8000d1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000d22:	485a      	ldr	r0, [pc, #360]	; (8000e8c <_printf_i+0x23c>)
 8000d24:	230a      	movs	r3, #10
 8000d26:	e012      	b.n	8000d4e <_printf_i+0xfe>
 8000d28:	682b      	ldr	r3, [r5, #0]
 8000d2a:	6820      	ldr	r0, [r4, #0]
 8000d2c:	1d19      	adds	r1, r3, #4
 8000d2e:	6029      	str	r1, [r5, #0]
 8000d30:	0605      	lsls	r5, r0, #24
 8000d32:	d501      	bpl.n	8000d38 <_printf_i+0xe8>
 8000d34:	681e      	ldr	r6, [r3, #0]
 8000d36:	e002      	b.n	8000d3e <_printf_i+0xee>
 8000d38:	0641      	lsls	r1, r0, #25
 8000d3a:	d5fb      	bpl.n	8000d34 <_printf_i+0xe4>
 8000d3c:	881e      	ldrh	r6, [r3, #0]
 8000d3e:	4853      	ldr	r0, [pc, #332]	; (8000e8c <_printf_i+0x23c>)
 8000d40:	2f6f      	cmp	r7, #111	; 0x6f
 8000d42:	bf0c      	ite	eq
 8000d44:	2308      	moveq	r3, #8
 8000d46:	230a      	movne	r3, #10
 8000d48:	2100      	movs	r1, #0
 8000d4a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8000d4e:	6865      	ldr	r5, [r4, #4]
 8000d50:	60a5      	str	r5, [r4, #8]
 8000d52:	2d00      	cmp	r5, #0
 8000d54:	bfa2      	ittt	ge
 8000d56:	6821      	ldrge	r1, [r4, #0]
 8000d58:	f021 0104 	bicge.w	r1, r1, #4
 8000d5c:	6021      	strge	r1, [r4, #0]
 8000d5e:	b90e      	cbnz	r6, 8000d64 <_printf_i+0x114>
 8000d60:	2d00      	cmp	r5, #0
 8000d62:	d04b      	beq.n	8000dfc <_printf_i+0x1ac>
 8000d64:	4615      	mov	r5, r2
 8000d66:	fbb6 f1f3 	udiv	r1, r6, r3
 8000d6a:	fb03 6711 	mls	r7, r3, r1, r6
 8000d6e:	5dc7      	ldrb	r7, [r0, r7]
 8000d70:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8000d74:	4637      	mov	r7, r6
 8000d76:	42bb      	cmp	r3, r7
 8000d78:	460e      	mov	r6, r1
 8000d7a:	d9f4      	bls.n	8000d66 <_printf_i+0x116>
 8000d7c:	2b08      	cmp	r3, #8
 8000d7e:	d10b      	bne.n	8000d98 <_printf_i+0x148>
 8000d80:	6823      	ldr	r3, [r4, #0]
 8000d82:	07de      	lsls	r6, r3, #31
 8000d84:	d508      	bpl.n	8000d98 <_printf_i+0x148>
 8000d86:	6923      	ldr	r3, [r4, #16]
 8000d88:	6861      	ldr	r1, [r4, #4]
 8000d8a:	4299      	cmp	r1, r3
 8000d8c:	bfde      	ittt	le
 8000d8e:	2330      	movle	r3, #48	; 0x30
 8000d90:	f805 3c01 	strble.w	r3, [r5, #-1]
 8000d94:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8000d98:	1b52      	subs	r2, r2, r5
 8000d9a:	6122      	str	r2, [r4, #16]
 8000d9c:	f8cd a000 	str.w	sl, [sp]
 8000da0:	464b      	mov	r3, r9
 8000da2:	aa03      	add	r2, sp, #12
 8000da4:	4621      	mov	r1, r4
 8000da6:	4640      	mov	r0, r8
 8000da8:	f7ff fee4 	bl	8000b74 <_printf_common>
 8000dac:	3001      	adds	r0, #1
 8000dae:	d14a      	bne.n	8000e46 <_printf_i+0x1f6>
 8000db0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000db4:	b004      	add	sp, #16
 8000db6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dba:	6823      	ldr	r3, [r4, #0]
 8000dbc:	f043 0320 	orr.w	r3, r3, #32
 8000dc0:	6023      	str	r3, [r4, #0]
 8000dc2:	4833      	ldr	r0, [pc, #204]	; (8000e90 <_printf_i+0x240>)
 8000dc4:	2778      	movs	r7, #120	; 0x78
 8000dc6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8000dca:	6823      	ldr	r3, [r4, #0]
 8000dcc:	6829      	ldr	r1, [r5, #0]
 8000dce:	061f      	lsls	r7, r3, #24
 8000dd0:	f851 6b04 	ldr.w	r6, [r1], #4
 8000dd4:	d402      	bmi.n	8000ddc <_printf_i+0x18c>
 8000dd6:	065f      	lsls	r7, r3, #25
 8000dd8:	bf48      	it	mi
 8000dda:	b2b6      	uxthmi	r6, r6
 8000ddc:	07df      	lsls	r7, r3, #31
 8000dde:	bf48      	it	mi
 8000de0:	f043 0320 	orrmi.w	r3, r3, #32
 8000de4:	6029      	str	r1, [r5, #0]
 8000de6:	bf48      	it	mi
 8000de8:	6023      	strmi	r3, [r4, #0]
 8000dea:	b91e      	cbnz	r6, 8000df4 <_printf_i+0x1a4>
 8000dec:	6823      	ldr	r3, [r4, #0]
 8000dee:	f023 0320 	bic.w	r3, r3, #32
 8000df2:	6023      	str	r3, [r4, #0]
 8000df4:	2310      	movs	r3, #16
 8000df6:	e7a7      	b.n	8000d48 <_printf_i+0xf8>
 8000df8:	4824      	ldr	r0, [pc, #144]	; (8000e8c <_printf_i+0x23c>)
 8000dfa:	e7e4      	b.n	8000dc6 <_printf_i+0x176>
 8000dfc:	4615      	mov	r5, r2
 8000dfe:	e7bd      	b.n	8000d7c <_printf_i+0x12c>
 8000e00:	682b      	ldr	r3, [r5, #0]
 8000e02:	6826      	ldr	r6, [r4, #0]
 8000e04:	6961      	ldr	r1, [r4, #20]
 8000e06:	1d18      	adds	r0, r3, #4
 8000e08:	6028      	str	r0, [r5, #0]
 8000e0a:	0635      	lsls	r5, r6, #24
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	d501      	bpl.n	8000e14 <_printf_i+0x1c4>
 8000e10:	6019      	str	r1, [r3, #0]
 8000e12:	e002      	b.n	8000e1a <_printf_i+0x1ca>
 8000e14:	0670      	lsls	r0, r6, #25
 8000e16:	d5fb      	bpl.n	8000e10 <_printf_i+0x1c0>
 8000e18:	8019      	strh	r1, [r3, #0]
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	6123      	str	r3, [r4, #16]
 8000e1e:	4615      	mov	r5, r2
 8000e20:	e7bc      	b.n	8000d9c <_printf_i+0x14c>
 8000e22:	682b      	ldr	r3, [r5, #0]
 8000e24:	1d1a      	adds	r2, r3, #4
 8000e26:	602a      	str	r2, [r5, #0]
 8000e28:	681d      	ldr	r5, [r3, #0]
 8000e2a:	6862      	ldr	r2, [r4, #4]
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	4628      	mov	r0, r5
 8000e30:	f7ff f9d6 	bl	80001e0 <memchr>
 8000e34:	b108      	cbz	r0, 8000e3a <_printf_i+0x1ea>
 8000e36:	1b40      	subs	r0, r0, r5
 8000e38:	6060      	str	r0, [r4, #4]
 8000e3a:	6863      	ldr	r3, [r4, #4]
 8000e3c:	6123      	str	r3, [r4, #16]
 8000e3e:	2300      	movs	r3, #0
 8000e40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000e44:	e7aa      	b.n	8000d9c <_printf_i+0x14c>
 8000e46:	6923      	ldr	r3, [r4, #16]
 8000e48:	462a      	mov	r2, r5
 8000e4a:	4649      	mov	r1, r9
 8000e4c:	4640      	mov	r0, r8
 8000e4e:	47d0      	blx	sl
 8000e50:	3001      	adds	r0, #1
 8000e52:	d0ad      	beq.n	8000db0 <_printf_i+0x160>
 8000e54:	6823      	ldr	r3, [r4, #0]
 8000e56:	079b      	lsls	r3, r3, #30
 8000e58:	d413      	bmi.n	8000e82 <_printf_i+0x232>
 8000e5a:	68e0      	ldr	r0, [r4, #12]
 8000e5c:	9b03      	ldr	r3, [sp, #12]
 8000e5e:	4298      	cmp	r0, r3
 8000e60:	bfb8      	it	lt
 8000e62:	4618      	movlt	r0, r3
 8000e64:	e7a6      	b.n	8000db4 <_printf_i+0x164>
 8000e66:	2301      	movs	r3, #1
 8000e68:	4632      	mov	r2, r6
 8000e6a:	4649      	mov	r1, r9
 8000e6c:	4640      	mov	r0, r8
 8000e6e:	47d0      	blx	sl
 8000e70:	3001      	adds	r0, #1
 8000e72:	d09d      	beq.n	8000db0 <_printf_i+0x160>
 8000e74:	3501      	adds	r5, #1
 8000e76:	68e3      	ldr	r3, [r4, #12]
 8000e78:	9903      	ldr	r1, [sp, #12]
 8000e7a:	1a5b      	subs	r3, r3, r1
 8000e7c:	42ab      	cmp	r3, r5
 8000e7e:	dcf2      	bgt.n	8000e66 <_printf_i+0x216>
 8000e80:	e7eb      	b.n	8000e5a <_printf_i+0x20a>
 8000e82:	2500      	movs	r5, #0
 8000e84:	f104 0619 	add.w	r6, r4, #25
 8000e88:	e7f5      	b.n	8000e76 <_printf_i+0x226>
 8000e8a:	bf00      	nop
 8000e8c:	08001441 	.word	0x08001441
 8000e90:	08001452 	.word	0x08001452

08000e94 <__sflush_r>:
 8000e94:	898a      	ldrh	r2, [r1, #12]
 8000e96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e9a:	4605      	mov	r5, r0
 8000e9c:	0710      	lsls	r0, r2, #28
 8000e9e:	460c      	mov	r4, r1
 8000ea0:	d458      	bmi.n	8000f54 <__sflush_r+0xc0>
 8000ea2:	684b      	ldr	r3, [r1, #4]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	dc05      	bgt.n	8000eb4 <__sflush_r+0x20>
 8000ea8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	dc02      	bgt.n	8000eb4 <__sflush_r+0x20>
 8000eae:	2000      	movs	r0, #0
 8000eb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000eb4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000eb6:	2e00      	cmp	r6, #0
 8000eb8:	d0f9      	beq.n	8000eae <__sflush_r+0x1a>
 8000eba:	2300      	movs	r3, #0
 8000ebc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000ec0:	682f      	ldr	r7, [r5, #0]
 8000ec2:	6a21      	ldr	r1, [r4, #32]
 8000ec4:	602b      	str	r3, [r5, #0]
 8000ec6:	d032      	beq.n	8000f2e <__sflush_r+0x9a>
 8000ec8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000eca:	89a3      	ldrh	r3, [r4, #12]
 8000ecc:	075a      	lsls	r2, r3, #29
 8000ece:	d505      	bpl.n	8000edc <__sflush_r+0x48>
 8000ed0:	6863      	ldr	r3, [r4, #4]
 8000ed2:	1ac0      	subs	r0, r0, r3
 8000ed4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000ed6:	b10b      	cbz	r3, 8000edc <__sflush_r+0x48>
 8000ed8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000eda:	1ac0      	subs	r0, r0, r3
 8000edc:	2300      	movs	r3, #0
 8000ede:	4602      	mov	r2, r0
 8000ee0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000ee2:	6a21      	ldr	r1, [r4, #32]
 8000ee4:	4628      	mov	r0, r5
 8000ee6:	47b0      	blx	r6
 8000ee8:	1c43      	adds	r3, r0, #1
 8000eea:	89a3      	ldrh	r3, [r4, #12]
 8000eec:	d106      	bne.n	8000efc <__sflush_r+0x68>
 8000eee:	6829      	ldr	r1, [r5, #0]
 8000ef0:	291d      	cmp	r1, #29
 8000ef2:	d82b      	bhi.n	8000f4c <__sflush_r+0xb8>
 8000ef4:	4a29      	ldr	r2, [pc, #164]	; (8000f9c <__sflush_r+0x108>)
 8000ef6:	410a      	asrs	r2, r1
 8000ef8:	07d6      	lsls	r6, r2, #31
 8000efa:	d427      	bmi.n	8000f4c <__sflush_r+0xb8>
 8000efc:	2200      	movs	r2, #0
 8000efe:	6062      	str	r2, [r4, #4]
 8000f00:	04d9      	lsls	r1, r3, #19
 8000f02:	6922      	ldr	r2, [r4, #16]
 8000f04:	6022      	str	r2, [r4, #0]
 8000f06:	d504      	bpl.n	8000f12 <__sflush_r+0x7e>
 8000f08:	1c42      	adds	r2, r0, #1
 8000f0a:	d101      	bne.n	8000f10 <__sflush_r+0x7c>
 8000f0c:	682b      	ldr	r3, [r5, #0]
 8000f0e:	b903      	cbnz	r3, 8000f12 <__sflush_r+0x7e>
 8000f10:	6560      	str	r0, [r4, #84]	; 0x54
 8000f12:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000f14:	602f      	str	r7, [r5, #0]
 8000f16:	2900      	cmp	r1, #0
 8000f18:	d0c9      	beq.n	8000eae <__sflush_r+0x1a>
 8000f1a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000f1e:	4299      	cmp	r1, r3
 8000f20:	d002      	beq.n	8000f28 <__sflush_r+0x94>
 8000f22:	4628      	mov	r0, r5
 8000f24:	f000 fa22 	bl	800136c <_free_r>
 8000f28:	2000      	movs	r0, #0
 8000f2a:	6360      	str	r0, [r4, #52]	; 0x34
 8000f2c:	e7c0      	b.n	8000eb0 <__sflush_r+0x1c>
 8000f2e:	2301      	movs	r3, #1
 8000f30:	4628      	mov	r0, r5
 8000f32:	47b0      	blx	r6
 8000f34:	1c41      	adds	r1, r0, #1
 8000f36:	d1c8      	bne.n	8000eca <__sflush_r+0x36>
 8000f38:	682b      	ldr	r3, [r5, #0]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d0c5      	beq.n	8000eca <__sflush_r+0x36>
 8000f3e:	2b1d      	cmp	r3, #29
 8000f40:	d001      	beq.n	8000f46 <__sflush_r+0xb2>
 8000f42:	2b16      	cmp	r3, #22
 8000f44:	d101      	bne.n	8000f4a <__sflush_r+0xb6>
 8000f46:	602f      	str	r7, [r5, #0]
 8000f48:	e7b1      	b.n	8000eae <__sflush_r+0x1a>
 8000f4a:	89a3      	ldrh	r3, [r4, #12]
 8000f4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f50:	81a3      	strh	r3, [r4, #12]
 8000f52:	e7ad      	b.n	8000eb0 <__sflush_r+0x1c>
 8000f54:	690f      	ldr	r7, [r1, #16]
 8000f56:	2f00      	cmp	r7, #0
 8000f58:	d0a9      	beq.n	8000eae <__sflush_r+0x1a>
 8000f5a:	0793      	lsls	r3, r2, #30
 8000f5c:	680e      	ldr	r6, [r1, #0]
 8000f5e:	bf08      	it	eq
 8000f60:	694b      	ldreq	r3, [r1, #20]
 8000f62:	600f      	str	r7, [r1, #0]
 8000f64:	bf18      	it	ne
 8000f66:	2300      	movne	r3, #0
 8000f68:	eba6 0807 	sub.w	r8, r6, r7
 8000f6c:	608b      	str	r3, [r1, #8]
 8000f6e:	f1b8 0f00 	cmp.w	r8, #0
 8000f72:	dd9c      	ble.n	8000eae <__sflush_r+0x1a>
 8000f74:	6a21      	ldr	r1, [r4, #32]
 8000f76:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000f78:	4643      	mov	r3, r8
 8000f7a:	463a      	mov	r2, r7
 8000f7c:	4628      	mov	r0, r5
 8000f7e:	47b0      	blx	r6
 8000f80:	2800      	cmp	r0, #0
 8000f82:	dc06      	bgt.n	8000f92 <__sflush_r+0xfe>
 8000f84:	89a3      	ldrh	r3, [r4, #12]
 8000f86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f8a:	81a3      	strh	r3, [r4, #12]
 8000f8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f90:	e78e      	b.n	8000eb0 <__sflush_r+0x1c>
 8000f92:	4407      	add	r7, r0
 8000f94:	eba8 0800 	sub.w	r8, r8, r0
 8000f98:	e7e9      	b.n	8000f6e <__sflush_r+0xda>
 8000f9a:	bf00      	nop
 8000f9c:	dfbffffe 	.word	0xdfbffffe

08000fa0 <_fflush_r>:
 8000fa0:	b538      	push	{r3, r4, r5, lr}
 8000fa2:	690b      	ldr	r3, [r1, #16]
 8000fa4:	4605      	mov	r5, r0
 8000fa6:	460c      	mov	r4, r1
 8000fa8:	b913      	cbnz	r3, 8000fb0 <_fflush_r+0x10>
 8000faa:	2500      	movs	r5, #0
 8000fac:	4628      	mov	r0, r5
 8000fae:	bd38      	pop	{r3, r4, r5, pc}
 8000fb0:	b118      	cbz	r0, 8000fba <_fflush_r+0x1a>
 8000fb2:	6a03      	ldr	r3, [r0, #32]
 8000fb4:	b90b      	cbnz	r3, 8000fba <_fflush_r+0x1a>
 8000fb6:	f7ff fb7d 	bl	80006b4 <__sinit>
 8000fba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d0f3      	beq.n	8000faa <_fflush_r+0xa>
 8000fc2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000fc4:	07d0      	lsls	r0, r2, #31
 8000fc6:	d404      	bmi.n	8000fd2 <_fflush_r+0x32>
 8000fc8:	0599      	lsls	r1, r3, #22
 8000fca:	d402      	bmi.n	8000fd2 <_fflush_r+0x32>
 8000fcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000fce:	f7ff fbeb 	bl	80007a8 <__retarget_lock_acquire_recursive>
 8000fd2:	4628      	mov	r0, r5
 8000fd4:	4621      	mov	r1, r4
 8000fd6:	f7ff ff5d 	bl	8000e94 <__sflush_r>
 8000fda:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000fdc:	07da      	lsls	r2, r3, #31
 8000fde:	4605      	mov	r5, r0
 8000fe0:	d4e4      	bmi.n	8000fac <_fflush_r+0xc>
 8000fe2:	89a3      	ldrh	r3, [r4, #12]
 8000fe4:	059b      	lsls	r3, r3, #22
 8000fe6:	d4e1      	bmi.n	8000fac <_fflush_r+0xc>
 8000fe8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000fea:	f7ff fbde 	bl	80007aa <__retarget_lock_release_recursive>
 8000fee:	e7dd      	b.n	8000fac <_fflush_r+0xc>

08000ff0 <__malloc_lock>:
 8000ff0:	4801      	ldr	r0, [pc, #4]	; (8000ff8 <__malloc_lock+0x8>)
 8000ff2:	f7ff bbd9 	b.w	80007a8 <__retarget_lock_acquire_recursive>
 8000ff6:	bf00      	nop
 8000ff8:	200001bc 	.word	0x200001bc

08000ffc <__malloc_unlock>:
 8000ffc:	4801      	ldr	r0, [pc, #4]	; (8001004 <__malloc_unlock+0x8>)
 8000ffe:	f7ff bbd4 	b.w	80007aa <__retarget_lock_release_recursive>
 8001002:	bf00      	nop
 8001004:	200001bc 	.word	0x200001bc

08001008 <__sread>:
 8001008:	b510      	push	{r4, lr}
 800100a:	460c      	mov	r4, r1
 800100c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001010:	f000 f978 	bl	8001304 <_read_r>
 8001014:	2800      	cmp	r0, #0
 8001016:	bfab      	itete	ge
 8001018:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800101a:	89a3      	ldrhlt	r3, [r4, #12]
 800101c:	181b      	addge	r3, r3, r0
 800101e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001022:	bfac      	ite	ge
 8001024:	6563      	strge	r3, [r4, #84]	; 0x54
 8001026:	81a3      	strhlt	r3, [r4, #12]
 8001028:	bd10      	pop	{r4, pc}

0800102a <__swrite>:
 800102a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800102e:	461f      	mov	r7, r3
 8001030:	898b      	ldrh	r3, [r1, #12]
 8001032:	05db      	lsls	r3, r3, #23
 8001034:	4605      	mov	r5, r0
 8001036:	460c      	mov	r4, r1
 8001038:	4616      	mov	r6, r2
 800103a:	d505      	bpl.n	8001048 <__swrite+0x1e>
 800103c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001040:	2302      	movs	r3, #2
 8001042:	2200      	movs	r2, #0
 8001044:	f000 f94c 	bl	80012e0 <_lseek_r>
 8001048:	89a3      	ldrh	r3, [r4, #12]
 800104a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800104e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001052:	81a3      	strh	r3, [r4, #12]
 8001054:	4632      	mov	r2, r6
 8001056:	463b      	mov	r3, r7
 8001058:	4628      	mov	r0, r5
 800105a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800105e:	f000 b973 	b.w	8001348 <_write_r>

08001062 <__sseek>:
 8001062:	b510      	push	{r4, lr}
 8001064:	460c      	mov	r4, r1
 8001066:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800106a:	f000 f939 	bl	80012e0 <_lseek_r>
 800106e:	1c43      	adds	r3, r0, #1
 8001070:	89a3      	ldrh	r3, [r4, #12]
 8001072:	bf15      	itete	ne
 8001074:	6560      	strne	r0, [r4, #84]	; 0x54
 8001076:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800107a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800107e:	81a3      	strheq	r3, [r4, #12]
 8001080:	bf18      	it	ne
 8001082:	81a3      	strhne	r3, [r4, #12]
 8001084:	bd10      	pop	{r4, pc}

08001086 <__sclose>:
 8001086:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800108a:	f000 b8f7 	b.w	800127c <_close_r>

0800108e <__swbuf_r>:
 800108e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001090:	460e      	mov	r6, r1
 8001092:	4614      	mov	r4, r2
 8001094:	4605      	mov	r5, r0
 8001096:	b118      	cbz	r0, 80010a0 <__swbuf_r+0x12>
 8001098:	6a03      	ldr	r3, [r0, #32]
 800109a:	b90b      	cbnz	r3, 80010a0 <__swbuf_r+0x12>
 800109c:	f7ff fb0a 	bl	80006b4 <__sinit>
 80010a0:	69a3      	ldr	r3, [r4, #24]
 80010a2:	60a3      	str	r3, [r4, #8]
 80010a4:	89a3      	ldrh	r3, [r4, #12]
 80010a6:	071a      	lsls	r2, r3, #28
 80010a8:	d525      	bpl.n	80010f6 <__swbuf_r+0x68>
 80010aa:	6923      	ldr	r3, [r4, #16]
 80010ac:	b31b      	cbz	r3, 80010f6 <__swbuf_r+0x68>
 80010ae:	6823      	ldr	r3, [r4, #0]
 80010b0:	6922      	ldr	r2, [r4, #16]
 80010b2:	1a98      	subs	r0, r3, r2
 80010b4:	6963      	ldr	r3, [r4, #20]
 80010b6:	b2f6      	uxtb	r6, r6
 80010b8:	4283      	cmp	r3, r0
 80010ba:	4637      	mov	r7, r6
 80010bc:	dc04      	bgt.n	80010c8 <__swbuf_r+0x3a>
 80010be:	4621      	mov	r1, r4
 80010c0:	4628      	mov	r0, r5
 80010c2:	f7ff ff6d 	bl	8000fa0 <_fflush_r>
 80010c6:	b9e0      	cbnz	r0, 8001102 <__swbuf_r+0x74>
 80010c8:	68a3      	ldr	r3, [r4, #8]
 80010ca:	3b01      	subs	r3, #1
 80010cc:	60a3      	str	r3, [r4, #8]
 80010ce:	6823      	ldr	r3, [r4, #0]
 80010d0:	1c5a      	adds	r2, r3, #1
 80010d2:	6022      	str	r2, [r4, #0]
 80010d4:	701e      	strb	r6, [r3, #0]
 80010d6:	6962      	ldr	r2, [r4, #20]
 80010d8:	1c43      	adds	r3, r0, #1
 80010da:	429a      	cmp	r2, r3
 80010dc:	d004      	beq.n	80010e8 <__swbuf_r+0x5a>
 80010de:	89a3      	ldrh	r3, [r4, #12]
 80010e0:	07db      	lsls	r3, r3, #31
 80010e2:	d506      	bpl.n	80010f2 <__swbuf_r+0x64>
 80010e4:	2e0a      	cmp	r6, #10
 80010e6:	d104      	bne.n	80010f2 <__swbuf_r+0x64>
 80010e8:	4621      	mov	r1, r4
 80010ea:	4628      	mov	r0, r5
 80010ec:	f7ff ff58 	bl	8000fa0 <_fflush_r>
 80010f0:	b938      	cbnz	r0, 8001102 <__swbuf_r+0x74>
 80010f2:	4638      	mov	r0, r7
 80010f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80010f6:	4621      	mov	r1, r4
 80010f8:	4628      	mov	r0, r5
 80010fa:	f000 f805 	bl	8001108 <__swsetup_r>
 80010fe:	2800      	cmp	r0, #0
 8001100:	d0d5      	beq.n	80010ae <__swbuf_r+0x20>
 8001102:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8001106:	e7f4      	b.n	80010f2 <__swbuf_r+0x64>

08001108 <__swsetup_r>:
 8001108:	b538      	push	{r3, r4, r5, lr}
 800110a:	4b2a      	ldr	r3, [pc, #168]	; (80011b4 <__swsetup_r+0xac>)
 800110c:	4605      	mov	r5, r0
 800110e:	6818      	ldr	r0, [r3, #0]
 8001110:	460c      	mov	r4, r1
 8001112:	b118      	cbz	r0, 800111c <__swsetup_r+0x14>
 8001114:	6a03      	ldr	r3, [r0, #32]
 8001116:	b90b      	cbnz	r3, 800111c <__swsetup_r+0x14>
 8001118:	f7ff facc 	bl	80006b4 <__sinit>
 800111c:	89a3      	ldrh	r3, [r4, #12]
 800111e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001122:	0718      	lsls	r0, r3, #28
 8001124:	d422      	bmi.n	800116c <__swsetup_r+0x64>
 8001126:	06d9      	lsls	r1, r3, #27
 8001128:	d407      	bmi.n	800113a <__swsetup_r+0x32>
 800112a:	2309      	movs	r3, #9
 800112c:	602b      	str	r3, [r5, #0]
 800112e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001132:	81a3      	strh	r3, [r4, #12]
 8001134:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001138:	e034      	b.n	80011a4 <__swsetup_r+0x9c>
 800113a:	0758      	lsls	r0, r3, #29
 800113c:	d512      	bpl.n	8001164 <__swsetup_r+0x5c>
 800113e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001140:	b141      	cbz	r1, 8001154 <__swsetup_r+0x4c>
 8001142:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001146:	4299      	cmp	r1, r3
 8001148:	d002      	beq.n	8001150 <__swsetup_r+0x48>
 800114a:	4628      	mov	r0, r5
 800114c:	f000 f90e 	bl	800136c <_free_r>
 8001150:	2300      	movs	r3, #0
 8001152:	6363      	str	r3, [r4, #52]	; 0x34
 8001154:	89a3      	ldrh	r3, [r4, #12]
 8001156:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800115a:	81a3      	strh	r3, [r4, #12]
 800115c:	2300      	movs	r3, #0
 800115e:	6063      	str	r3, [r4, #4]
 8001160:	6923      	ldr	r3, [r4, #16]
 8001162:	6023      	str	r3, [r4, #0]
 8001164:	89a3      	ldrh	r3, [r4, #12]
 8001166:	f043 0308 	orr.w	r3, r3, #8
 800116a:	81a3      	strh	r3, [r4, #12]
 800116c:	6923      	ldr	r3, [r4, #16]
 800116e:	b94b      	cbnz	r3, 8001184 <__swsetup_r+0x7c>
 8001170:	89a3      	ldrh	r3, [r4, #12]
 8001172:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001176:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800117a:	d003      	beq.n	8001184 <__swsetup_r+0x7c>
 800117c:	4621      	mov	r1, r4
 800117e:	4628      	mov	r0, r5
 8001180:	f000 f840 	bl	8001204 <__smakebuf_r>
 8001184:	89a0      	ldrh	r0, [r4, #12]
 8001186:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800118a:	f010 0301 	ands.w	r3, r0, #1
 800118e:	d00a      	beq.n	80011a6 <__swsetup_r+0x9e>
 8001190:	2300      	movs	r3, #0
 8001192:	60a3      	str	r3, [r4, #8]
 8001194:	6963      	ldr	r3, [r4, #20]
 8001196:	425b      	negs	r3, r3
 8001198:	61a3      	str	r3, [r4, #24]
 800119a:	6923      	ldr	r3, [r4, #16]
 800119c:	b943      	cbnz	r3, 80011b0 <__swsetup_r+0xa8>
 800119e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80011a2:	d1c4      	bne.n	800112e <__swsetup_r+0x26>
 80011a4:	bd38      	pop	{r3, r4, r5, pc}
 80011a6:	0781      	lsls	r1, r0, #30
 80011a8:	bf58      	it	pl
 80011aa:	6963      	ldrpl	r3, [r4, #20]
 80011ac:	60a3      	str	r3, [r4, #8]
 80011ae:	e7f4      	b.n	800119a <__swsetup_r+0x92>
 80011b0:	2000      	movs	r0, #0
 80011b2:	e7f7      	b.n	80011a4 <__swsetup_r+0x9c>
 80011b4:	20000058 	.word	0x20000058

080011b8 <__swhatbuf_r>:
 80011b8:	b570      	push	{r4, r5, r6, lr}
 80011ba:	460c      	mov	r4, r1
 80011bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80011c0:	2900      	cmp	r1, #0
 80011c2:	b096      	sub	sp, #88	; 0x58
 80011c4:	4615      	mov	r5, r2
 80011c6:	461e      	mov	r6, r3
 80011c8:	da0d      	bge.n	80011e6 <__swhatbuf_r+0x2e>
 80011ca:	89a3      	ldrh	r3, [r4, #12]
 80011cc:	f013 0f80 	tst.w	r3, #128	; 0x80
 80011d0:	f04f 0100 	mov.w	r1, #0
 80011d4:	bf0c      	ite	eq
 80011d6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80011da:	2340      	movne	r3, #64	; 0x40
 80011dc:	2000      	movs	r0, #0
 80011de:	6031      	str	r1, [r6, #0]
 80011e0:	602b      	str	r3, [r5, #0]
 80011e2:	b016      	add	sp, #88	; 0x58
 80011e4:	bd70      	pop	{r4, r5, r6, pc}
 80011e6:	466a      	mov	r2, sp
 80011e8:	f000 f858 	bl	800129c <_fstat_r>
 80011ec:	2800      	cmp	r0, #0
 80011ee:	dbec      	blt.n	80011ca <__swhatbuf_r+0x12>
 80011f0:	9901      	ldr	r1, [sp, #4]
 80011f2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80011f6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80011fa:	4259      	negs	r1, r3
 80011fc:	4159      	adcs	r1, r3
 80011fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001202:	e7eb      	b.n	80011dc <__swhatbuf_r+0x24>

08001204 <__smakebuf_r>:
 8001204:	898b      	ldrh	r3, [r1, #12]
 8001206:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001208:	079d      	lsls	r5, r3, #30
 800120a:	4606      	mov	r6, r0
 800120c:	460c      	mov	r4, r1
 800120e:	d507      	bpl.n	8001220 <__smakebuf_r+0x1c>
 8001210:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001214:	6023      	str	r3, [r4, #0]
 8001216:	6123      	str	r3, [r4, #16]
 8001218:	2301      	movs	r3, #1
 800121a:	6163      	str	r3, [r4, #20]
 800121c:	b002      	add	sp, #8
 800121e:	bd70      	pop	{r4, r5, r6, pc}
 8001220:	ab01      	add	r3, sp, #4
 8001222:	466a      	mov	r2, sp
 8001224:	f7ff ffc8 	bl	80011b8 <__swhatbuf_r>
 8001228:	9900      	ldr	r1, [sp, #0]
 800122a:	4605      	mov	r5, r0
 800122c:	4630      	mov	r0, r6
 800122e:	f7ff fc21 	bl	8000a74 <_malloc_r>
 8001232:	b948      	cbnz	r0, 8001248 <__smakebuf_r+0x44>
 8001234:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001238:	059a      	lsls	r2, r3, #22
 800123a:	d4ef      	bmi.n	800121c <__smakebuf_r+0x18>
 800123c:	f023 0303 	bic.w	r3, r3, #3
 8001240:	f043 0302 	orr.w	r3, r3, #2
 8001244:	81a3      	strh	r3, [r4, #12]
 8001246:	e7e3      	b.n	8001210 <__smakebuf_r+0xc>
 8001248:	89a3      	ldrh	r3, [r4, #12]
 800124a:	6020      	str	r0, [r4, #0]
 800124c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001250:	81a3      	strh	r3, [r4, #12]
 8001252:	9b00      	ldr	r3, [sp, #0]
 8001254:	6163      	str	r3, [r4, #20]
 8001256:	9b01      	ldr	r3, [sp, #4]
 8001258:	6120      	str	r0, [r4, #16]
 800125a:	b15b      	cbz	r3, 8001274 <__smakebuf_r+0x70>
 800125c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001260:	4630      	mov	r0, r6
 8001262:	f000 f82d 	bl	80012c0 <_isatty_r>
 8001266:	b128      	cbz	r0, 8001274 <__smakebuf_r+0x70>
 8001268:	89a3      	ldrh	r3, [r4, #12]
 800126a:	f023 0303 	bic.w	r3, r3, #3
 800126e:	f043 0301 	orr.w	r3, r3, #1
 8001272:	81a3      	strh	r3, [r4, #12]
 8001274:	89a3      	ldrh	r3, [r4, #12]
 8001276:	431d      	orrs	r5, r3
 8001278:	81a5      	strh	r5, [r4, #12]
 800127a:	e7cf      	b.n	800121c <__smakebuf_r+0x18>

0800127c <_close_r>:
 800127c:	b538      	push	{r3, r4, r5, lr}
 800127e:	4d06      	ldr	r5, [pc, #24]	; (8001298 <_close_r+0x1c>)
 8001280:	2300      	movs	r3, #0
 8001282:	4604      	mov	r4, r0
 8001284:	4608      	mov	r0, r1
 8001286:	602b      	str	r3, [r5, #0]
 8001288:	f7ff f905 	bl	8000496 <_close>
 800128c:	1c43      	adds	r3, r0, #1
 800128e:	d102      	bne.n	8001296 <_close_r+0x1a>
 8001290:	682b      	ldr	r3, [r5, #0]
 8001292:	b103      	cbz	r3, 8001296 <_close_r+0x1a>
 8001294:	6023      	str	r3, [r4, #0]
 8001296:	bd38      	pop	{r3, r4, r5, pc}
 8001298:	200001c8 	.word	0x200001c8

0800129c <_fstat_r>:
 800129c:	b538      	push	{r3, r4, r5, lr}
 800129e:	4d07      	ldr	r5, [pc, #28]	; (80012bc <_fstat_r+0x20>)
 80012a0:	2300      	movs	r3, #0
 80012a2:	4604      	mov	r4, r0
 80012a4:	4608      	mov	r0, r1
 80012a6:	4611      	mov	r1, r2
 80012a8:	602b      	str	r3, [r5, #0]
 80012aa:	f7ff f900 	bl	80004ae <_fstat>
 80012ae:	1c43      	adds	r3, r0, #1
 80012b0:	d102      	bne.n	80012b8 <_fstat_r+0x1c>
 80012b2:	682b      	ldr	r3, [r5, #0]
 80012b4:	b103      	cbz	r3, 80012b8 <_fstat_r+0x1c>
 80012b6:	6023      	str	r3, [r4, #0]
 80012b8:	bd38      	pop	{r3, r4, r5, pc}
 80012ba:	bf00      	nop
 80012bc:	200001c8 	.word	0x200001c8

080012c0 <_isatty_r>:
 80012c0:	b538      	push	{r3, r4, r5, lr}
 80012c2:	4d06      	ldr	r5, [pc, #24]	; (80012dc <_isatty_r+0x1c>)
 80012c4:	2300      	movs	r3, #0
 80012c6:	4604      	mov	r4, r0
 80012c8:	4608      	mov	r0, r1
 80012ca:	602b      	str	r3, [r5, #0]
 80012cc:	f7ff f8ff 	bl	80004ce <_isatty>
 80012d0:	1c43      	adds	r3, r0, #1
 80012d2:	d102      	bne.n	80012da <_isatty_r+0x1a>
 80012d4:	682b      	ldr	r3, [r5, #0]
 80012d6:	b103      	cbz	r3, 80012da <_isatty_r+0x1a>
 80012d8:	6023      	str	r3, [r4, #0]
 80012da:	bd38      	pop	{r3, r4, r5, pc}
 80012dc:	200001c8 	.word	0x200001c8

080012e0 <_lseek_r>:
 80012e0:	b538      	push	{r3, r4, r5, lr}
 80012e2:	4d07      	ldr	r5, [pc, #28]	; (8001300 <_lseek_r+0x20>)
 80012e4:	4604      	mov	r4, r0
 80012e6:	4608      	mov	r0, r1
 80012e8:	4611      	mov	r1, r2
 80012ea:	2200      	movs	r2, #0
 80012ec:	602a      	str	r2, [r5, #0]
 80012ee:	461a      	mov	r2, r3
 80012f0:	f7ff f8f8 	bl	80004e4 <_lseek>
 80012f4:	1c43      	adds	r3, r0, #1
 80012f6:	d102      	bne.n	80012fe <_lseek_r+0x1e>
 80012f8:	682b      	ldr	r3, [r5, #0]
 80012fa:	b103      	cbz	r3, 80012fe <_lseek_r+0x1e>
 80012fc:	6023      	str	r3, [r4, #0]
 80012fe:	bd38      	pop	{r3, r4, r5, pc}
 8001300:	200001c8 	.word	0x200001c8

08001304 <_read_r>:
 8001304:	b538      	push	{r3, r4, r5, lr}
 8001306:	4d07      	ldr	r5, [pc, #28]	; (8001324 <_read_r+0x20>)
 8001308:	4604      	mov	r4, r0
 800130a:	4608      	mov	r0, r1
 800130c:	4611      	mov	r1, r2
 800130e:	2200      	movs	r2, #0
 8001310:	602a      	str	r2, [r5, #0]
 8001312:	461a      	mov	r2, r3
 8001314:	f7ff f886 	bl	8000424 <_read>
 8001318:	1c43      	adds	r3, r0, #1
 800131a:	d102      	bne.n	8001322 <_read_r+0x1e>
 800131c:	682b      	ldr	r3, [r5, #0]
 800131e:	b103      	cbz	r3, 8001322 <_read_r+0x1e>
 8001320:	6023      	str	r3, [r4, #0]
 8001322:	bd38      	pop	{r3, r4, r5, pc}
 8001324:	200001c8 	.word	0x200001c8

08001328 <_sbrk_r>:
 8001328:	b538      	push	{r3, r4, r5, lr}
 800132a:	4d06      	ldr	r5, [pc, #24]	; (8001344 <_sbrk_r+0x1c>)
 800132c:	2300      	movs	r3, #0
 800132e:	4604      	mov	r4, r0
 8001330:	4608      	mov	r0, r1
 8001332:	602b      	str	r3, [r5, #0]
 8001334:	f7ff f8e4 	bl	8000500 <_sbrk>
 8001338:	1c43      	adds	r3, r0, #1
 800133a:	d102      	bne.n	8001342 <_sbrk_r+0x1a>
 800133c:	682b      	ldr	r3, [r5, #0]
 800133e:	b103      	cbz	r3, 8001342 <_sbrk_r+0x1a>
 8001340:	6023      	str	r3, [r4, #0]
 8001342:	bd38      	pop	{r3, r4, r5, pc}
 8001344:	200001c8 	.word	0x200001c8

08001348 <_write_r>:
 8001348:	b538      	push	{r3, r4, r5, lr}
 800134a:	4d07      	ldr	r5, [pc, #28]	; (8001368 <_write_r+0x20>)
 800134c:	4604      	mov	r4, r0
 800134e:	4608      	mov	r0, r1
 8001350:	4611      	mov	r1, r2
 8001352:	2200      	movs	r2, #0
 8001354:	602a      	str	r2, [r5, #0]
 8001356:	461a      	mov	r2, r3
 8001358:	f7ff f881 	bl	800045e <_write>
 800135c:	1c43      	adds	r3, r0, #1
 800135e:	d102      	bne.n	8001366 <_write_r+0x1e>
 8001360:	682b      	ldr	r3, [r5, #0]
 8001362:	b103      	cbz	r3, 8001366 <_write_r+0x1e>
 8001364:	6023      	str	r3, [r4, #0]
 8001366:	bd38      	pop	{r3, r4, r5, pc}
 8001368:	200001c8 	.word	0x200001c8

0800136c <_free_r>:
 800136c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800136e:	2900      	cmp	r1, #0
 8001370:	d044      	beq.n	80013fc <_free_r+0x90>
 8001372:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001376:	9001      	str	r0, [sp, #4]
 8001378:	2b00      	cmp	r3, #0
 800137a:	f1a1 0404 	sub.w	r4, r1, #4
 800137e:	bfb8      	it	lt
 8001380:	18e4      	addlt	r4, r4, r3
 8001382:	f7ff fe35 	bl	8000ff0 <__malloc_lock>
 8001386:	4a1e      	ldr	r2, [pc, #120]	; (8001400 <_free_r+0x94>)
 8001388:	9801      	ldr	r0, [sp, #4]
 800138a:	6813      	ldr	r3, [r2, #0]
 800138c:	b933      	cbnz	r3, 800139c <_free_r+0x30>
 800138e:	6063      	str	r3, [r4, #4]
 8001390:	6014      	str	r4, [r2, #0]
 8001392:	b003      	add	sp, #12
 8001394:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001398:	f7ff be30 	b.w	8000ffc <__malloc_unlock>
 800139c:	42a3      	cmp	r3, r4
 800139e:	d908      	bls.n	80013b2 <_free_r+0x46>
 80013a0:	6825      	ldr	r5, [r4, #0]
 80013a2:	1961      	adds	r1, r4, r5
 80013a4:	428b      	cmp	r3, r1
 80013a6:	bf01      	itttt	eq
 80013a8:	6819      	ldreq	r1, [r3, #0]
 80013aa:	685b      	ldreq	r3, [r3, #4]
 80013ac:	1949      	addeq	r1, r1, r5
 80013ae:	6021      	streq	r1, [r4, #0]
 80013b0:	e7ed      	b.n	800138e <_free_r+0x22>
 80013b2:	461a      	mov	r2, r3
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	b10b      	cbz	r3, 80013bc <_free_r+0x50>
 80013b8:	42a3      	cmp	r3, r4
 80013ba:	d9fa      	bls.n	80013b2 <_free_r+0x46>
 80013bc:	6811      	ldr	r1, [r2, #0]
 80013be:	1855      	adds	r5, r2, r1
 80013c0:	42a5      	cmp	r5, r4
 80013c2:	d10b      	bne.n	80013dc <_free_r+0x70>
 80013c4:	6824      	ldr	r4, [r4, #0]
 80013c6:	4421      	add	r1, r4
 80013c8:	1854      	adds	r4, r2, r1
 80013ca:	42a3      	cmp	r3, r4
 80013cc:	6011      	str	r1, [r2, #0]
 80013ce:	d1e0      	bne.n	8001392 <_free_r+0x26>
 80013d0:	681c      	ldr	r4, [r3, #0]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	6053      	str	r3, [r2, #4]
 80013d6:	440c      	add	r4, r1
 80013d8:	6014      	str	r4, [r2, #0]
 80013da:	e7da      	b.n	8001392 <_free_r+0x26>
 80013dc:	d902      	bls.n	80013e4 <_free_r+0x78>
 80013de:	230c      	movs	r3, #12
 80013e0:	6003      	str	r3, [r0, #0]
 80013e2:	e7d6      	b.n	8001392 <_free_r+0x26>
 80013e4:	6825      	ldr	r5, [r4, #0]
 80013e6:	1961      	adds	r1, r4, r5
 80013e8:	428b      	cmp	r3, r1
 80013ea:	bf04      	itt	eq
 80013ec:	6819      	ldreq	r1, [r3, #0]
 80013ee:	685b      	ldreq	r3, [r3, #4]
 80013f0:	6063      	str	r3, [r4, #4]
 80013f2:	bf04      	itt	eq
 80013f4:	1949      	addeq	r1, r1, r5
 80013f6:	6021      	streq	r1, [r4, #0]
 80013f8:	6054      	str	r4, [r2, #4]
 80013fa:	e7ca      	b.n	8001392 <_free_r+0x26>
 80013fc:	b003      	add	sp, #12
 80013fe:	bd30      	pop	{r4, r5, pc}
 8001400:	200001c0 	.word	0x200001c0

08001404 <_init>:
 8001404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001406:	bf00      	nop
 8001408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800140a:	bc08      	pop	{r3}
 800140c:	469e      	mov	lr, r3
 800140e:	4770      	bx	lr

08001410 <_fini>:
 8001410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001412:	bf00      	nop
 8001414:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001416:	bc08      	pop	{r3}
 8001418:	469e      	mov	lr, r3
 800141a:	4770      	bx	lr
